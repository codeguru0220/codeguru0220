{"ast":null,"code":"import { downloadSvgImage, loadGifImage, loadImage } from \"./Utils\";\nimport { ImageDrawer } from \"./ImageDrawer\";\nimport { ImagePreloaderPlugin } from \"./ImagePreloader\";\nimport { errorPrefix } from \"tsparticles-engine\";\n\nfunction addLoadImageToEngine(engine) {\n  if (engine.loadImage) {\n    return;\n  }\n\n  engine.loadImage = async data => {\n    if (!data.name && !data.src) {\n      throw new Error(`${errorPrefix} no image source provided`);\n    }\n\n    if (!engine.images) {\n      engine.images = [];\n    }\n\n    if (engine.images.find(t => t.name === data.name || t.source === data.src)) {\n      return;\n    }\n\n    try {\n      const image = {\n        gif: data.gif ?? false,\n        name: data.name ?? data.src,\n        source: data.src,\n        type: data.src.substring(data.src.length - 3),\n        error: false,\n        loading: true,\n        replaceColor: data.replaceColor,\n        ratio: data.width && data.height ? data.width / data.height : undefined\n      };\n      engine.images.push(image);\n      const imageFunc = data.gif ? loadGifImage : data.replaceColor ? downloadSvgImage : loadImage;\n      await imageFunc(image);\n    } catch {\n      throw new Error(`${errorPrefix} ${data.name ?? data.src} not found`);\n    }\n  };\n}\n\nexport async function loadImageShape(engine) {\n  let refresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  addLoadImageToEngine(engine);\n  const preloader = new ImagePreloaderPlugin(engine);\n  await engine.addPlugin(preloader, refresh);\n  await engine.addShape([\"image\", \"images\"], new ImageDrawer(engine), refresh);\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-shape-image/esm/index.js"],"names":["downloadSvgImage","loadGifImage","loadImage","ImageDrawer","ImagePreloaderPlugin","errorPrefix","addLoadImageToEngine","engine","data","name","src","Error","images","find","t","source","image","gif","type","substring","length","error","loading","replaceColor","ratio","width","height","undefined","push","imageFunc","loadImageShape","refresh","preloader","addPlugin","addShape"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,YAA3B,EAAyCC,SAAzC,QAA0D,SAA1D;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AACA,SAASC,oBAAT,CAA8BC,MAA9B,EAAsC;AAClC,MAAIA,MAAM,CAACL,SAAX,EAAsB;AAClB;AACH;;AACDK,EAAAA,MAAM,CAACL,SAAP,GAAmB,MAAOM,IAAP,IAAgB;AAC/B,QAAI,CAACA,IAAI,CAACC,IAAN,IAAc,CAACD,IAAI,CAACE,GAAxB,EAA6B;AACzB,YAAM,IAAIC,KAAJ,CAAW,GAAEN,WAAY,2BAAzB,CAAN;AACH;;AACD,QAAI,CAACE,MAAM,CAACK,MAAZ,EAAoB;AAChBL,MAAAA,MAAM,CAACK,MAAP,GAAgB,EAAhB;AACH;;AACD,QAAIL,MAAM,CAACK,MAAP,CAAcC,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAACL,IAAF,KAAWD,IAAI,CAACC,IAAhB,IAAwBK,CAAC,CAACC,MAAF,KAAaP,IAAI,CAACE,GAApE,CAAJ,EAA8E;AAC1E;AACH;;AACD,QAAI;AACA,YAAMM,KAAK,GAAG;AACVC,QAAAA,GAAG,EAAET,IAAI,CAACS,GAAL,IAAY,KADP;AAEVR,QAAAA,IAAI,EAAED,IAAI,CAACC,IAAL,IAAaD,IAAI,CAACE,GAFd;AAGVK,QAAAA,MAAM,EAAEP,IAAI,CAACE,GAHH;AAIVQ,QAAAA,IAAI,EAAEV,IAAI,CAACE,GAAL,CAASS,SAAT,CAAmBX,IAAI,CAACE,GAAL,CAASU,MAAT,GAAkB,CAArC,CAJI;AAKVC,QAAAA,KAAK,EAAE,KALG;AAMVC,QAAAA,OAAO,EAAE,IANC;AAOVC,QAAAA,YAAY,EAAEf,IAAI,CAACe,YAPT;AAQVC,QAAAA,KAAK,EAAEhB,IAAI,CAACiB,KAAL,IAAcjB,IAAI,CAACkB,MAAnB,GAA4BlB,IAAI,CAACiB,KAAL,GAAajB,IAAI,CAACkB,MAA9C,GAAuDC;AARpD,OAAd;AAUApB,MAAAA,MAAM,CAACK,MAAP,CAAcgB,IAAd,CAAmBZ,KAAnB;AACA,YAAMa,SAAS,GAAGrB,IAAI,CAACS,GAAL,GAAWhB,YAAX,GAA0BO,IAAI,CAACe,YAAL,GAAoBvB,gBAApB,GAAuCE,SAAnF;AACA,YAAM2B,SAAS,CAACb,KAAD,CAAf;AACH,KAdD,CAeA,MAAM;AACF,YAAM,IAAIL,KAAJ,CAAW,GAAEN,WAAY,IAAGG,IAAI,CAACC,IAAL,IAAaD,IAAI,CAACE,GAAI,YAAlD,CAAN;AACH;AACJ,GA5BD;AA6BH;;AACD,OAAO,eAAeoB,cAAf,CAA8BvB,MAA9B,EAAsD;AAAA,MAAhBwB,OAAgB,uEAAN,IAAM;AACzDzB,EAAAA,oBAAoB,CAACC,MAAD,CAApB;AACA,QAAMyB,SAAS,GAAG,IAAI5B,oBAAJ,CAAyBG,MAAzB,CAAlB;AACA,QAAMA,MAAM,CAAC0B,SAAP,CAAiBD,SAAjB,EAA4BD,OAA5B,CAAN;AACA,QAAMxB,MAAM,CAAC2B,QAAP,CAAgB,CAAC,OAAD,EAAU,QAAV,CAAhB,EAAqC,IAAI/B,WAAJ,CAAgBI,MAAhB,CAArC,EAA8DwB,OAA9D,CAAN;AACH","sourcesContent":["import { downloadSvgImage, loadGifImage, loadImage } from \"./Utils\";\nimport { ImageDrawer } from \"./ImageDrawer\";\nimport { ImagePreloaderPlugin } from \"./ImagePreloader\";\nimport { errorPrefix } from \"tsparticles-engine\";\nfunction addLoadImageToEngine(engine) {\n    if (engine.loadImage) {\n        return;\n    }\n    engine.loadImage = async (data) => {\n        if (!data.name && !data.src) {\n            throw new Error(`${errorPrefix} no image source provided`);\n        }\n        if (!engine.images) {\n            engine.images = [];\n        }\n        if (engine.images.find((t) => t.name === data.name || t.source === data.src)) {\n            return;\n        }\n        try {\n            const image = {\n                gif: data.gif ?? false,\n                name: data.name ?? data.src,\n                source: data.src,\n                type: data.src.substring(data.src.length - 3),\n                error: false,\n                loading: true,\n                replaceColor: data.replaceColor,\n                ratio: data.width && data.height ? data.width / data.height : undefined,\n            };\n            engine.images.push(image);\n            const imageFunc = data.gif ? loadGifImage : data.replaceColor ? downloadSvgImage : loadImage;\n            await imageFunc(image);\n        }\n        catch {\n            throw new Error(`${errorPrefix} ${data.name ?? data.src} not found`);\n        }\n    };\n}\nexport async function loadImageShape(engine, refresh = true) {\n    addLoadImageToEngine(engine);\n    const preloader = new ImagePreloaderPlugin(engine);\n    await engine.addPlugin(preloader, refresh);\n    await engine.addShape([\"image\", \"images\"], new ImageDrawer(engine), refresh);\n}\n"]},"metadata":{},"sourceType":"module"}