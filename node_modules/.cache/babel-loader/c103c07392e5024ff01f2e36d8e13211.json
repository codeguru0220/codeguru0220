{"ast":null,"code":"import { errorPrefix } from \"./Constants\";\nimport { isNumber } from \"../../Utils/Utils\";\nexport class Vector3d {\n  constructor(xOrCoords, y, z) {\n    this._updateFromAngle = (angle, length) => {\n      this.x = Math.cos(angle) * length;\n      this.y = Math.sin(angle) * length;\n    };\n\n    if (!isNumber(xOrCoords) && xOrCoords) {\n      this.x = xOrCoords.x;\n      this.y = xOrCoords.y;\n      const coords3d = xOrCoords;\n      this.z = coords3d.z ? coords3d.z : 0;\n    } else if (xOrCoords !== undefined && y !== undefined) {\n      this.x = xOrCoords;\n      this.y = y;\n      this.z = z ?? 0;\n    } else {\n      throw new Error(`${errorPrefix} Vector3d not initialized correctly`);\n    }\n  }\n\n  static get origin() {\n    return Vector3d.create(0, 0, 0);\n  }\n\n  get angle() {\n    return Math.atan2(this.y, this.x);\n  }\n\n  set angle(angle) {\n    this._updateFromAngle(angle, this.length);\n  }\n\n  get length() {\n    return Math.sqrt(this.getLengthSq());\n  }\n\n  set length(length) {\n    this._updateFromAngle(this.angle, length);\n  }\n\n  static clone(source) {\n    return Vector3d.create(source.x, source.y, source.z);\n  }\n\n  static create(x, y, z) {\n    return new Vector3d(x, y, z);\n  }\n\n  add(v) {\n    return Vector3d.create(this.x + v.x, this.y + v.y, this.z + v.z);\n  }\n\n  addTo(v) {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n  }\n\n  copy() {\n    return Vector3d.clone(this);\n  }\n\n  distanceTo(v) {\n    return this.sub(v).length;\n  }\n\n  distanceToSq(v) {\n    return this.sub(v).getLengthSq();\n  }\n\n  div(n) {\n    return Vector3d.create(this.x / n, this.y / n, this.z / n);\n  }\n\n  divTo(n) {\n    this.x /= n;\n    this.y /= n;\n    this.z /= n;\n  }\n\n  getLengthSq() {\n    return this.x ** 2 + this.y ** 2;\n  }\n\n  mult(n) {\n    return Vector3d.create(this.x * n, this.y * n, this.z * n);\n  }\n\n  multTo(n) {\n    this.x *= n;\n    this.y *= n;\n    this.z *= n;\n  }\n\n  normalize() {\n    const length = this.length;\n\n    if (length != 0) {\n      this.multTo(1.0 / length);\n    }\n  }\n\n  rotate(angle) {\n    return Vector3d.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle), 0);\n  }\n\n  setTo(c) {\n    this.x = c.x;\n    this.y = c.y;\n    const v3d = c;\n    this.z = v3d.z ? v3d.z : 0;\n  }\n\n  sub(v) {\n    return Vector3d.create(this.x - v.x, this.y - v.y, this.z - v.z);\n  }\n\n  subFrom(v) {\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n  }\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-engine/esm/Core/Utils/Vector3d.js"],"names":["errorPrefix","isNumber","Vector3d","constructor","xOrCoords","y","z","_updateFromAngle","angle","length","x","Math","cos","sin","coords3d","undefined","Error","origin","create","atan2","sqrt","getLengthSq","clone","source","add","v","addTo","copy","distanceTo","sub","distanceToSq","div","n","divTo","mult","multTo","normalize","rotate","setTo","c","v3d","subFrom"],"mappings":"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","sourcesContent":["import { errorPrefix } from \"./Constants\";\nimport { isNumber } from \"../../Utils/Utils\";\nexport class Vector3d {\n    constructor(xOrCoords, y, z) {\n        this._updateFromAngle = (angle, length) => {\n            this.x = Math.cos(angle) * length;\n            this.y = Math.sin(angle) * length;\n        };\n        if (!isNumber(xOrCoords) && xOrCoords) {\n            this.x = xOrCoords.x;\n            this.y = xOrCoords.y;\n            const coords3d = xOrCoords;\n            this.z = coords3d.z ? coords3d.z : 0;\n        }\n        else if (xOrCoords !== undefined && y !== undefined) {\n            this.x = xOrCoords;\n            this.y = y;\n            this.z = z ?? 0;\n        }\n        else {\n            throw new Error(`${errorPrefix} Vector3d not initialized correctly`);\n        }\n    }\n    static get origin() {\n        return Vector3d.create(0, 0, 0);\n    }\n    get angle() {\n        return Math.atan2(this.y, this.x);\n    }\n    set angle(angle) {\n        this._updateFromAngle(angle, this.length);\n    }\n    get length() {\n        return Math.sqrt(this.getLengthSq());\n    }\n    set length(length) {\n        this._updateFromAngle(this.angle, length);\n    }\n    static clone(source) {\n        return Vector3d.create(source.x, source.y, source.z);\n    }\n    static create(x, y, z) {\n        return new Vector3d(x, y, z);\n    }\n    add(v) {\n        return Vector3d.create(this.x + v.x, this.y + v.y, this.z + v.z);\n    }\n    addTo(v) {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n    }\n    copy() {\n        return Vector3d.clone(this);\n    }\n    distanceTo(v) {\n        return this.sub(v).length;\n    }\n    distanceToSq(v) {\n        return this.sub(v).getLengthSq();\n    }\n    div(n) {\n        return Vector3d.create(this.x / n, this.y / n, this.z / n);\n    }\n    divTo(n) {\n        this.x /= n;\n        this.y /= n;\n        this.z /= n;\n    }\n    getLengthSq() {\n        return this.x ** 2 + this.y ** 2;\n    }\n    mult(n) {\n        return Vector3d.create(this.x * n, this.y * n, this.z * n);\n    }\n    multTo(n) {\n        this.x *= n;\n        this.y *= n;\n        this.z *= n;\n    }\n    normalize() {\n        const length = this.length;\n        if (length != 0) {\n            this.multTo(1.0 / length);\n        }\n    }\n    rotate(angle) {\n        return Vector3d.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle), 0);\n    }\n    setTo(c) {\n        this.x = c.x;\n        this.y = c.y;\n        const v3d = c;\n        this.z = v3d.z ? v3d.z : 0;\n    }\n    sub(v) {\n        return Vector3d.create(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n    subFrom(v) {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}