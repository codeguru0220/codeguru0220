{"ast":null,"code":"export default function slideToLoop() {\n  let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let speed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.params.speed;\n  let runCallbacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let internal = arguments.length > 3 ? arguments[3] : undefined;\n\n  if (typeof index === 'string') {\n    /**\n     * The `index` argument converted from `string` to `number`.\n     * @type {number}\n     */\n    const indexAsNumber = parseInt(index, 10);\n    /**\n     * Determines whether the `index` argument is a valid `number`\n     * after being converted from the `string` type.\n     * @type {boolean}\n     */\n\n    const isValidNumber = isFinite(indexAsNumber);\n\n    if (!isValidNumber) {\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index}] given.`);\n    } // Knowing that the converted `index` is a valid number,\n    // we can update the original argument's value.\n\n\n    index = indexAsNumber;\n  }\n\n  const swiper = this;\n  let newIndex = index;\n\n  if (swiper.params.loop) {\n    newIndex += swiper.loopedSlides;\n  }\n\n  return swiper.slideTo(newIndex, speed, runCallbacks, internal);\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/swiper/core/slide/slideToLoop.js"],"names":["slideToLoop","index","speed","params","runCallbacks","internal","indexAsNumber","parseInt","isValidNumber","isFinite","Error","swiper","newIndex","loop","loopedSlides","slideTo"],"mappings":"AAAA,eAAe,SAASA,WAAT,GAA0F;AAAA,MAArEC,KAAqE,uEAA7D,CAA6D;AAAA,MAA1DC,KAA0D,uEAAlD,KAAKC,MAAL,CAAYD,KAAsC;AAAA,MAA/BE,YAA+B,uEAAhB,IAAgB;AAAA,MAAVC,QAAU;;AACvG,MAAI,OAAOJ,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AACJ;AACA;AACA;AACI,UAAMK,aAAa,GAAGC,QAAQ,CAACN,KAAD,EAAQ,EAAR,CAA9B;AACA;AACJ;AACA;AACA;AACA;;AAEI,UAAMO,aAAa,GAAGC,QAAQ,CAACH,aAAD,CAA9B;;AAEA,QAAI,CAACE,aAAL,EAAoB;AAClB,YAAM,IAAIE,KAAJ,CAAW,sEAAqET,KAAM,UAAtF,CAAN;AACD,KAhB4B,CAgB3B;AACF;;;AAGAA,IAAAA,KAAK,GAAGK,aAAR;AACD;;AAED,QAAMK,MAAM,GAAG,IAAf;AACA,MAAIC,QAAQ,GAAGX,KAAf;;AAEA,MAAIU,MAAM,CAACR,MAAP,CAAcU,IAAlB,EAAwB;AACtBD,IAAAA,QAAQ,IAAID,MAAM,CAACG,YAAnB;AACD;;AAED,SAAOH,MAAM,CAACI,OAAP,CAAeH,QAAf,EAAyBV,KAAzB,EAAgCE,YAAhC,EAA8CC,QAA9C,CAAP;AACD","sourcesContent":["export default function slideToLoop(index = 0, speed = this.params.speed, runCallbacks = true, internal) {\n  if (typeof index === 'string') {\n    /**\n     * The `index` argument converted from `string` to `number`.\n     * @type {number}\n     */\n    const indexAsNumber = parseInt(index, 10);\n    /**\n     * Determines whether the `index` argument is a valid `number`\n     * after being converted from the `string` type.\n     * @type {boolean}\n     */\n\n    const isValidNumber = isFinite(indexAsNumber);\n\n    if (!isValidNumber) {\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index}] given.`);\n    } // Knowing that the converted `index` is a valid number,\n    // we can update the original argument's value.\n\n\n    index = indexAsNumber;\n  }\n\n  const swiper = this;\n  let newIndex = index;\n\n  if (swiper.params.loop) {\n    newIndex += swiper.loopedSlides;\n  }\n\n  return swiper.slideTo(newIndex, speed, runCallbacks, internal);\n}"]},"metadata":{},"sourceType":"module"}