{"ast":null,"code":"import { executeOnSingleOrMultiple, isArray, isInArray } from \"tsparticles-engine\";\nimport { CircleShape } from \"./Shapes/Circle/CircleShape\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { Emitters } from \"./Emitters\";\nimport { ShapeManager } from \"./ShapeManager\";\nimport { SquareShape } from \"./Shapes/Square/SquareShape\";\n\nclass EmittersPlugin {\n  constructor(engine) {\n    this._engine = engine;\n    this.id = \"emitters\";\n  }\n\n  getPlugin(container) {\n    return new Emitters(this._engine, container);\n  }\n\n  loadOptions(options, source) {\n    if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n      return;\n    }\n\n    if (source?.emitters) {\n      options.emitters = executeOnSingleOrMultiple(source.emitters, emitter => {\n        const tmp = new Emitter();\n        tmp.load(emitter);\n        return tmp;\n      });\n    }\n\n    const interactivityEmitters = source?.interactivity?.modes?.emitters;\n\n    if (interactivityEmitters) {\n      if (isArray(interactivityEmitters)) {\n        options.interactivity.modes.emitters = {\n          random: {\n            count: 1,\n            enable: true\n          },\n          value: interactivityEmitters.map(s => {\n            const tmp = new Emitter();\n            tmp.load(s);\n            return tmp;\n          })\n        };\n      } else {\n        const emitterMode = interactivityEmitters;\n\n        if (emitterMode.value !== undefined) {\n          if (isArray(emitterMode.value)) {\n            options.interactivity.modes.emitters = {\n              random: {\n                count: emitterMode.random.count ?? 1,\n                enable: emitterMode.random.enable ?? false\n              },\n              value: emitterMode.value.map(s => {\n                const tmp = new Emitter();\n                tmp.load(s);\n                return tmp;\n              })\n            };\n          } else {\n            const tmp = new Emitter();\n            tmp.load(emitterMode.value);\n            options.interactivity.modes.emitters = {\n              random: {\n                count: emitterMode.random.count ?? 1,\n                enable: emitterMode.random.enable ?? false\n              },\n              value: tmp\n            };\n          }\n        } else {\n          const emitterOptions = options.interactivity.modes.emitters = {\n            random: {\n              count: 1,\n              enable: false\n            },\n            value: new Emitter()\n          };\n          emitterOptions.value.load(interactivityEmitters);\n        }\n      }\n    }\n  }\n\n  needsPlugin(options) {\n    if (!options) {\n      return false;\n    }\n\n    const emitters = options.emitters;\n    return isArray(emitters) && !!emitters.length || emitters !== undefined || !!options.interactivity?.events?.onClick?.mode && isInArray(\"emitter\", options.interactivity.events.onClick.mode);\n  }\n\n}\n\nexport async function loadEmittersPlugin(engine) {\n  let refresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (!engine.emitterShapeManager) {\n    engine.emitterShapeManager = new ShapeManager(engine);\n  }\n\n  if (!engine.addEmitterShape) {\n    engine.addEmitterShape = (name, shape) => {\n      engine.emitterShapeManager?.addShape(name, shape);\n    };\n  }\n\n  const plugin = new EmittersPlugin(engine);\n  await engine.addPlugin(plugin, refresh);\n  engine.addEmitterShape(\"circle\", new CircleShape());\n  engine.addEmitterShape(\"square\", new SquareShape());\n}\nexport * from \"./EmitterContainer\";\nexport * from \"./EmittersEngine\";\nexport * from \"./Enums/EmitterClickMode\";\nexport * from \"./Enums/EmitterShapeType\";","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-plugin-emitters/esm/index.js"],"names":["executeOnSingleOrMultiple","isArray","isInArray","CircleShape","Emitter","Emitters","ShapeManager","SquareShape","EmittersPlugin","constructor","engine","_engine","id","getPlugin","container","loadOptions","options","source","needsPlugin","emitters","emitter","tmp","load","interactivityEmitters","interactivity","modes","random","count","enable","value","map","s","emitterMode","undefined","emitterOptions","length","events","onClick","mode","loadEmittersPlugin","refresh","emitterShapeManager","addEmitterShape","name","shape","addShape","plugin","addPlugin"],"mappings":"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","sourcesContent":["import { executeOnSingleOrMultiple, isArray, isInArray, } from \"tsparticles-engine\";\nimport { CircleShape } from \"./Shapes/Circle/CircleShape\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { Emitters } from \"./Emitters\";\nimport { ShapeManager } from \"./ShapeManager\";\nimport { SquareShape } from \"./Shapes/Square/SquareShape\";\nclass EmittersPlugin {\n    constructor(engine) {\n        this._engine = engine;\n        this.id = \"emitters\";\n    }\n    getPlugin(container) {\n        return new Emitters(this._engine, container);\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.emitters) {\n            options.emitters = executeOnSingleOrMultiple(source.emitters, (emitter) => {\n                const tmp = new Emitter();\n                tmp.load(emitter);\n                return tmp;\n            });\n        }\n        const interactivityEmitters = source?.interactivity?.modes?.emitters;\n        if (interactivityEmitters) {\n            if (isArray(interactivityEmitters)) {\n                options.interactivity.modes.emitters = {\n                    random: {\n                        count: 1,\n                        enable: true,\n                    },\n                    value: interactivityEmitters.map((s) => {\n                        const tmp = new Emitter();\n                        tmp.load(s);\n                        return tmp;\n                    }),\n                };\n            }\n            else {\n                const emitterMode = interactivityEmitters;\n                if (emitterMode.value !== undefined) {\n                    if (isArray(emitterMode.value)) {\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? 1,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: emitterMode.value.map((s) => {\n                                const tmp = new Emitter();\n                                tmp.load(s);\n                                return tmp;\n                            }),\n                        };\n                    }\n                    else {\n                        const tmp = new Emitter();\n                        tmp.load(emitterMode.value);\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? 1,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: tmp,\n                        };\n                    }\n                }\n                else {\n                    const emitterOptions = (options.interactivity.modes.emitters = {\n                        random: {\n                            count: 1,\n                            enable: false,\n                        },\n                        value: new Emitter(),\n                    });\n                    emitterOptions.value.load(interactivityEmitters);\n                }\n            }\n        }\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const emitters = options.emitters;\n        return ((isArray(emitters) && !!emitters.length) ||\n            emitters !== undefined ||\n            (!!options.interactivity?.events?.onClick?.mode &&\n                isInArray(\"emitter\", options.interactivity.events.onClick.mode)));\n    }\n}\nexport async function loadEmittersPlugin(engine, refresh = true) {\n    if (!engine.emitterShapeManager) {\n        engine.emitterShapeManager = new ShapeManager(engine);\n    }\n    if (!engine.addEmitterShape) {\n        engine.addEmitterShape = (name, shape) => {\n            engine.emitterShapeManager?.addShape(name, shape);\n        };\n    }\n    const plugin = new EmittersPlugin(engine);\n    await engine.addPlugin(plugin, refresh);\n    engine.addEmitterShape(\"circle\", new CircleShape());\n    engine.addEmitterShape(\"square\", new SquareShape());\n}\nexport * from \"./EmitterContainer\";\nexport * from \"./EmittersEngine\";\nexport * from \"./Enums/EmitterClickMode\";\nexport * from \"./Enums/EmitterShapeType\";\n"]},"metadata":{},"sourceType":"module"}