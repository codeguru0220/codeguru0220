{"ast":null,"code":"import { getRandom, getRangeValue } from \"tsparticles-engine\";\nimport { Wobble } from \"./Options/Classes/Wobble\";\nimport { updateWobble } from \"./Utils\";\nexport class WobbleUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n\n  init(particle) {\n    const wobbleOpt = particle.options.wobble;\n\n    if (wobbleOpt?.enable) {\n      particle.wobble = {\n        angle: getRandom() * Math.PI * 2,\n        angleSpeed: getRangeValue(wobbleOpt.speed.angle) / 360,\n        moveSpeed: getRangeValue(wobbleOpt.speed.move) / 10\n      };\n    } else {\n      particle.wobble = {\n        angle: 0,\n        angleSpeed: 0,\n        moveSpeed: 0\n      };\n    }\n\n    particle.retina.wobbleDistance = getRangeValue(wobbleOpt?.distance ?? 0) * this.container.retina.pixelRatio;\n  }\n\n  isEnabled(particle) {\n    return !particle.destroyed && !particle.spawning && !!particle.options.wobble?.enable;\n  }\n\n  loadOptions(options) {\n    if (!options.wobble) {\n      options.wobble = new Wobble();\n    }\n\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    for (const source of sources) {\n      options.wobble.load(source?.wobble);\n    }\n  }\n\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n\n    updateWobble(particle, delta);\n  }\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-updater-wobble/esm/WobbleUpdater.js"],"names":["getRandom","getRangeValue","Wobble","updateWobble","WobbleUpdater","constructor","container","init","particle","wobbleOpt","options","wobble","enable","angle","Math","PI","angleSpeed","speed","moveSpeed","move","retina","wobbleDistance","distance","pixelRatio","isEnabled","destroyed","spawning","loadOptions","sources","source","load","update","delta"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,aAApB,QAA0C,oBAA1C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACH;;AACDC,EAAAA,IAAI,CAACC,QAAD,EAAW;AACX,UAAMC,SAAS,GAAGD,QAAQ,CAACE,OAAT,CAAiBC,MAAnC;;AACA,QAAIF,SAAS,EAAEG,MAAf,EAAuB;AACnBJ,MAAAA,QAAQ,CAACG,MAAT,GAAkB;AACdE,QAAAA,KAAK,EAAEb,SAAS,KAAKc,IAAI,CAACC,EAAnB,GAAwB,CADjB;AAEdC,QAAAA,UAAU,EAAEf,aAAa,CAACQ,SAAS,CAACQ,KAAV,CAAgBJ,KAAjB,CAAb,GAAuC,GAFrC;AAGdK,QAAAA,SAAS,EAAEjB,aAAa,CAACQ,SAAS,CAACQ,KAAV,CAAgBE,IAAjB,CAAb,GAAsC;AAHnC,OAAlB;AAKH,KAND,MAOK;AACDX,MAAAA,QAAQ,CAACG,MAAT,GAAkB;AACdE,QAAAA,KAAK,EAAE,CADO;AAEdG,QAAAA,UAAU,EAAE,CAFE;AAGdE,QAAAA,SAAS,EAAE;AAHG,OAAlB;AAKH;;AACDV,IAAAA,QAAQ,CAACY,MAAT,CAAgBC,cAAhB,GAAiCpB,aAAa,CAACQ,SAAS,EAAEa,QAAX,IAAuB,CAAxB,CAAb,GAA0C,KAAKhB,SAAL,CAAec,MAAf,CAAsBG,UAAjG;AACH;;AACDC,EAAAA,SAAS,CAAChB,QAAD,EAAW;AAChB,WAAO,CAACA,QAAQ,CAACiB,SAAV,IAAuB,CAACjB,QAAQ,CAACkB,QAAjC,IAA6C,CAAC,CAAClB,QAAQ,CAACE,OAAT,CAAiBC,MAAjB,EAAyBC,MAA/E;AACH;;AACDe,EAAAA,WAAW,CAACjB,OAAD,EAAsB;AAC7B,QAAI,CAACA,OAAO,CAACC,MAAb,EAAqB;AACjBD,MAAAA,OAAO,CAACC,MAAR,GAAiB,IAAIT,MAAJ,EAAjB;AACH;;AAH4B,sCAAT0B,OAAS;AAATA,MAAAA,OAAS;AAAA;;AAI7B,SAAK,MAAMC,MAAX,IAAqBD,OAArB,EAA8B;AAC1BlB,MAAAA,OAAO,CAACC,MAAR,CAAemB,IAAf,CAAoBD,MAAM,EAAElB,MAA5B;AACH;AACJ;;AACDoB,EAAAA,MAAM,CAACvB,QAAD,EAAWwB,KAAX,EAAkB;AACpB,QAAI,CAAC,KAAKR,SAAL,CAAehB,QAAf,CAAL,EAA+B;AAC3B;AACH;;AACDL,IAAAA,YAAY,CAACK,QAAD,EAAWwB,KAAX,CAAZ;AACH;;AAtCsB","sourcesContent":["import { getRandom, getRangeValue, } from \"tsparticles-engine\";\nimport { Wobble } from \"./Options/Classes/Wobble\";\nimport { updateWobble } from \"./Utils\";\nexport class WobbleUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const wobbleOpt = particle.options.wobble;\n        if (wobbleOpt?.enable) {\n            particle.wobble = {\n                angle: getRandom() * Math.PI * 2,\n                angleSpeed: getRangeValue(wobbleOpt.speed.angle) / 360,\n                moveSpeed: getRangeValue(wobbleOpt.speed.move) / 10,\n            };\n        }\n        else {\n            particle.wobble = {\n                angle: 0,\n                angleSpeed: 0,\n                moveSpeed: 0,\n            };\n        }\n        particle.retina.wobbleDistance = getRangeValue(wobbleOpt?.distance ?? 0) * this.container.retina.pixelRatio;\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning && !!particle.options.wobble?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.wobble) {\n            options.wobble = new Wobble();\n        }\n        for (const source of sources) {\n            options.wobble.load(source?.wobble);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateWobble(particle, delta);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}