{"ast":null,"code":"import { InterlaceOffsets, InterlaceSteps } from \"./Constants\";\nimport { ByteStream } from \"./ByteStream\";\n\nfunction parseColorTable(byteStream, count) {\n  const colors = [];\n\n  for (let i = 0; i < count; i++) {\n    colors.push({\n      r: byteStream.data[byteStream.pos],\n      g: byteStream.data[byteStream.pos + 1],\n      b: byteStream.data[byteStream.pos + 2]\n    });\n    byteStream.pos += 3;\n  }\n\n  return colors;\n}\n\nasync function parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {\n  switch (byteStream.nextByte()) {\n    case 249:\n      {\n        const frame = gif.frames[getFrameIndex(false)];\n        byteStream.pos++;\n        const packedByte = byteStream.nextByte();\n        frame.GCreserved = (packedByte & 0xe0) >>> 5;\n        frame.disposalMethod = (packedByte & 0x1c) >>> 2;\n        frame.userInputDelayFlag = (packedByte & 2) === 2;\n        const transparencyFlag = (packedByte & 1) === 1;\n        frame.delayTime = byteStream.nextTwoBytes() * 0xa;\n        const transparencyIndex = byteStream.nextByte();\n\n        if (transparencyFlag) {\n          getTransparencyIndex(transparencyIndex);\n        }\n\n        byteStream.pos++;\n        break;\n      }\n\n    case 255:\n      {\n        byteStream.pos++;\n        const applicationExtension = {\n          identifier: byteStream.getString(8),\n          authenticationCode: byteStream.getString(3),\n          data: byteStream.readSubBlocksBin()\n        };\n        gif.applicationExtensions.push(applicationExtension);\n        break;\n      }\n\n    case 254:\n      {\n        gif.comments.push([getFrameIndex(false), byteStream.readSubBlocks()]);\n        break;\n      }\n\n    case 1:\n      {\n        if (gif.globalColorTable.length === 0) {\n          throw new EvalError(\"plain text extension without global color table\");\n        }\n\n        byteStream.pos++;\n        gif.frames[getFrameIndex(false)].plainTextData = {\n          left: byteStream.nextTwoBytes(),\n          top: byteStream.nextTwoBytes(),\n          width: byteStream.nextTwoBytes(),\n          height: byteStream.nextTwoBytes(),\n          charSize: {\n            width: byteStream.nextTwoBytes(),\n            height: byteStream.nextTwoBytes()\n          },\n          foregroundColor: byteStream.nextByte(),\n          backgroundColor: byteStream.nextByte(),\n          text: byteStream.readSubBlocks()\n        };\n        break;\n      }\n\n    default:\n      byteStream.skipSubBlocks();\n      break;\n  }\n}\n\nasync function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n  const frame = gif.frames[getFrameIndex(true)];\n  frame.left = byteStream.nextTwoBytes();\n  frame.top = byteStream.nextTwoBytes();\n  frame.width = byteStream.nextTwoBytes();\n  frame.height = byteStream.nextTwoBytes();\n  const packedByte = byteStream.nextByte(),\n        localColorTableFlag = (packedByte & 0x80) === 0x80,\n        interlacedFlag = (packedByte & 0x40) === 0x40;\n  frame.sortFlag = (packedByte & 0x20) === 0x20;\n  frame.reserved = (packedByte & 0x18) >>> 3;\n  const localColorCount = 1 << (packedByte & 7) + 1;\n\n  if (localColorTableFlag) {\n    frame.localColorTable = parseColorTable(byteStream, localColorCount);\n  }\n\n  const getColor = index => {\n    const {\n      r,\n      g,\n      b\n    } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\n    return {\n      r,\n      g,\n      b,\n      a: index === getTransparencyIndex(null) ? avgAlpha ? ~~((r + g + b) / 3) : 0 : 255\n    };\n  };\n\n  const image = (() => {\n    try {\n      return new ImageData(frame.width, frame.height, {\n        colorSpace: \"srgb\"\n      });\n    } catch (error) {\n      if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n        return null;\n      }\n\n      throw error;\n    }\n  })();\n\n  if (image == null) {\n    throw new EvalError(\"GIF frame size is to large\");\n  }\n\n  const minCodeSize = byteStream.nextByte(),\n        imageData = byteStream.readSubBlocksBin(),\n        clearCode = 1 << minCodeSize;\n\n  const readBits = (pos, len) => {\n    const bytePos = pos >>> 3,\n          bitPos = pos & 7;\n    return (imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16) & (1 << len) - 1 << bitPos) >>> bitPos;\n  };\n\n  if (interlacedFlag) {\n    for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pass = 0; pass < 4; pass++) {\n      if (InterlaceOffsets[pass] < frame.height) {\n        for (let pixelPos = 0, lineIndex = 0;;) {\n          const last = code;\n          code = readBits(pos, size);\n          pos += size + 1;\n\n          if (code === clearCode) {\n            size = minCodeSize + 1;\n            dic.length = clearCode + 2;\n\n            for (let i = 0; i < dic.length; i++) {\n              dic[i] = i < clearCode ? [i] : [];\n            }\n          } else {\n            if (code >= dic.length) {\n              dic.push(dic[last].concat(dic[last][0]));\n            } else if (last !== clearCode) {\n              dic.push(dic[last].concat(dic[code][0]));\n            }\n\n            for (let i = 0; i < dic[code].length; i++) {\n              const {\n                r,\n                g,\n                b,\n                a\n              } = getColor(dic[code][i]);\n              image.data.set([r, g, b, a], InterlaceOffsets[pass] * frame.width + InterlaceSteps[pass] * lineIndex + pixelPos % (frame.width * 4));\n              pixelPos += 4;\n            }\n\n            if (dic.length === 1 << size && size < 0xc) {\n              size++;\n            }\n          }\n\n          if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\n            lineIndex++;\n\n            if (InterlaceOffsets[pass] + InterlaceSteps[pass] * lineIndex >= frame.height) {\n              break;\n            }\n          }\n        }\n      }\n\n      progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, {\n        x: frame.left,\n        y: frame.top\n      }, {\n        width: gif.width,\n        height: gif.height\n      });\n    }\n\n    frame.image = image;\n    frame.bitmap = await createImageBitmap(image);\n  } else {\n    for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pixelPos = -4;;) {\n      const last = code;\n      code = readBits(pos, size);\n      pos += size;\n\n      if (code === clearCode) {\n        size = minCodeSize + 1;\n        dic.length = clearCode + 2;\n\n        for (let i = 0; i < dic.length; i++) {\n          dic[i] = i < clearCode ? [i] : [];\n        }\n      } else {\n        if (code === clearCode + 1) {\n          break;\n        }\n\n        if (code >= dic.length) {\n          dic.push(dic[last].concat(dic[last][0]));\n        } else if (last !== clearCode) {\n          dic.push(dic[last].concat(dic[code][0]));\n        }\n\n        for (let i = 0; i < dic[code].length; i++) {\n          const {\n            r,\n            g,\n            b,\n            a\n          } = getColor(dic[code][i]);\n          image.data.set([r, g, b, a], pixelPos += 4);\n        }\n\n        if (dic.length >= 1 << size && size < 0xc) {\n          size++;\n        }\n      }\n    }\n\n    frame.image = image;\n    frame.bitmap = await createImageBitmap(image);\n    progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, {\n      x: frame.left,\n      y: frame.top\n    }, {\n      width: gif.width,\n      height: gif.height\n    });\n  }\n}\n\nasync function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n  switch (byteStream.nextByte()) {\n    case 59:\n      return true;\n\n    case 44:\n      await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\n      break;\n\n    case 33:\n      await parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\n      break;\n\n    default:\n      throw new EvalError(\"undefined block found\");\n  }\n\n  return false;\n}\n\nexport function getGIFLoopAmount(gif) {\n  for (const extension of gif.applicationExtensions) {\n    if (extension.identifier + extension.authenticationCode !== \"NETSCAPE2.0\") {\n      continue;\n    }\n\n    return extension.data[1] + (extension.data[2] << 8);\n  }\n\n  return NaN;\n}\nexport async function decodeGIF(gifURL, progressCallback, avgAlpha) {\n  if (!avgAlpha) avgAlpha = false;\n  const res = await fetch(gifURL);\n\n  if (!res.ok && res.status === 404) {\n    throw new EvalError(\"file not found\");\n  }\n\n  const buffer = await res.arrayBuffer();\n  const gif = {\n    width: 0,\n    height: 0,\n    totalTime: 0,\n    colorRes: 0,\n    pixelAspectRatio: 0,\n    frames: [],\n    sortFlag: false,\n    globalColorTable: [],\n    backgroundImage: new ImageData(1, 1, {\n      colorSpace: \"srgb\"\n    }),\n    comments: [],\n    applicationExtensions: []\n  },\n        byteStream = new ByteStream(new Uint8ClampedArray(buffer));\n\n  if (byteStream.getString(6) !== \"GIF89a\") {\n    throw new Error(\"not a supported GIF file\");\n  }\n\n  gif.width = byteStream.nextTwoBytes();\n  gif.height = byteStream.nextTwoBytes();\n  const packedByte = byteStream.nextByte(),\n        globalColorTableFlag = (packedByte & 0x80) === 0x80;\n  gif.colorRes = (packedByte & 0x70) >>> 4;\n  gif.sortFlag = (packedByte & 8) === 8;\n  const globalColorCount = 1 << (packedByte & 7) + 1,\n        backgroundColorIndex = byteStream.nextByte();\n  gif.pixelAspectRatio = byteStream.nextByte();\n\n  if (gif.pixelAspectRatio !== 0) {\n    gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\n  }\n\n  if (globalColorTableFlag) {\n    gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\n  }\n\n  const backgroundImage = (() => {\n    try {\n      return new ImageData(gif.width, gif.height, {\n        colorSpace: \"srgb\"\n      });\n    } catch (error) {\n      if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n        return null;\n      }\n\n      throw error;\n    }\n  })();\n\n  if (backgroundImage == null) {\n    throw new Error(\"GIF frame size is to large\");\n  }\n\n  const {\n    r,\n    g,\n    b\n  } = gif.globalColorTable[backgroundColorIndex];\n  backgroundImage.data.set(globalColorTableFlag ? [r, g, b, 255] : [0, 0, 0, 0]);\n\n  for (let i = 4; i < backgroundImage.data.length; i *= 2) {\n    backgroundImage.data.copyWithin(i, 0, i);\n  }\n\n  gif.backgroundImage = backgroundImage;\n  let frameIndex = -1,\n      incrementFrameIndex = true,\n      transparencyIndex = -1;\n\n  const getframeIndex = increment => {\n    if (increment) {\n      incrementFrameIndex = true;\n    }\n\n    return frameIndex;\n  };\n\n  const getTransparencyIndex = newValue => {\n    if (newValue != null) {\n      transparencyIndex = newValue;\n    }\n\n    return transparencyIndex;\n  };\n\n  try {\n    do {\n      if (incrementFrameIndex) {\n        gif.frames.push({\n          left: 0,\n          top: 0,\n          width: 0,\n          height: 0,\n          disposalMethod: 0,\n          image: new ImageData(1, 1, {\n            colorSpace: \"srgb\"\n          }),\n          plainTextData: null,\n          userInputDelayFlag: false,\n          delayTime: 0,\n          sortFlag: false,\n          localColorTable: [],\n          reserved: 0,\n          GCreserved: 0\n        });\n        frameIndex++;\n        transparencyIndex = -1;\n        incrementFrameIndex = false;\n      }\n    } while (!(await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback)));\n\n    gif.frames.length--;\n\n    for (const frame of gif.frames) {\n      if (frame.userInputDelayFlag && frame.delayTime === 0) {\n        gif.totalTime = Infinity;\n        break;\n      }\n\n      gif.totalTime += frame.delayTime;\n    }\n\n    return gif;\n  } catch (error) {\n    if (error instanceof EvalError) {\n      throw new Error(`error while parsing frame ${frameIndex} \"${error.message}\"`);\n    }\n\n    throw error;\n  }\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-shape-image/esm/GifUtils/Utils.js"],"names":["InterlaceOffsets","InterlaceSteps","ByteStream","parseColorTable","byteStream","count","colors","i","push","r","data","pos","g","b","parseExtensionBlock","gif","getFrameIndex","getTransparencyIndex","nextByte","frame","frames","packedByte","GCreserved","disposalMethod","userInputDelayFlag","transparencyFlag","delayTime","nextTwoBytes","transparencyIndex","applicationExtension","identifier","getString","authenticationCode","readSubBlocksBin","applicationExtensions","comments","readSubBlocks","globalColorTable","length","EvalError","plainTextData","left","top","width","height","charSize","foregroundColor","backgroundColor","text","skipSubBlocks","parseImageBlock","avgAlpha","progressCallback","localColorTableFlag","interlacedFlag","sortFlag","reserved","localColorCount","localColorTable","getColor","index","a","image","ImageData","colorSpace","error","DOMException","name","minCodeSize","imageData","clearCode","readBits","len","bytePos","bitPos","code","size","dic","pass","pixelPos","lineIndex","last","concat","set","x","y","bitmap","createImageBitmap","parseBlock","getGIFLoopAmount","extension","NaN","decodeGIF","gifURL","res","fetch","ok","status","buffer","arrayBuffer","totalTime","colorRes","pixelAspectRatio","backgroundImage","Uint8ClampedArray","Error","globalColorTableFlag","globalColorCount","backgroundColorIndex","copyWithin","frameIndex","incrementFrameIndex","getframeIndex","increment","newValue","Infinity","message"],"mappings":"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","sourcesContent":["import { InterlaceOffsets, InterlaceSteps } from \"./Constants\";\nimport { ByteStream } from \"./ByteStream\";\nfunction parseColorTable(byteStream, count) {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n        colors.push({\n            r: byteStream.data[byteStream.pos],\n            g: byteStream.data[byteStream.pos + 1],\n            b: byteStream.data[byteStream.pos + 2],\n        });\n        byteStream.pos += 3;\n    }\n    return colors;\n}\nasync function parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {\n    switch (byteStream.nextByte()) {\n        case 249: {\n            const frame = gif.frames[getFrameIndex(false)];\n            byteStream.pos++;\n            const packedByte = byteStream.nextByte();\n            frame.GCreserved = (packedByte & 0xe0) >>> 5;\n            frame.disposalMethod = (packedByte & 0x1c) >>> 2;\n            frame.userInputDelayFlag = (packedByte & 2) === 2;\n            const transparencyFlag = (packedByte & 1) === 1;\n            frame.delayTime = byteStream.nextTwoBytes() * 0xa;\n            const transparencyIndex = byteStream.nextByte();\n            if (transparencyFlag) {\n                getTransparencyIndex(transparencyIndex);\n            }\n            byteStream.pos++;\n            break;\n        }\n        case 255: {\n            byteStream.pos++;\n            const applicationExtension = {\n                identifier: byteStream.getString(8),\n                authenticationCode: byteStream.getString(3),\n                data: byteStream.readSubBlocksBin(),\n            };\n            gif.applicationExtensions.push(applicationExtension);\n            break;\n        }\n        case 254: {\n            gif.comments.push([getFrameIndex(false), byteStream.readSubBlocks()]);\n            break;\n        }\n        case 1: {\n            if (gif.globalColorTable.length === 0) {\n                throw new EvalError(\"plain text extension without global color table\");\n            }\n            byteStream.pos++;\n            gif.frames[getFrameIndex(false)].plainTextData = {\n                left: byteStream.nextTwoBytes(),\n                top: byteStream.nextTwoBytes(),\n                width: byteStream.nextTwoBytes(),\n                height: byteStream.nextTwoBytes(),\n                charSize: {\n                    width: byteStream.nextTwoBytes(),\n                    height: byteStream.nextTwoBytes(),\n                },\n                foregroundColor: byteStream.nextByte(),\n                backgroundColor: byteStream.nextByte(),\n                text: byteStream.readSubBlocks(),\n            };\n            break;\n        }\n        default:\n            byteStream.skipSubBlocks();\n            break;\n    }\n}\nasync function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    const frame = gif.frames[getFrameIndex(true)];\n    frame.left = byteStream.nextTwoBytes();\n    frame.top = byteStream.nextTwoBytes();\n    frame.width = byteStream.nextTwoBytes();\n    frame.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 0x80) === 0x80, interlacedFlag = (packedByte & 0x40) === 0x40;\n    frame.sortFlag = (packedByte & 0x20) === 0x20;\n    frame.reserved = (packedByte & 0x18) >>> 3;\n    const localColorCount = 1 << ((packedByte & 7) + 1);\n    if (localColorTableFlag) {\n        frame.localColorTable = parseColorTable(byteStream, localColorCount);\n    }\n    const getColor = (index) => {\n        const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\n        return { r, g, b, a: index === getTransparencyIndex(null) ? (avgAlpha ? ~~((r + g + b) / 3) : 0) : 255 };\n    };\n    const image = (() => {\n        try {\n            return new ImageData(frame.width, frame.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (image == null) {\n        throw new EvalError(\"GIF frame size is to large\");\n    }\n    const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;\n    const readBits = (pos, len) => {\n        const bytePos = pos >>> 3, bitPos = pos & 7;\n        return (((imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16)) &\n            (((1 << len) - 1) << bitPos)) >>>\n            bitPos);\n    };\n    if (interlacedFlag) {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pass = 0; pass < 4; pass++) {\n            if (InterlaceOffsets[pass] < frame.height) {\n                for (let pixelPos = 0, lineIndex = 0;;) {\n                    const last = code;\n                    code = readBits(pos, size);\n                    pos += size + 1;\n                    if (code === clearCode) {\n                        size = minCodeSize + 1;\n                        dic.length = clearCode + 2;\n                        for (let i = 0; i < dic.length; i++) {\n                            dic[i] = i < clearCode ? [i] : [];\n                        }\n                    }\n                    else {\n                        if (code >= dic.length) {\n                            dic.push(dic[last].concat(dic[last][0]));\n                        }\n                        else if (last !== clearCode) {\n                            dic.push(dic[last].concat(dic[code][0]));\n                        }\n                        for (let i = 0; i < dic[code].length; i++) {\n                            const { r, g, b, a } = getColor(dic[code][i]);\n                            image.data.set([r, g, b, a], InterlaceOffsets[pass] * frame.width +\n                                InterlaceSteps[pass] * lineIndex +\n                                (pixelPos % (frame.width * 4)));\n                            pixelPos += 4;\n                        }\n                        if (dic.length === 1 << size && size < 0xc) {\n                            size++;\n                        }\n                    }\n                    if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\n                        lineIndex++;\n                        if (InterlaceOffsets[pass] + InterlaceSteps[pass] * lineIndex >= frame.height) {\n                            break;\n                        }\n                    }\n                }\n            }\n            progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n    }\n    else {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pixelPos = -4;;) {\n            const last = code;\n            code = readBits(pos, size);\n            pos += size;\n            if (code === clearCode) {\n                size = minCodeSize + 1;\n                dic.length = clearCode + 2;\n                for (let i = 0; i < dic.length; i++) {\n                    dic[i] = i < clearCode ? [i] : [];\n                }\n            }\n            else {\n                if (code === clearCode + 1) {\n                    break;\n                }\n                if (code >= dic.length) {\n                    dic.push(dic[last].concat(dic[last][0]));\n                }\n                else if (last !== clearCode) {\n                    dic.push(dic[last].concat(dic[code][0]));\n                }\n                for (let i = 0; i < dic[code].length; i++) {\n                    const { r, g, b, a } = getColor(dic[code][i]);\n                    image.data.set([r, g, b, a], (pixelPos += 4));\n                }\n                if (dic.length >= 1 << size && size < 0xc) {\n                    size++;\n                }\n            }\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n        progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n    }\n}\nasync function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    switch (byteStream.nextByte()) {\n        case 59:\n            return true;\n        case 44:\n            await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\n            break;\n        case 33:\n            await parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\n            break;\n        default:\n            throw new EvalError(\"undefined block found\");\n    }\n    return false;\n}\nexport function getGIFLoopAmount(gif) {\n    for (const extension of gif.applicationExtensions) {\n        if (extension.identifier + extension.authenticationCode !== \"NETSCAPE2.0\") {\n            continue;\n        }\n        return extension.data[1] + (extension.data[2] << 8);\n    }\n    return NaN;\n}\nexport async function decodeGIF(gifURL, progressCallback, avgAlpha) {\n    if (!avgAlpha)\n        avgAlpha = false;\n    const res = await fetch(gifURL);\n    if (!res.ok && res.status === 404) {\n        throw new EvalError(\"file not found\");\n    }\n    const buffer = await res.arrayBuffer();\n    const gif = {\n        width: 0,\n        height: 0,\n        totalTime: 0,\n        colorRes: 0,\n        pixelAspectRatio: 0,\n        frames: [],\n        sortFlag: false,\n        globalColorTable: [],\n        backgroundImage: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n        comments: [],\n        applicationExtensions: [],\n    }, byteStream = new ByteStream(new Uint8ClampedArray(buffer));\n    if (byteStream.getString(6) !== \"GIF89a\") {\n        throw new Error(\"not a supported GIF file\");\n    }\n    gif.width = byteStream.nextTwoBytes();\n    gif.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 0x80) === 0x80;\n    gif.colorRes = (packedByte & 0x70) >>> 4;\n    gif.sortFlag = (packedByte & 8) === 8;\n    const globalColorCount = 1 << ((packedByte & 7) + 1), backgroundColorIndex = byteStream.nextByte();\n    gif.pixelAspectRatio = byteStream.nextByte();\n    if (gif.pixelAspectRatio !== 0) {\n        gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\n    }\n    if (globalColorTableFlag) {\n        gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\n    }\n    const backgroundImage = (() => {\n        try {\n            return new ImageData(gif.width, gif.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (backgroundImage == null) {\n        throw new Error(\"GIF frame size is to large\");\n    }\n    const { r, g, b } = gif.globalColorTable[backgroundColorIndex];\n    backgroundImage.data.set(globalColorTableFlag ? [r, g, b, 255] : [0, 0, 0, 0]);\n    for (let i = 4; i < backgroundImage.data.length; i *= 2) {\n        backgroundImage.data.copyWithin(i, 0, i);\n    }\n    gif.backgroundImage = backgroundImage;\n    let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;\n    const getframeIndex = (increment) => {\n        if (increment) {\n            incrementFrameIndex = true;\n        }\n        return frameIndex;\n    };\n    const getTransparencyIndex = (newValue) => {\n        if (newValue != null) {\n            transparencyIndex = newValue;\n        }\n        return transparencyIndex;\n    };\n    try {\n        do {\n            if (incrementFrameIndex) {\n                gif.frames.push({\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                    disposalMethod: 0,\n                    image: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n                    plainTextData: null,\n                    userInputDelayFlag: false,\n                    delayTime: 0,\n                    sortFlag: false,\n                    localColorTable: [],\n                    reserved: 0,\n                    GCreserved: 0,\n                });\n                frameIndex++;\n                transparencyIndex = -1;\n                incrementFrameIndex = false;\n            }\n        } while (!(await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback)));\n        gif.frames.length--;\n        for (const frame of gif.frames) {\n            if (frame.userInputDelayFlag && frame.delayTime === 0) {\n                gif.totalTime = Infinity;\n                break;\n            }\n            gif.totalTime += frame.delayTime;\n        }\n        return gif;\n    }\n    catch (error) {\n        if (error instanceof EvalError) {\n            throw new Error(`error while parsing frame ${frameIndex} \"${error.message}\"`);\n        }\n        throw error;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}