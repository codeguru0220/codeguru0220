{"ast":null,"code":"import { ParticlesInteractorBase, getDistance } from \"tsparticles-engine\";\nimport { resolveCollision } from \"./ResolveCollision\";\nexport class Collider extends ParticlesInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  clear() {}\n\n  init() {}\n\n  async interact(p1, delta) {\n    if (p1.destroyed || p1.spawning) {\n      return;\n    }\n\n    const container = this.container,\n          pos1 = p1.getPosition(),\n          radius1 = p1.getRadius(),\n          query = container.particles.quadTree.queryCircle(pos1, radius1 * 2);\n\n    for (const p2 of query) {\n      if (p1 === p2 || !p2.options.collisions.enable || p1.options.collisions.mode !== p2.options.collisions.mode || p2.destroyed || p2.spawning) {\n        continue;\n      }\n\n      const pos2 = p2.getPosition(),\n            radius2 = p2.getRadius();\n\n      if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {\n        continue;\n      }\n\n      const dist = getDistance(pos1, pos2),\n            distP = radius1 + radius2;\n\n      if (dist > distP) {\n        continue;\n      }\n\n      resolveCollision(p1, p2, delta, container.retina.pixelRatio);\n    }\n  }\n\n  isEnabled(particle) {\n    return particle.options.collisions.enable;\n  }\n\n  reset() {}\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-interaction-particles-collisions/esm/Collider.js"],"names":["ParticlesInteractorBase","getDistance","resolveCollision","Collider","constructor","container","clear","init","interact","p1","delta","destroyed","spawning","pos1","getPosition","radius1","getRadius","query","particles","quadTree","queryCircle","p2","options","collisions","enable","mode","pos2","radius2","Math","abs","round","z","dist","distP","retina","pixelRatio","isEnabled","particle","reset"],"mappings":"AAAA,SAASA,uBAAT,EAAkCC,WAAlC,QAAqD,oBAArD;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,OAAO,MAAMC,QAAN,SAAuBH,uBAAvB,CAA+C;AAClDI,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,UAAMA,SAAN;AACH;;AACDC,EAAAA,KAAK,GAAG,CACP;;AACDC,EAAAA,IAAI,GAAG,CACN;;AACa,QAARC,QAAQ,CAACC,EAAD,EAAKC,KAAL,EAAY;AACtB,QAAID,EAAE,CAACE,SAAH,IAAgBF,EAAE,CAACG,QAAvB,EAAiC;AAC7B;AACH;;AACD,UAAMP,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCQ,IAAI,GAAGJ,EAAE,CAACK,WAAH,EAAzC;AAAA,UAA2DC,OAAO,GAAGN,EAAE,CAACO,SAAH,EAArE;AAAA,UAAqFC,KAAK,GAAGZ,SAAS,CAACa,SAAV,CAAoBC,QAApB,CAA6BC,WAA7B,CAAyCP,IAAzC,EAA+CE,OAAO,GAAG,CAAzD,CAA7F;;AACA,SAAK,MAAMM,EAAX,IAAiBJ,KAAjB,EAAwB;AACpB,UAAIR,EAAE,KAAKY,EAAP,IACA,CAACA,EAAE,CAACC,OAAH,CAAWC,UAAX,CAAsBC,MADvB,IAEAf,EAAE,CAACa,OAAH,CAAWC,UAAX,CAAsBE,IAAtB,KAA+BJ,EAAE,CAACC,OAAH,CAAWC,UAAX,CAAsBE,IAFrD,IAGAJ,EAAE,CAACV,SAHH,IAIAU,EAAE,CAACT,QAJP,EAIiB;AACb;AACH;;AACD,YAAMc,IAAI,GAAGL,EAAE,CAACP,WAAH,EAAb;AAAA,YAA+Ba,OAAO,GAAGN,EAAE,CAACL,SAAH,EAAzC;;AACA,UAAIY,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAWjB,IAAI,CAACkB,CAAhB,IAAqBH,IAAI,CAACE,KAAL,CAAWJ,IAAI,CAACK,CAAhB,CAA9B,IAAoDhB,OAAO,GAAGY,OAAlE,EAA2E;AACvE;AACH;;AACD,YAAMK,IAAI,GAAG/B,WAAW,CAACY,IAAD,EAAOa,IAAP,CAAxB;AAAA,YAAsCO,KAAK,GAAGlB,OAAO,GAAGY,OAAxD;;AACA,UAAIK,IAAI,GAAGC,KAAX,EAAkB;AACd;AACH;;AACD/B,MAAAA,gBAAgB,CAACO,EAAD,EAAKY,EAAL,EAASX,KAAT,EAAgBL,SAAS,CAAC6B,MAAV,CAAiBC,UAAjC,CAAhB;AACH;AACJ;;AACDC,EAAAA,SAAS,CAACC,QAAD,EAAW;AAChB,WAAOA,QAAQ,CAACf,OAAT,CAAiBC,UAAjB,CAA4BC,MAAnC;AACH;;AACDc,EAAAA,KAAK,GAAG,CACP;;AApCiD","sourcesContent":["import { ParticlesInteractorBase, getDistance } from \"tsparticles-engine\";\nimport { resolveCollision } from \"./ResolveCollision\";\nexport class Collider extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact(p1, delta) {\n        if (p1.destroyed || p1.spawning) {\n            return;\n        }\n        const container = this.container, pos1 = p1.getPosition(), radius1 = p1.getRadius(), query = container.particles.quadTree.queryCircle(pos1, radius1 * 2);\n        for (const p2 of query) {\n            if (p1 === p2 ||\n                !p2.options.collisions.enable ||\n                p1.options.collisions.mode !== p2.options.collisions.mode ||\n                p2.destroyed ||\n                p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), radius2 = p2.getRadius();\n            if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {\n                continue;\n            }\n            const dist = getDistance(pos1, pos2), distP = radius1 + radius2;\n            if (dist > distP) {\n                continue;\n            }\n            resolveCollision(p1, p2, delta, container.retina.pixelRatio);\n        }\n    }\n    isEnabled(particle) {\n        return particle.options.collisions.enable;\n    }\n    reset() {\n    }\n}\n"]},"metadata":{},"sourceType":"module"}