{"ast":null,"code":"import { getRandom, getRangeValue, initParticleNumericAnimationValue } from \"tsparticles-engine\";\nimport { updateOpacity } from \"./Utils\";\nexport class OpacityUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n\n  init(particle) {\n    const opacityOptions = particle.options.opacity;\n    particle.opacity = initParticleNumericAnimationValue(opacityOptions, 1);\n    const opacityAnimation = opacityOptions.animation;\n\n    if (opacityAnimation.enable) {\n      particle.opacity.velocity = getRangeValue(opacityAnimation.speed) / 100 * this.container.retina.reduceFactor;\n\n      if (!opacityAnimation.sync) {\n        particle.opacity.velocity *= getRandom();\n      }\n    }\n  }\n\n  isEnabled(particle) {\n    return !particle.destroyed && !particle.spawning && !!particle.opacity && particle.opacity.enable && ((particle.opacity.maxLoops ?? 0) <= 0 || (particle.opacity.maxLoops ?? 0) > 0 && (particle.opacity.loops ?? 0) < (particle.opacity.maxLoops ?? 0));\n  }\n\n  reset(particle) {\n    if (particle.opacity) {\n      particle.opacity.time = 0;\n      particle.opacity.loops = 0;\n    }\n  }\n\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n\n    updateOpacity(particle, delta);\n  }\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-updater-opacity/esm/OpacityUpdater.js"],"names":["getRandom","getRangeValue","initParticleNumericAnimationValue","updateOpacity","OpacityUpdater","constructor","container","init","particle","opacityOptions","options","opacity","opacityAnimation","animation","enable","velocity","speed","retina","reduceFactor","sync","isEnabled","destroyed","spawning","maxLoops","loops","reset","time","update","delta"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,aAApB,EAAmCC,iCAAnC,QAA6E,oBAA7E;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACH;;AACDC,EAAAA,IAAI,CAACC,QAAD,EAAW;AACX,UAAMC,cAAc,GAAGD,QAAQ,CAACE,OAAT,CAAiBC,OAAxC;AACAH,IAAAA,QAAQ,CAACG,OAAT,GAAmBT,iCAAiC,CAACO,cAAD,EAAiB,CAAjB,CAApD;AACA,UAAMG,gBAAgB,GAAGH,cAAc,CAACI,SAAxC;;AACA,QAAID,gBAAgB,CAACE,MAArB,EAA6B;AACzBN,MAAAA,QAAQ,CAACG,OAAT,CAAiBI,QAAjB,GACKd,aAAa,CAACW,gBAAgB,CAACI,KAAlB,CAAb,GAAwC,GAAzC,GAAgD,KAAKV,SAAL,CAAeW,MAAf,CAAsBC,YAD1E;;AAEA,UAAI,CAACN,gBAAgB,CAACO,IAAtB,EAA4B;AACxBX,QAAAA,QAAQ,CAACG,OAAT,CAAiBI,QAAjB,IAA6Bf,SAAS,EAAtC;AACH;AACJ;AACJ;;AACDoB,EAAAA,SAAS,CAACZ,QAAD,EAAW;AAChB,WAAQ,CAACA,QAAQ,CAACa,SAAV,IACJ,CAACb,QAAQ,CAACc,QADN,IAEJ,CAAC,CAACd,QAAQ,CAACG,OAFP,IAGJH,QAAQ,CAACG,OAAT,CAAiBG,MAHb,KAIH,CAACN,QAAQ,CAACG,OAAT,CAAiBY,QAAjB,IAA6B,CAA9B,KAAoC,CAApC,IACI,CAACf,QAAQ,CAACG,OAAT,CAAiBY,QAAjB,IAA6B,CAA9B,IAAmC,CAAnC,IACG,CAACf,QAAQ,CAACG,OAAT,CAAiBa,KAAjB,IAA0B,CAA3B,KAAiChB,QAAQ,CAACG,OAAT,CAAiBY,QAAjB,IAA6B,CAA9D,CANJ,CAAR;AAOH;;AACDE,EAAAA,KAAK,CAACjB,QAAD,EAAW;AACZ,QAAIA,QAAQ,CAACG,OAAb,EAAsB;AAClBH,MAAAA,QAAQ,CAACG,OAAT,CAAiBe,IAAjB,GAAwB,CAAxB;AACAlB,MAAAA,QAAQ,CAACG,OAAT,CAAiBa,KAAjB,GAAyB,CAAzB;AACH;AACJ;;AACDG,EAAAA,MAAM,CAACnB,QAAD,EAAWoB,KAAX,EAAkB;AACpB,QAAI,CAAC,KAAKR,SAAL,CAAeZ,QAAf,CAAL,EAA+B;AAC3B;AACH;;AACDL,IAAAA,aAAa,CAACK,QAAD,EAAWoB,KAAX,CAAb;AACH;;AApCuB","sourcesContent":["import { getRandom, getRangeValue, initParticleNumericAnimationValue, } from \"tsparticles-engine\";\nimport { updateOpacity } from \"./Utils\";\nexport class OpacityUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const opacityOptions = particle.options.opacity;\n        particle.opacity = initParticleNumericAnimationValue(opacityOptions, 1);\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            particle.opacity.velocity =\n                (getRangeValue(opacityAnimation.speed) / 100) * this.container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                particle.opacity.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!particle.opacity &&\n            particle.opacity.enable &&\n            ((particle.opacity.maxLoops ?? 0) <= 0 ||\n                ((particle.opacity.maxLoops ?? 0) > 0 &&\n                    (particle.opacity.loops ?? 0) < (particle.opacity.maxLoops ?? 0))));\n    }\n    reset(particle) {\n        if (particle.opacity) {\n            particle.opacity.time = 0;\n            particle.opacity.loops = 0;\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateOpacity(particle, delta);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}