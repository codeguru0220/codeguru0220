{"ast":null,"code":"import { getRangeValue, getValue, isNumber, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue } from \"tsparticles-engine\";\n\nfunction addSplitParticle(engine, container, parent, splitParticlesOptions) {\n  const destroyOptions = parent.options.destroy;\n\n  if (!destroyOptions) {\n    return;\n  }\n\n  const splitOptions = destroyOptions.split,\n        options = loadParticlesOptions(engine, container, parent.options),\n        factor = getValue(splitOptions.factor),\n        parentColor = parent.getFillColor();\n\n  if (splitOptions.color) {\n    options.color.load(splitOptions.color);\n  } else if (splitOptions.colorOffset && parentColor) {\n    options.color.load({\n      value: {\n        hsl: {\n          h: parentColor.h + getRangeValue(splitOptions.colorOffset.h ?? 0),\n          s: parentColor.s + getRangeValue(splitOptions.colorOffset.s ?? 0),\n          l: parentColor.l + getRangeValue(splitOptions.colorOffset.l ?? 0)\n        }\n      }\n    });\n  } else {\n    options.color.load({\n      value: {\n        hsl: parent.getFillColor()\n      }\n    });\n  }\n\n  options.move.load({\n    center: {\n      x: parent.position.x,\n      y: parent.position.y,\n      mode: \"precise\"\n    }\n  });\n\n  if (isNumber(options.size.value)) {\n    options.size.value /= factor;\n  } else {\n    options.size.value.min /= factor;\n    options.size.value.max /= factor;\n  }\n\n  options.load(splitParticlesOptions);\n  const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0,\n        position = {\n    x: parent.position.x + randomInRange(offset),\n    y: parent.position.y + randomInRange(offset)\n  };\n  return container.particles.addParticle(position, options, parent.group, particle => {\n    if (particle.size.value < 0.5) {\n      return false;\n    }\n\n    particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n    particle.splitCount = (parent.splitCount ?? 0) + 1;\n    particle.unbreakable = true;\n    setTimeout(() => {\n      particle.unbreakable = false;\n    }, 500);\n    return true;\n  });\n}\n\nexport function split(engine, container, particle) {\n  const destroyOptions = particle.options.destroy;\n\n  if (!destroyOptions) {\n    return;\n  }\n\n  const splitOptions = destroyOptions.split;\n\n  if (splitOptions.count >= 0 && (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n    return;\n  }\n\n  const rate = getValue(splitOptions.rate),\n        particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n\n  for (let i = 0; i < rate; i++) {\n    addSplitParticle(engine, container, particle, particlesSplitOptions);\n  }\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-updater-destroy/esm/Utils.js"],"names":["getRangeValue","getValue","isNumber","itemFromSingleOrMultiple","loadParticlesOptions","randomInRange","setRangeValue","addSplitParticle","engine","container","parent","splitParticlesOptions","destroyOptions","options","destroy","splitOptions","split","factor","parentColor","getFillColor","color","load","colorOffset","value","hsl","h","s","l","move","center","x","position","y","mode","size","min","max","offset","sizeOffset","particles","addParticle","group","particle","velocity","length","splitCount","unbreakable","setTimeout","count","undefined","rate","particlesSplitOptions","i"],"mappings":"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","sourcesContent":["import { getRangeValue, getValue, isNumber, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue, } from \"tsparticles-engine\";\nfunction addSplitParticle(engine, container, parent, splitParticlesOptions) {\n    const destroyOptions = parent.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split, options = loadParticlesOptions(engine, container, parent.options), factor = getValue(splitOptions.factor), parentColor = parent.getFillColor();\n    if (splitOptions.color) {\n        options.color.load(splitOptions.color);\n    }\n    else if (splitOptions.colorOffset && parentColor) {\n        options.color.load({\n            value: {\n                hsl: {\n                    h: parentColor.h + getRangeValue(splitOptions.colorOffset.h ?? 0),\n                    s: parentColor.s + getRangeValue(splitOptions.colorOffset.s ?? 0),\n                    l: parentColor.l + getRangeValue(splitOptions.colorOffset.l ?? 0),\n                },\n            },\n        });\n    }\n    else {\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n    }\n    options.move.load({\n        center: {\n            x: parent.position.x,\n            y: parent.position.y,\n            mode: \"precise\",\n        },\n    });\n    if (isNumber(options.size.value)) {\n        options.size.value /= factor;\n    }\n    else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n    }\n    options.load(splitParticlesOptions);\n    const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0, position = {\n        x: parent.position.x + randomInRange(offset),\n        y: parent.position.y + randomInRange(offset),\n    };\n    return container.particles.addParticle(position, options, parent.group, (particle) => {\n        if (particle.size.value < 0.5) {\n            return false;\n        }\n        particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = (parent.splitCount ?? 0) + 1;\n        particle.unbreakable = true;\n        setTimeout(() => {\n            particle.unbreakable = false;\n        }, 500);\n        return true;\n    });\n}\nexport function split(engine, container, particle) {\n    const destroyOptions = particle.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split;\n    if (splitOptions.count >= 0 && (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n        return;\n    }\n    const rate = getValue(splitOptions.rate), particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n    for (let i = 0; i < rate; i++) {\n        addSplitParticle(engine, container, particle, particlesSplitOptions);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}