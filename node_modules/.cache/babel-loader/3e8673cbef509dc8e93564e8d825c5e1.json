{"ast":null,"code":"import { colorMix, drawLine, getStyleFromHsl, getStyleFromRgb } from \"tsparticles-engine\";\nexport function gradient(context, p1, p2, opacity) {\n  const gradStop = Math.floor(p2.getRadius() / p1.getRadius()),\n        color1 = p1.getFillColor(),\n        color2 = p2.getFillColor();\n\n  if (!color1 || !color2) {\n    return;\n  }\n\n  const sourcePos = p1.getPosition(),\n        destPos = p2.getPosition(),\n        midRgb = colorMix(color1, color2, p1.getRadius(), p2.getRadius()),\n        grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n  grad.addColorStop(0, getStyleFromHsl(color1, opacity));\n  grad.addColorStop(gradStop > 1 ? 1 : gradStop, getStyleFromRgb(midRgb, opacity));\n  grad.addColorStop(1, getStyleFromHsl(color2, opacity));\n  return grad;\n}\nexport function drawConnectLine(context, width, lineStyle, begin, end) {\n  drawLine(context, begin, end);\n  context.lineWidth = width;\n  context.strokeStyle = lineStyle;\n  context.stroke();\n}\nexport function lineStyle(container, ctx, p1, p2) {\n  const options = container.actualOptions,\n        connectOptions = options.interactivity.modes.connect;\n\n  if (!connectOptions) {\n    return;\n  }\n\n  return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\nexport function drawConnection(container, p1, p2) {\n  container.canvas.draw(ctx => {\n    const ls = lineStyle(container, ctx, p1, p2);\n\n    if (!ls) {\n      return;\n    }\n\n    const pos1 = p1.getPosition(),\n          pos2 = p2.getPosition();\n    drawConnectLine(ctx, p1.retina.linksWidth ?? 0, ls, pos1, pos2);\n  });\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-interaction-external-connect/esm/Utils.js"],"names":["colorMix","drawLine","getStyleFromHsl","getStyleFromRgb","gradient","context","p1","p2","opacity","gradStop","Math","floor","getRadius","color1","getFillColor","color2","sourcePos","getPosition","destPos","midRgb","grad","createLinearGradient","x","y","addColorStop","drawConnectLine","width","lineStyle","begin","end","lineWidth","strokeStyle","stroke","container","ctx","options","actualOptions","connectOptions","interactivity","modes","connect","links","drawConnection","canvas","draw","ls","pos1","pos2","retina","linksWidth"],"mappings":"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","sourcesContent":["import { colorMix, drawLine, getStyleFromHsl, getStyleFromRgb, } from \"tsparticles-engine\";\nexport function gradient(context, p1, p2, opacity) {\n    const gradStop = Math.floor(p2.getRadius() / p1.getRadius()), color1 = p1.getFillColor(), color2 = p2.getFillColor();\n    if (!color1 || !color2) {\n        return;\n    }\n    const sourcePos = p1.getPosition(), destPos = p2.getPosition(), midRgb = colorMix(color1, color2, p1.getRadius(), p2.getRadius()), grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(0, getStyleFromHsl(color1, opacity));\n    grad.addColorStop(gradStop > 1 ? 1 : gradStop, getStyleFromRgb(midRgb, opacity));\n    grad.addColorStop(1, getStyleFromHsl(color2, opacity));\n    return grad;\n}\nexport function drawConnectLine(context, width, lineStyle, begin, end) {\n    drawLine(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n}\nexport function lineStyle(container, ctx, p1, p2) {\n    const options = container.actualOptions, connectOptions = options.interactivity.modes.connect;\n    if (!connectOptions) {\n        return;\n    }\n    return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\nexport function drawConnection(container, p1, p2) {\n    container.canvas.draw((ctx) => {\n        const ls = lineStyle(container, ctx, p1, p2);\n        if (!ls) {\n            return;\n        }\n        const pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        drawConnectLine(ctx, p1.retina.linksWidth ?? 0, ls, pos1, pos2);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}