{"ast":null,"code":"import { getRandom, getRangeValue } from \"tsparticles-engine\";\nimport { Tilt } from \"./Options/Classes/Tilt\";\nimport { updateTilt } from \"./Utils\";\nexport class TiltUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n\n  getTransformValues(particle) {\n    const tilt = particle.tilt?.enable && particle.tilt;\n    return {\n      b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\n      c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined\n    };\n  }\n\n  init(particle) {\n    const tiltOptions = particle.options.tilt;\n\n    if (!tiltOptions) {\n      return;\n    }\n\n    particle.tilt = {\n      enable: tiltOptions.enable,\n      value: getRangeValue(tiltOptions.value) * Math.PI / 180,\n      sinDirection: getRandom() >= 0.5 ? 1 : -1,\n      cosDirection: getRandom() >= 0.5 ? 1 : -1\n    };\n    let tiltDirection = tiltOptions.direction;\n\n    if (tiltDirection === \"random\") {\n      const index = Math.floor(getRandom() * 2);\n      tiltDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n    }\n\n    switch (tiltDirection) {\n      case \"counter-clockwise\":\n      case \"counterClockwise\":\n        particle.tilt.status = \"decreasing\";\n        break;\n\n      case \"clockwise\":\n        particle.tilt.status = \"increasing\";\n        break;\n    }\n\n    const tiltAnimation = particle.options.tilt?.animation;\n\n    if (tiltAnimation?.enable) {\n      particle.tilt.decay = 1 - getRangeValue(tiltAnimation.decay);\n      particle.tilt.velocity = getRangeValue(tiltAnimation.speed) / 360 * this.container.retina.reduceFactor;\n\n      if (!tiltAnimation.sync) {\n        particle.tilt.velocity *= getRandom();\n      }\n    }\n  }\n\n  isEnabled(particle) {\n    const tiltAnimation = particle.options.tilt?.animation;\n    return !particle.destroyed && !particle.spawning && !!tiltAnimation?.enable;\n  }\n\n  loadOptions(options) {\n    if (!options.tilt) {\n      options.tilt = new Tilt();\n    }\n\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    for (const source of sources) {\n      options.tilt.load(source?.tilt);\n    }\n  }\n\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n\n    updateTilt(particle, delta);\n  }\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-updater-tilt/esm/TiltUpdater.js"],"names":["getRandom","getRangeValue","Tilt","updateTilt","TiltUpdater","constructor","container","getTransformValues","particle","tilt","enable","b","Math","cos","value","cosDirection","undefined","c","sin","sinDirection","init","tiltOptions","options","PI","tiltDirection","direction","index","floor","status","tiltAnimation","animation","decay","velocity","speed","retina","reduceFactor","sync","isEnabled","destroyed","spawning","loadOptions","sources","source","load","update","delta"],"mappings":"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","sourcesContent":["import { getRandom, getRangeValue, } from \"tsparticles-engine\";\nimport { Tilt } from \"./Options/Classes/Tilt\";\nimport { updateTilt } from \"./Utils\";\nexport class TiltUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    getTransformValues(particle) {\n        const tilt = particle.tilt?.enable && particle.tilt;\n        return {\n            b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\n            c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined,\n        };\n    }\n    init(particle) {\n        const tiltOptions = particle.options.tilt;\n        if (!tiltOptions) {\n            return;\n        }\n        particle.tilt = {\n            enable: tiltOptions.enable,\n            value: (getRangeValue(tiltOptions.value) * Math.PI) / 180,\n            sinDirection: getRandom() >= 0.5 ? 1 : -1,\n            cosDirection: getRandom() >= 0.5 ? 1 : -1,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === \"random\") {\n            const index = Math.floor(getRandom() * 2);\n            tiltDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (tiltDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.tilt.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.tilt.status = \"increasing\";\n                break;\n        }\n        const tiltAnimation = particle.options.tilt?.animation;\n        if (tiltAnimation?.enable) {\n            particle.tilt.decay = 1 - getRangeValue(tiltAnimation.decay);\n            particle.tilt.velocity = (getRangeValue(tiltAnimation.speed) / 360) * this.container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                particle.tilt.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        const tiltAnimation = particle.options.tilt?.animation;\n        return !particle.destroyed && !particle.spawning && !!tiltAnimation?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.tilt) {\n            options.tilt = new Tilt();\n        }\n        for (const source of sources) {\n            options.tilt.load(source?.tilt);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateTilt(particle, delta);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}