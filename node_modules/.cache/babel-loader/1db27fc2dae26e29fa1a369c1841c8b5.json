{"ast":null,"code":"import { clamp } from \"tsparticles-engine\";\n\nfunction checkDestroy(particle, value, minValue, maxValue) {\n  switch (particle.options.size.animation.destroy) {\n    case \"max\":\n      if (value >= maxValue) {\n        particle.destroy();\n      }\n\n      break;\n\n    case \"min\":\n      if (value <= minValue) {\n        particle.destroy();\n      }\n\n      break;\n  }\n}\n\nexport function updateSize(particle, delta) {\n  const data = particle.size;\n\n  if (particle.destroyed || !data || !data.enable || (data.maxLoops ?? 0) > 0 && (data.loops ?? 0) > (data.maxLoops ?? 0)) {\n    return;\n  }\n\n  const sizeVelocity = (data.velocity ?? 0) * delta.factor,\n        minValue = data.min,\n        maxValue = data.max,\n        decay = data.decay ?? 1;\n\n  if (!data.time) {\n    data.time = 0;\n  }\n\n  if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n    data.time += delta.value;\n  }\n\n  if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n    return;\n  }\n\n  switch (data.status) {\n    case \"increasing\":\n      if (data.value >= maxValue) {\n        data.status = \"decreasing\";\n\n        if (!data.loops) {\n          data.loops = 0;\n        }\n\n        data.loops++;\n      } else {\n        data.value += sizeVelocity;\n      }\n\n      break;\n\n    case \"decreasing\":\n      if (data.value <= minValue) {\n        data.status = \"increasing\";\n\n        if (!data.loops) {\n          data.loops = 0;\n        }\n\n        data.loops++;\n      } else {\n        data.value -= sizeVelocity;\n      }\n\n  }\n\n  if (data.velocity && decay !== 1) {\n    data.velocity *= decay;\n  }\n\n  checkDestroy(particle, data.value, minValue, maxValue);\n\n  if (!particle.destroyed) {\n    data.value = clamp(data.value, minValue, maxValue);\n  }\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-updater-size/esm/Utils.js"],"names":["clamp","checkDestroy","particle","value","minValue","maxValue","options","size","animation","destroy","updateSize","delta","data","destroyed","enable","maxLoops","loops","sizeVelocity","velocity","factor","min","max","decay","time","delayTime","status"],"mappings":"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","sourcesContent":["import { clamp } from \"tsparticles-engine\";\nfunction checkDestroy(particle, value, minValue, maxValue) {\n    switch (particle.options.size.animation.destroy) {\n        case \"max\":\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case \"min\":\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nexport function updateSize(particle, delta) {\n    const data = particle.size;\n    if (particle.destroyed ||\n        !data ||\n        !data.enable ||\n        ((data.maxLoops ?? 0) > 0 && (data.loops ?? 0) > (data.maxLoops ?? 0))) {\n        return;\n    }\n    const sizeVelocity = (data.velocity ?? 0) * delta.factor, minValue = data.min, maxValue = data.max, decay = data.decay ?? 1;\n    if (!data.time) {\n        data.time = 0;\n    }\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n        data.time += delta.value;\n    }\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n        return;\n    }\n    switch (data.status) {\n        case \"increasing\":\n            if (data.value >= maxValue) {\n                data.status = \"decreasing\";\n                if (!data.loops) {\n                    data.loops = 0;\n                }\n                data.loops++;\n            }\n            else {\n                data.value += sizeVelocity;\n            }\n            break;\n        case \"decreasing\":\n            if (data.value <= minValue) {\n                data.status = \"increasing\";\n                if (!data.loops) {\n                    data.loops = 0;\n                }\n                data.loops++;\n            }\n            else {\n                data.value -= sizeVelocity;\n            }\n    }\n    if (data.velocity && decay !== 1) {\n        data.velocity *= decay;\n    }\n    checkDestroy(particle, data.value, minValue, maxValue);\n    if (!particle.destroyed) {\n        data.value = clamp(data.value, minValue, maxValue);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}