{"ast":null,"code":"import { Circle, ExternalInteractorBase, Rectangle, Vector, clamp, divMode, divModeExecute, getDistances, getEasing, isDivModeEnabled, isInArray, mouseMoveEvent } from \"tsparticles-engine\";\nimport { Repulse } from \"./Options/Classes/Repulse\";\nexport class Repulser extends ExternalInteractorBase {\n  constructor(engine, container) {\n    super(container);\n\n    this._clickRepulse = () => {\n      const container = this.container,\n            repulseOptions = container.actualOptions.interactivity.modes.repulse;\n\n      if (!repulseOptions) {\n        return;\n      }\n\n      const repulse = container.repulse || {\n        particles: []\n      };\n\n      if (!repulse.finish) {\n        if (!repulse.count) {\n          repulse.count = 0;\n        }\n\n        repulse.count++;\n\n        if (repulse.count === container.particles.count) {\n          repulse.finish = true;\n        }\n      }\n\n      if (repulse.clicking) {\n        const repulseDistance = container.retina.repulseModeDistance;\n\n        if (!repulseDistance || repulseDistance < 0) {\n          return;\n        }\n\n        const repulseRadius = Math.pow(repulseDistance / 6, 3),\n              mouseClickPos = container.interactivity.mouse.clickPosition;\n\n        if (mouseClickPos === undefined) {\n          return;\n        }\n\n        const range = new Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius),\n              query = container.particles.quadTree.query(range, p => this.isEnabled(p));\n\n        for (const particle of query) {\n          const {\n            dx,\n            dy,\n            distance\n          } = getDistances(mouseClickPos, particle.position),\n                d = distance ** 2,\n                velocity = repulseOptions.speed,\n                force = -repulseRadius * velocity / d;\n\n          if (d <= repulseRadius) {\n            repulse.particles.push(particle);\n            const vect = Vector.create(dx, dy);\n            vect.length = force;\n            particle.velocity.setTo(vect);\n          }\n        }\n      } else if (repulse.clicking === false) {\n        for (const particle of repulse.particles) {\n          particle.velocity.setTo(particle.initialVelocity);\n        }\n\n        repulse.particles = [];\n      }\n    };\n\n    this._hoverRepulse = () => {\n      const container = this.container,\n            mousePos = container.interactivity.mouse.position,\n            repulseRadius = container.retina.repulseModeDistance;\n\n      if (!repulseRadius || repulseRadius < 0 || !mousePos) {\n        return;\n      }\n\n      this._processRepulse(mousePos, repulseRadius, new Circle(mousePos.x, mousePos.y, repulseRadius));\n    };\n\n    this._processRepulse = (position, repulseRadius, area, divRepulse) => {\n      const container = this.container,\n            query = container.particles.quadTree.query(area, p => this.isEnabled(p)),\n            repulseOptions = container.actualOptions.interactivity.modes.repulse;\n\n      if (!repulseOptions) {\n        return;\n      }\n\n      for (const particle of query) {\n        const {\n          dx,\n          dy,\n          distance\n        } = getDistances(particle.position, position),\n              velocity = (divRepulse?.speed ?? repulseOptions.speed) * repulseOptions.factor,\n              repulseFactor = clamp(getEasing(repulseOptions.easing)(1 - distance / repulseRadius) * velocity, 0, repulseOptions.maxSpeed),\n              normVec = Vector.create(distance === 0 ? velocity : dx / distance * repulseFactor, distance === 0 ? velocity : dy / distance * repulseFactor);\n        particle.position.addTo(normVec);\n      }\n    };\n\n    this._singleSelectorRepulse = (selector, div) => {\n      const container = this.container,\n            repulse = container.actualOptions.interactivity.modes.repulse;\n\n      if (!repulse) {\n        return;\n      }\n\n      const query = document.querySelectorAll(selector);\n\n      if (!query.length) {\n        return;\n      }\n\n      query.forEach(item => {\n        const elem = item,\n              pxRatio = container.retina.pixelRatio,\n              pos = {\n          x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n          y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n        },\n              repulseRadius = elem.offsetWidth / 2 * pxRatio,\n              area = div.type === \"circle\" ? new Circle(pos.x, pos.y, repulseRadius) : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n              divs = repulse.divs,\n              divRepulse = divMode(divs, elem);\n\n        this._processRepulse(pos, repulseRadius, area, divRepulse);\n      });\n    };\n\n    this._engine = engine;\n\n    if (!container.repulse) {\n      container.repulse = {\n        particles: []\n      };\n    }\n\n    this.handleClickMode = mode => {\n      const options = this.container.actualOptions,\n            repulseOpts = options.interactivity.modes.repulse;\n\n      if (!repulseOpts || mode !== \"repulse\") {\n        return;\n      }\n\n      if (!container.repulse) {\n        container.repulse = {\n          particles: []\n        };\n      }\n\n      const repulse = container.repulse;\n      repulse.clicking = true;\n      repulse.count = 0;\n\n      for (const particle of container.repulse.particles) {\n        if (!this.isEnabled(particle)) {\n          continue;\n        }\n\n        particle.velocity.setTo(particle.initialVelocity);\n      }\n\n      repulse.particles = [];\n      repulse.finish = false;\n      setTimeout(() => {\n        if (container.destroyed) {\n          return;\n        }\n\n        repulse.clicking = false;\n      }, repulseOpts.duration * 1000);\n    };\n  }\n\n  clear() {}\n\n  init() {\n    const container = this.container,\n          repulse = container.actualOptions.interactivity.modes.repulse;\n\n    if (!repulse) {\n      return;\n    }\n\n    container.retina.repulseModeDistance = repulse.distance * container.retina.pixelRatio;\n  }\n\n  async interact() {\n    const container = this.container,\n          options = container.actualOptions,\n          mouseMoveStatus = container.interactivity.status === mouseMoveEvent,\n          events = options.interactivity.events,\n          hover = events.onHover,\n          hoverEnabled = hover.enable,\n          hoverMode = hover.mode,\n          click = events.onClick,\n          clickEnabled = click.enable,\n          clickMode = click.mode,\n          divs = events.onDiv;\n\n    if (mouseMoveStatus && hoverEnabled && isInArray(\"repulse\", hoverMode)) {\n      this._hoverRepulse();\n    } else if (clickEnabled && isInArray(\"repulse\", clickMode)) {\n      this._clickRepulse();\n    } else {\n      divModeExecute(\"repulse\", divs, (selector, div) => this._singleSelectorRepulse(selector, div));\n    }\n  }\n\n  isEnabled(particle) {\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = (particle?.interactivity ?? options.interactivity).events,\n          divs = events.onDiv,\n          hover = events.onHover,\n          click = events.onClick,\n          divRepulse = isDivModeEnabled(\"repulse\", divs);\n\n    if (!(divRepulse || hover.enable && mouse.position || click.enable && mouse.clickPosition)) {\n      return false;\n    }\n\n    const hoverMode = hover.mode,\n          clickMode = click.mode;\n    return isInArray(\"repulse\", hoverMode) || isInArray(\"repulse\", clickMode) || divRepulse;\n  }\n\n  loadModeOptions(options) {\n    if (!options.repulse) {\n      options.repulse = new Repulse();\n    }\n\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    for (const source of sources) {\n      options.repulse.load(source?.repulse);\n    }\n  }\n\n  reset() {}\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-interaction-external-repulse/esm/Repulser.js"],"names":["Circle","ExternalInteractorBase","Rectangle","Vector","clamp","divMode","divModeExecute","getDistances","getEasing","isDivModeEnabled","isInArray","mouseMoveEvent","Repulse","Repulser","constructor","engine","container","_clickRepulse","repulseOptions","actualOptions","interactivity","modes","repulse","particles","finish","count","clicking","repulseDistance","retina","repulseModeDistance","repulseRadius","Math","pow","mouseClickPos","mouse","clickPosition","undefined","range","x","y","query","quadTree","p","isEnabled","particle","dx","dy","distance","position","d","velocity","speed","force","push","vect","create","length","setTo","initialVelocity","_hoverRepulse","mousePos","_processRepulse","area","divRepulse","factor","repulseFactor","easing","maxSpeed","normVec","addTo","_singleSelectorRepulse","selector","div","document","querySelectorAll","forEach","item","elem","pxRatio","pixelRatio","pos","offsetLeft","offsetWidth","offsetTop","offsetHeight","type","divs","_engine","handleClickMode","mode","options","repulseOpts","setTimeout","destroyed","duration","clear","init","interact","mouseMoveStatus","status","events","hover","onHover","hoverEnabled","enable","hoverMode","click","onClick","clickEnabled","clickMode","onDiv","loadModeOptions","sources","source","load","reset"],"mappings":"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","sourcesContent":["import { Circle, ExternalInteractorBase, Rectangle, Vector, clamp, divMode, divModeExecute, getDistances, getEasing, isDivModeEnabled, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nimport { Repulse } from \"./Options/Classes/Repulse\";\nexport class Repulser extends ExternalInteractorBase {\n    constructor(engine, container) {\n        super(container);\n        this._clickRepulse = () => {\n            const container = this.container, repulseOptions = container.actualOptions.interactivity.modes.repulse;\n            if (!repulseOptions) {\n                return;\n            }\n            const repulse = container.repulse || { particles: [] };\n            if (!repulse.finish) {\n                if (!repulse.count) {\n                    repulse.count = 0;\n                }\n                repulse.count++;\n                if (repulse.count === container.particles.count) {\n                    repulse.finish = true;\n                }\n            }\n            if (repulse.clicking) {\n                const repulseDistance = container.retina.repulseModeDistance;\n                if (!repulseDistance || repulseDistance < 0) {\n                    return;\n                }\n                const repulseRadius = Math.pow(repulseDistance / 6, 3), mouseClickPos = container.interactivity.mouse.clickPosition;\n                if (mouseClickPos === undefined) {\n                    return;\n                }\n                const range = new Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius), query = container.particles.quadTree.query(range, (p) => this.isEnabled(p));\n                for (const particle of query) {\n                    const { dx, dy, distance } = getDistances(mouseClickPos, particle.position), d = distance ** 2, velocity = repulseOptions.speed, force = (-repulseRadius * velocity) / d;\n                    if (d <= repulseRadius) {\n                        repulse.particles.push(particle);\n                        const vect = Vector.create(dx, dy);\n                        vect.length = force;\n                        particle.velocity.setTo(vect);\n                    }\n                }\n            }\n            else if (repulse.clicking === false) {\n                for (const particle of repulse.particles) {\n                    particle.velocity.setTo(particle.initialVelocity);\n                }\n                repulse.particles = [];\n            }\n        };\n        this._hoverRepulse = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, repulseRadius = container.retina.repulseModeDistance;\n            if (!repulseRadius || repulseRadius < 0 || !mousePos) {\n                return;\n            }\n            this._processRepulse(mousePos, repulseRadius, new Circle(mousePos.x, mousePos.y, repulseRadius));\n        };\n        this._processRepulse = (position, repulseRadius, area, divRepulse) => {\n            const container = this.container, query = container.particles.quadTree.query(area, (p) => this.isEnabled(p)), repulseOptions = container.actualOptions.interactivity.modes.repulse;\n            if (!repulseOptions) {\n                return;\n            }\n            for (const particle of query) {\n                const { dx, dy, distance } = getDistances(particle.position, position), velocity = (divRepulse?.speed ?? repulseOptions.speed) * repulseOptions.factor, repulseFactor = clamp(getEasing(repulseOptions.easing)(1 - distance / repulseRadius) * velocity, 0, repulseOptions.maxSpeed), normVec = Vector.create(distance === 0 ? velocity : (dx / distance) * repulseFactor, distance === 0 ? velocity : (dy / distance) * repulseFactor);\n                particle.position.addTo(normVec);\n            }\n        };\n        this._singleSelectorRepulse = (selector, div) => {\n            const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\n            if (!repulse) {\n                return;\n            }\n            const query = document.querySelectorAll(selector);\n            if (!query.length) {\n                return;\n            }\n            query.forEach((item) => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n                }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                    ? new Circle(pos.x, pos.y, repulseRadius)\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), divs = repulse.divs, divRepulse = divMode(divs, elem);\n                this._processRepulse(pos, repulseRadius, area, divRepulse);\n            });\n        };\n        this._engine = engine;\n        if (!container.repulse) {\n            container.repulse = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, repulseOpts = options.interactivity.modes.repulse;\n            if (!repulseOpts || mode !== \"repulse\") {\n                return;\n            }\n            if (!container.repulse) {\n                container.repulse = { particles: [] };\n            }\n            const repulse = container.repulse;\n            repulse.clicking = true;\n            repulse.count = 0;\n            for (const particle of container.repulse.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            repulse.particles = [];\n            repulse.finish = false;\n            setTimeout(() => {\n                if (container.destroyed) {\n                    return;\n                }\n                repulse.clicking = false;\n            }, repulseOpts.duration * 1000);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\n        if (!repulse) {\n            return;\n        }\n        container.retina.repulseModeDistance = repulse.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hover = events.onHover, hoverEnabled = hover.enable, hoverMode = hover.mode, click = events.onClick, clickEnabled = click.enable, clickMode = click.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"repulse\", hoverMode)) {\n            this._hoverRepulse();\n        }\n        else if (clickEnabled && isInArray(\"repulse\", clickMode)) {\n            this._clickRepulse();\n        }\n        else {\n            divModeExecute(\"repulse\", divs, (selector, div) => this._singleSelectorRepulse(selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv, hover = events.onHover, click = events.onClick, divRepulse = isDivModeEnabled(\"repulse\", divs);\n        if (!(divRepulse || (hover.enable && mouse.position) || (click.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = hover.mode, clickMode = click.mode;\n        return isInArray(\"repulse\", hoverMode) || isInArray(\"repulse\", clickMode) || divRepulse;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.repulse) {\n            options.repulse = new Repulse();\n        }\n        for (const source of sources) {\n            options.repulse.load(source?.repulse);\n        }\n    }\n    reset() {\n    }\n}\n"]},"metadata":{},"sourceType":"module"}