{"ast":null,"code":"import { animateCSSModeScroll } from '../../shared/utils.js';\nexport default function slideTo() {\n  let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let speed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.params.speed;\n  let runCallbacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let internal = arguments.length > 3 ? arguments[3] : undefined;\n  let initial = arguments.length > 4 ? arguments[4] : undefined;\n\n  if (typeof index !== 'number' && typeof index !== 'string') {\n    throw new Error(`The 'index' argument cannot have type other than 'number' or 'string'. [${typeof index}] given.`);\n  }\n\n  if (typeof index === 'string') {\n    /**\n     * The `index` argument converted from `string` to `number`.\n     * @type {number}\n     */\n    const indexAsNumber = parseInt(index, 10);\n    /**\n     * Determines whether the `index` argument is a valid `number`\n     * after being converted from the `string` type.\n     * @type {boolean}\n     */\n\n    const isValidNumber = isFinite(indexAsNumber);\n\n    if (!isValidNumber) {\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index}] given.`);\n    } // Knowing that the converted `index` is a valid number,\n    // we can update the original argument's value.\n\n\n    index = indexAsNumber;\n  }\n\n  const swiper = this;\n  let slideIndex = index;\n  if (slideIndex < 0) slideIndex = 0;\n  const {\n    params,\n    snapGrid,\n    slidesGrid,\n    previousIndex,\n    activeIndex,\n    rtlTranslate: rtl,\n    wrapperEl,\n    enabled\n  } = swiper;\n\n  if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) {\n    return false;\n  }\n\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\n  let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n  const translate = -snapGrid[snapIndex]; // Normalize slideIndex\n\n  if (params.normalizeSlideIndex) {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      const normalizedTranslate = -Math.floor(translate * 100);\n      const normalizedGrid = Math.floor(slidesGrid[i] * 100);\n      const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);\n\n      if (typeof slidesGrid[i + 1] !== 'undefined') {\n        if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {\n          slideIndex = i;\n        } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {\n          slideIndex = i + 1;\n        }\n      } else if (normalizedTranslate >= normalizedGrid) {\n        slideIndex = i;\n      }\n    }\n  } // Directions locks\n\n\n  if (swiper.initialized && slideIndex !== activeIndex) {\n    if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {\n      return false;\n    }\n\n    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {\n      if ((activeIndex || 0) !== slideIndex) return false;\n    }\n  }\n\n  if (slideIndex !== (previousIndex || 0) && runCallbacks) {\n    swiper.emit('beforeSlideChangeStart');\n  } // Update progress\n\n\n  swiper.updateProgress(translate);\n  let direction;\n  if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset'; // Update Index\n\n  if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {\n    swiper.updateActiveIndex(slideIndex); // Update Height\n\n    if (params.autoHeight) {\n      swiper.updateAutoHeight();\n    }\n\n    swiper.updateSlidesClasses();\n\n    if (params.effect !== 'slide') {\n      swiper.setTranslate(translate);\n    }\n\n    if (direction !== 'reset') {\n      swiper.transitionStart(runCallbacks, direction);\n      swiper.transitionEnd(runCallbacks, direction);\n    }\n\n    return false;\n  }\n\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n    const t = rtl ? translate : -translate;\n\n    if (speed === 0) {\n      const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n\n      if (isVirtual) {\n        swiper.wrapperEl.style.scrollSnapType = 'none';\n        swiper._immediateVirtual = true;\n      }\n\n      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;\n\n      if (isVirtual) {\n        requestAnimationFrame(() => {\n          swiper.wrapperEl.style.scrollSnapType = '';\n          swiper._swiperImmediateVirtual = false;\n        });\n      }\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: t,\n          side: isH ? 'left' : 'top'\n        });\n        return true;\n      }\n\n      wrapperEl.scrollTo({\n        [isH ? 'left' : 'top']: t,\n        behavior: 'smooth'\n      });\n    }\n\n    return true;\n  }\n\n  swiper.setTransition(speed);\n  swiper.setTranslate(translate);\n  swiper.updateActiveIndex(slideIndex);\n  swiper.updateSlidesClasses();\n  swiper.emit('beforeTransitionStart', speed, internal);\n  swiper.transitionStart(runCallbacks, direction);\n\n  if (speed === 0) {\n    swiper.transitionEnd(runCallbacks, direction);\n  } else if (!swiper.animating) {\n    swiper.animating = true;\n\n    if (!swiper.onSlideToWrapperTransitionEnd) {\n      swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {\n        if (!swiper || swiper.destroyed) return;\n        if (e.target !== this) return;\n        swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n        swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n        swiper.onSlideToWrapperTransitionEnd = null;\n        delete swiper.onSlideToWrapperTransitionEnd;\n        swiper.transitionEnd(runCallbacks, direction);\n      };\n    }\n\n    swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n    swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n  }\n\n  return true;\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/swiper/core/slide/slideTo.js"],"names":["animateCSSModeScroll","slideTo","index","speed","params","runCallbacks","internal","initial","Error","indexAsNumber","parseInt","isValidNumber","isFinite","swiper","slideIndex","snapGrid","slidesGrid","previousIndex","activeIndex","rtlTranslate","rtl","wrapperEl","enabled","animating","preventInteractionOnTransition","skip","Math","min","slidesPerGroupSkip","snapIndex","floor","slidesPerGroup","length","translate","normalizeSlideIndex","i","normalizedTranslate","normalizedGrid","normalizedGridNext","initialized","allowSlideNext","minTranslate","allowSlidePrev","maxTranslate","emit","updateProgress","direction","updateActiveIndex","autoHeight","updateAutoHeight","updateSlidesClasses","effect","setTranslate","transitionStart","transitionEnd","cssMode","isH","isHorizontal","t","isVirtual","virtual","style","scrollSnapType","_immediateVirtual","requestAnimationFrame","_swiperImmediateVirtual","support","smoothScroll","targetPosition","side","scrollTo","behavior","setTransition","onSlideToWrapperTransitionEnd","e","destroyed","target","$wrapperEl","removeEventListener","addEventListener"],"mappings":"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","sourcesContent":["import { animateCSSModeScroll } from '../../shared/utils.js';\nexport default function slideTo(index = 0, speed = this.params.speed, runCallbacks = true, internal, initial) {\n  if (typeof index !== 'number' && typeof index !== 'string') {\n    throw new Error(`The 'index' argument cannot have type other than 'number' or 'string'. [${typeof index}] given.`);\n  }\n\n  if (typeof index === 'string') {\n    /**\n     * The `index` argument converted from `string` to `number`.\n     * @type {number}\n     */\n    const indexAsNumber = parseInt(index, 10);\n    /**\n     * Determines whether the `index` argument is a valid `number`\n     * after being converted from the `string` type.\n     * @type {boolean}\n     */\n\n    const isValidNumber = isFinite(indexAsNumber);\n\n    if (!isValidNumber) {\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index}] given.`);\n    } // Knowing that the converted `index` is a valid number,\n    // we can update the original argument's value.\n\n\n    index = indexAsNumber;\n  }\n\n  const swiper = this;\n  let slideIndex = index;\n  if (slideIndex < 0) slideIndex = 0;\n  const {\n    params,\n    snapGrid,\n    slidesGrid,\n    previousIndex,\n    activeIndex,\n    rtlTranslate: rtl,\n    wrapperEl,\n    enabled\n  } = swiper;\n\n  if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) {\n    return false;\n  }\n\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\n  let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n  const translate = -snapGrid[snapIndex]; // Normalize slideIndex\n\n  if (params.normalizeSlideIndex) {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      const normalizedTranslate = -Math.floor(translate * 100);\n      const normalizedGrid = Math.floor(slidesGrid[i] * 100);\n      const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);\n\n      if (typeof slidesGrid[i + 1] !== 'undefined') {\n        if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {\n          slideIndex = i;\n        } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {\n          slideIndex = i + 1;\n        }\n      } else if (normalizedTranslate >= normalizedGrid) {\n        slideIndex = i;\n      }\n    }\n  } // Directions locks\n\n\n  if (swiper.initialized && slideIndex !== activeIndex) {\n    if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {\n      return false;\n    }\n\n    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {\n      if ((activeIndex || 0) !== slideIndex) return false;\n    }\n  }\n\n  if (slideIndex !== (previousIndex || 0) && runCallbacks) {\n    swiper.emit('beforeSlideChangeStart');\n  } // Update progress\n\n\n  swiper.updateProgress(translate);\n  let direction;\n  if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset'; // Update Index\n\n  if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {\n    swiper.updateActiveIndex(slideIndex); // Update Height\n\n    if (params.autoHeight) {\n      swiper.updateAutoHeight();\n    }\n\n    swiper.updateSlidesClasses();\n\n    if (params.effect !== 'slide') {\n      swiper.setTranslate(translate);\n    }\n\n    if (direction !== 'reset') {\n      swiper.transitionStart(runCallbacks, direction);\n      swiper.transitionEnd(runCallbacks, direction);\n    }\n\n    return false;\n  }\n\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n    const t = rtl ? translate : -translate;\n\n    if (speed === 0) {\n      const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n\n      if (isVirtual) {\n        swiper.wrapperEl.style.scrollSnapType = 'none';\n        swiper._immediateVirtual = true;\n      }\n\n      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;\n\n      if (isVirtual) {\n        requestAnimationFrame(() => {\n          swiper.wrapperEl.style.scrollSnapType = '';\n          swiper._swiperImmediateVirtual = false;\n        });\n      }\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: t,\n          side: isH ? 'left' : 'top'\n        });\n        return true;\n      }\n\n      wrapperEl.scrollTo({\n        [isH ? 'left' : 'top']: t,\n        behavior: 'smooth'\n      });\n    }\n\n    return true;\n  }\n\n  swiper.setTransition(speed);\n  swiper.setTranslate(translate);\n  swiper.updateActiveIndex(slideIndex);\n  swiper.updateSlidesClasses();\n  swiper.emit('beforeTransitionStart', speed, internal);\n  swiper.transitionStart(runCallbacks, direction);\n\n  if (speed === 0) {\n    swiper.transitionEnd(runCallbacks, direction);\n  } else if (!swiper.animating) {\n    swiper.animating = true;\n\n    if (!swiper.onSlideToWrapperTransitionEnd) {\n      swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {\n        if (!swiper || swiper.destroyed) return;\n        if (e.target !== this) return;\n        swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n        swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n        swiper.onSlideToWrapperTransitionEnd = null;\n        delete swiper.onSlideToWrapperTransitionEnd;\n        swiper.transitionEnd(runCallbacks, direction);\n      };\n    }\n\n    swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n    swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n  }\n\n  return true;\n}"]},"metadata":{},"sourceType":"module"}