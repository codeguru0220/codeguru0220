{"ast":null,"code":"import { getRangeValue } from \"../Utils/NumberUtils\";\nimport { isSsr } from \"../Utils/Utils\";\nexport class Retina {\n  constructor(container) {\n    this.container = container;\n    this.pixelRatio = 1;\n    this.reduceFactor = 1;\n  }\n\n  init() {\n    const container = this.container,\n          options = container.actualOptions;\n    this.pixelRatio = !options.detectRetina || isSsr() ? 1 : window.devicePixelRatio;\n    this.reduceFactor = 1;\n    const ratio = this.pixelRatio;\n\n    if (container.canvas.element) {\n      const element = container.canvas.element;\n      container.canvas.size.width = element.offsetWidth * ratio;\n      container.canvas.size.height = element.offsetHeight * ratio;\n    }\n\n    const particles = options.particles,\n          moveOptions = particles.move;\n    this.attractDistance = getRangeValue(moveOptions.attract.distance) * ratio;\n    this.maxSpeed = getRangeValue(moveOptions.gravity.maxSpeed) * ratio;\n    this.sizeAnimationSpeed = getRangeValue(particles.size.animation.speed) * ratio;\n  }\n\n  initParticle(particle) {\n    const options = particle.options,\n          ratio = this.pixelRatio,\n          moveOptions = options.move,\n          moveDistance = moveOptions.distance,\n          props = particle.retina;\n    props.attractDistance = getRangeValue(moveOptions.attract.distance) * ratio;\n    props.moveDrift = getRangeValue(moveOptions.drift) * ratio;\n    props.moveSpeed = getRangeValue(moveOptions.speed) * ratio;\n    props.sizeAnimationSpeed = getRangeValue(options.size.animation.speed) * ratio;\n    const maxDistance = props.maxDistance;\n    maxDistance.horizontal = moveDistance.horizontal !== undefined ? moveDistance.horizontal * ratio : undefined;\n    maxDistance.vertical = moveDistance.vertical !== undefined ? moveDistance.vertical * ratio : undefined;\n    props.maxSpeed = getRangeValue(moveOptions.gravity.maxSpeed) * ratio;\n  }\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-engine/esm/Core/Retina.js"],"names":["getRangeValue","isSsr","Retina","constructor","container","pixelRatio","reduceFactor","init","options","actualOptions","detectRetina","window","devicePixelRatio","ratio","canvas","element","size","width","offsetWidth","height","offsetHeight","particles","moveOptions","move","attractDistance","attract","distance","maxSpeed","gravity","sizeAnimationSpeed","animation","speed","initParticle","particle","moveDistance","props","retina","moveDrift","drift","moveSpeed","maxDistance","horizontal","undefined","vertical"],"mappings":"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","sourcesContent":["import { getRangeValue } from \"../Utils/NumberUtils\";\nimport { isSsr } from \"../Utils/Utils\";\nexport class Retina {\n    constructor(container) {\n        this.container = container;\n        this.pixelRatio = 1;\n        this.reduceFactor = 1;\n    }\n    init() {\n        const container = this.container, options = container.actualOptions;\n        this.pixelRatio = !options.detectRetina || isSsr() ? 1 : window.devicePixelRatio;\n        this.reduceFactor = 1;\n        const ratio = this.pixelRatio;\n        if (container.canvas.element) {\n            const element = container.canvas.element;\n            container.canvas.size.width = element.offsetWidth * ratio;\n            container.canvas.size.height = element.offsetHeight * ratio;\n        }\n        const particles = options.particles, moveOptions = particles.move;\n        this.attractDistance = getRangeValue(moveOptions.attract.distance) * ratio;\n        this.maxSpeed = getRangeValue(moveOptions.gravity.maxSpeed) * ratio;\n        this.sizeAnimationSpeed = getRangeValue(particles.size.animation.speed) * ratio;\n    }\n    initParticle(particle) {\n        const options = particle.options, ratio = this.pixelRatio, moveOptions = options.move, moveDistance = moveOptions.distance, props = particle.retina;\n        props.attractDistance = getRangeValue(moveOptions.attract.distance) * ratio;\n        props.moveDrift = getRangeValue(moveOptions.drift) * ratio;\n        props.moveSpeed = getRangeValue(moveOptions.speed) * ratio;\n        props.sizeAnimationSpeed = getRangeValue(options.size.animation.speed) * ratio;\n        const maxDistance = props.maxDistance;\n        maxDistance.horizontal = moveDistance.horizontal !== undefined ? moveDistance.horizontal * ratio : undefined;\n        maxDistance.vertical = moveDistance.vertical !== undefined ? moveDistance.vertical * ratio : undefined;\n        props.maxSpeed = getRangeValue(moveOptions.gravity.maxSpeed) * ratio;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}