{"ast":null,"code":"import { tsParticles } from \"tsparticles-engine\";\nexport class Particles {\n  static init(options) {\n    const particles = new Particles(),\n          selector = options.selector;\n\n    if (!selector) {\n      throw new Error(\"No selector provided\");\n    }\n\n    const el = document.querySelector(selector);\n\n    if (!el) {\n      throw new Error(\"No element found for selector\");\n    }\n\n    tsParticles.set(selector.replace(\".\", \"\").replace(\"!\", \"\"), el, {\n      fullScreen: {\n        enable: false\n      },\n      particles: {\n        color: {\n          value: options.color ?? \"!000000\"\n        },\n        links: {\n          color: \"random\",\n          distance: options.minDistance ?? 120,\n          enable: options.connectParticles ?? false\n        },\n        move: {\n          enable: true,\n          speed: options.speed ?? 0.5\n        },\n        number: {\n          value: options.maxParticles ?? 100\n        },\n        size: {\n          value: {\n            min: 1,\n            max: options.sizeVariations ?? 3\n          }\n        }\n      },\n      responsive: options.responsive?.map(responsive => ({\n        maxWidth: responsive.breakpoint,\n        options: {\n          particles: {\n            color: {\n              value: responsive.options?.color\n            },\n            links: {\n              distance: responsive.options?.minDistance,\n              enable: responsive.options?.connectParticles\n            },\n            number: {\n              value: options.maxParticles\n            },\n            move: {\n              enable: true,\n              speed: responsive.options?.speed\n            },\n            size: {\n              value: responsive.options?.sizeVariations\n            }\n          }\n        }\n      }))\n    }).then(container => {\n      particles._container = container;\n    });\n    return particles;\n  }\n\n  destroy() {\n    const container = this._container;\n    container && container.destroy();\n  }\n\n  pauseAnimation() {\n    const container = this._container;\n    container && container.pause();\n  }\n\n  resumeAnimation() {\n    const container = this._container;\n    container && container.play();\n  }\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-particles.js/esm/marcbruederlin/Particles.js"],"names":["tsParticles","Particles","init","options","particles","selector","Error","el","document","querySelector","set","replace","fullScreen","enable","color","value","links","distance","minDistance","connectParticles","move","speed","number","maxParticles","size","min","max","sizeVariations","responsive","map","maxWidth","breakpoint","then","container","_container","destroy","pauseAnimation","pause","resumeAnimation","play"],"mappings":"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","sourcesContent":["import { tsParticles } from \"tsparticles-engine\";\nexport class Particles {\n    static init(options) {\n        const particles = new Particles(), selector = options.selector;\n        if (!selector) {\n            throw new Error(\"No selector provided\");\n        }\n        const el = document.querySelector(selector);\n        if (!el) {\n            throw new Error(\"No element found for selector\");\n        }\n        tsParticles\n            .set(selector.replace(\".\", \"\").replace(\"!\", \"\"), el, {\n            fullScreen: {\n                enable: false,\n            },\n            particles: {\n                color: {\n                    value: options.color ?? \"!000000\",\n                },\n                links: {\n                    color: \"random\",\n                    distance: options.minDistance ?? 120,\n                    enable: options.connectParticles ?? false,\n                },\n                move: {\n                    enable: true,\n                    speed: options.speed ?? 0.5,\n                },\n                number: {\n                    value: options.maxParticles ?? 100,\n                },\n                size: {\n                    value: { min: 1, max: options.sizeVariations ?? 3 },\n                },\n            },\n            responsive: options.responsive?.map((responsive) => ({\n                maxWidth: responsive.breakpoint,\n                options: {\n                    particles: {\n                        color: {\n                            value: responsive.options?.color,\n                        },\n                        links: {\n                            distance: responsive.options?.minDistance,\n                            enable: responsive.options?.connectParticles,\n                        },\n                        number: {\n                            value: options.maxParticles,\n                        },\n                        move: {\n                            enable: true,\n                            speed: responsive.options?.speed,\n                        },\n                        size: {\n                            value: responsive.options?.sizeVariations,\n                        },\n                    },\n                },\n            })),\n        })\n            .then((container) => {\n            particles._container = container;\n        });\n        return particles;\n    }\n    destroy() {\n        const container = this._container;\n        container && container.destroy();\n    }\n    pauseAnimation() {\n        const container = this._container;\n        container && container.pause();\n    }\n    resumeAnimation() {\n        const container = this._container;\n        container && container.play();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}