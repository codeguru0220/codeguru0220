{"ast":null,"code":"import { getRandom, getRangeValue, getStyleFromHsl, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Twinkle } from \"./Options/Classes/Twinkle\";\nexport class TwinkleUpdater {\n  getColorStyles(particle, context, radius, opacity) {\n    const pOptions = particle.options,\n          twinkleOptions = pOptions.twinkle;\n\n    if (!twinkleOptions) {\n      return {};\n    }\n\n    const twinkle = twinkleOptions.particles,\n          twinkling = twinkle.enable && getRandom() < twinkle.frequency,\n          zIndexOptions = particle.options.zIndex,\n          zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate,\n          twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity,\n          twinkleRgb = rangeColorToHsl(twinkle.color),\n          twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined,\n          res = {},\n          needsTwinkle = twinkling && twinkleStyle;\n    res.fill = needsTwinkle ? twinkleStyle : undefined;\n    res.stroke = needsTwinkle ? twinkleStyle : undefined;\n    return res;\n  }\n\n  init() {}\n\n  isEnabled(particle) {\n    const pOptions = particle.options,\n          twinkleOptions = pOptions.twinkle;\n\n    if (!twinkleOptions) {\n      return false;\n    }\n\n    return twinkleOptions.particles.enable;\n  }\n\n  loadOptions(options) {\n    if (!options.twinkle) {\n      options.twinkle = new Twinkle();\n    }\n\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    for (const source of sources) {\n      options.twinkle.load(source?.twinkle);\n    }\n  }\n\n  update() {}\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-updater-twinkle/esm/TwinkleUpdater.js"],"names":["getRandom","getRangeValue","getStyleFromHsl","rangeColorToHsl","Twinkle","TwinkleUpdater","getColorStyles","particle","context","radius","opacity","pOptions","options","twinkleOptions","twinkle","particles","twinkling","enable","frequency","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","twinklingOpacity","twinkleRgb","color","twinkleStyle","undefined","res","needsTwinkle","fill","stroke","init","isEnabled","loadOptions","sources","source","load","update"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,aAApB,EAAmCC,eAAnC,EAAoDC,eAApD,QAA4E,oBAA5E;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,cAAc,CAACC,QAAD,EAAWC,OAAX,EAAoBC,MAApB,EAA4BC,OAA5B,EAAqC;AAC/C,UAAMC,QAAQ,GAAGJ,QAAQ,CAACK,OAA1B;AAAA,UAAmCC,cAAc,GAAGF,QAAQ,CAACG,OAA7D;;AACA,QAAI,CAACD,cAAL,EAAqB;AACjB,aAAO,EAAP;AACH;;AACD,UAAMC,OAAO,GAAGD,cAAc,CAACE,SAA/B;AAAA,UAA0CC,SAAS,GAAGF,OAAO,CAACG,MAAR,IAAkBjB,SAAS,KAAKc,OAAO,CAACI,SAA9F;AAAA,UAAyGC,aAAa,GAAGZ,QAAQ,CAACK,OAAT,CAAiBQ,MAA1I;AAAA,UAAkJC,cAAc,GAAG,CAAC,IAAId,QAAQ,CAACe,YAAd,KAA+BH,aAAa,CAACI,WAAhN;AAAA,UAA6NC,gBAAgB,GAAGR,SAAS,GAAGf,aAAa,CAACa,OAAO,CAACJ,OAAT,CAAb,GAAiCW,cAApC,GAAqDX,OAA9S;AAAA,UAAuTe,UAAU,GAAGtB,eAAe,CAACW,OAAO,CAACY,KAAT,CAAnV;AAAA,UAAoWC,YAAY,GAAGF,UAAU,GAAGvB,eAAe,CAACuB,UAAD,EAAaD,gBAAb,CAAlB,GAAmDI,SAAhb;AAAA,UAA2bC,GAAG,GAAG,EAAjc;AAAA,UAAqcC,YAAY,GAAGd,SAAS,IAAIW,YAAje;AACAE,IAAAA,GAAG,CAACE,IAAJ,GAAWD,YAAY,GAAGH,YAAH,GAAkBC,SAAzC;AACAC,IAAAA,GAAG,CAACG,MAAJ,GAAaF,YAAY,GAAGH,YAAH,GAAkBC,SAA3C;AACA,WAAOC,GAAP;AACH;;AACDI,EAAAA,IAAI,GAAG,CACN;;AACDC,EAAAA,SAAS,CAAC3B,QAAD,EAAW;AAChB,UAAMI,QAAQ,GAAGJ,QAAQ,CAACK,OAA1B;AAAA,UAAmCC,cAAc,GAAGF,QAAQ,CAACG,OAA7D;;AACA,QAAI,CAACD,cAAL,EAAqB;AACjB,aAAO,KAAP;AACH;;AACD,WAAOA,cAAc,CAACE,SAAf,CAAyBE,MAAhC;AACH;;AACDkB,EAAAA,WAAW,CAACvB,OAAD,EAAsB;AAC7B,QAAI,CAACA,OAAO,CAACE,OAAb,EAAsB;AAClBF,MAAAA,OAAO,CAACE,OAAR,GAAkB,IAAIV,OAAJ,EAAlB;AACH;;AAH4B,sCAATgC,OAAS;AAATA,MAAAA,OAAS;AAAA;;AAI7B,SAAK,MAAMC,MAAX,IAAqBD,OAArB,EAA8B;AAC1BxB,MAAAA,OAAO,CAACE,OAAR,CAAgBwB,IAAhB,CAAqBD,MAAM,EAAEvB,OAA7B;AACH;AACJ;;AACDyB,EAAAA,MAAM,GAAG,CACR;;AA7BuB","sourcesContent":["import { getRandom, getRangeValue, getStyleFromHsl, rangeColorToHsl, } from \"tsparticles-engine\";\nimport { Twinkle } from \"./Options/Classes/Twinkle\";\nexport class TwinkleUpdater {\n    getColorStyles(particle, context, radius, opacity) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return {};\n        }\n        const twinkle = twinkleOptions.particles, twinkling = twinkle.enable && getRandom() < twinkle.frequency, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, twinklingOpacity = twinkling ? getRangeValue(twinkle.opacity) * zOpacityFactor : opacity, twinkleRgb = rangeColorToHsl(twinkle.color), twinkleStyle = twinkleRgb ? getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined, res = {}, needsTwinkle = twinkling && twinkleStyle;\n        res.fill = needsTwinkle ? twinkleStyle : undefined;\n        res.stroke = needsTwinkle ? twinkleStyle : undefined;\n        return res;\n    }\n    init() {\n    }\n    isEnabled(particle) {\n        const pOptions = particle.options, twinkleOptions = pOptions.twinkle;\n        if (!twinkleOptions) {\n            return false;\n        }\n        return twinkleOptions.particles.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.twinkle) {\n            options.twinkle = new Twinkle();\n        }\n        for (const source of sources) {\n            options.twinkle.load(source?.twinkle);\n        }\n    }\n    update() {\n    }\n}\n"]},"metadata":{},"sourceType":"module"}