{"ast":null,"code":"import { errorPrefix, getLogger, getStyleFromHsl } from \"tsparticles-engine\";\nimport { decodeGIF, getGIFLoopAmount } from \"./GifUtils/Utils\";\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\n\nfunction replaceColorSvg(imageShape, color, opacity) {\n  const {\n    svgData\n  } = imageShape;\n\n  if (!svgData) {\n    return \"\";\n  }\n\n  const colorStyle = getStyleFromHsl(color, opacity);\n\n  if (svgData.includes(\"fill\")) {\n    return svgData.replace(currentColorRegex, () => colorStyle);\n  }\n\n  const preFillIndex = svgData.indexOf(\">\");\n  return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\n\nexport async function loadImage(image) {\n  return new Promise(resolve => {\n    image.loading = true;\n    const img = new Image();\n    image.element = img;\n    img.addEventListener(\"load\", () => {\n      image.loading = false;\n      resolve();\n    });\n    img.addEventListener(\"error\", () => {\n      image.element = undefined;\n      image.error = true;\n      image.loading = false;\n      getLogger().error(`${errorPrefix} loading image: ${image.source}`);\n      resolve();\n    });\n    img.src = image.source;\n  });\n}\nexport async function loadGifImage(image) {\n  if (image.type !== \"gif\") {\n    await loadImage(image);\n    return;\n  }\n\n  image.loading = true;\n\n  try {\n    image.gifData = await decodeGIF(image.source);\n    image.gifLoopCount = getGIFLoopAmount(image.gifData) ?? 0;\n\n    if (image.gifLoopCount === 0) {\n      image.gifLoopCount = Infinity;\n    }\n  } catch {\n    image.error = true;\n  }\n\n  image.loading = false;\n}\nexport async function downloadSvgImage(image) {\n  if (image.type !== \"svg\") {\n    await loadImage(image);\n    return;\n  }\n\n  image.loading = true;\n  const response = await fetch(image.source);\n\n  if (!response.ok) {\n    getLogger().error(`${errorPrefix} Image not found`);\n    image.error = true;\n  } else {\n    image.svgData = await response.text();\n  }\n\n  image.loading = false;\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n  const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? 1),\n        imageRes = {\n    color,\n    gif: imageData.gif,\n    data: { ...image,\n      svgData: svgColoredData\n    },\n    loaded: false,\n    ratio: imageData.width / imageData.height,\n    replaceColor: imageData.replaceColor ?? imageData.replace_color,\n    source: imageData.src\n  };\n  return new Promise(resolve => {\n    const svg = new Blob([svgColoredData], {\n      type: \"image/svg+xml\"\n    }),\n          domUrl = URL || window.URL || window.webkitURL || window,\n          url = domUrl.createObjectURL(svg),\n          img = new Image();\n    img.addEventListener(\"load\", () => {\n      imageRes.loaded = true;\n      imageRes.element = img;\n      resolve(imageRes);\n      domUrl.revokeObjectURL(url);\n    });\n    img.addEventListener(\"error\", async () => {\n      domUrl.revokeObjectURL(url);\n      const img2 = { ...image,\n        error: false,\n        loading: true\n      };\n      await loadImage(img2);\n      imageRes.loaded = true;\n      imageRes.element = img2.element;\n      resolve(imageRes);\n    });\n    img.src = url;\n  });\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-shape-image/esm/Utils.js"],"names":["errorPrefix","getLogger","getStyleFromHsl","decodeGIF","getGIFLoopAmount","currentColorRegex","replaceColorSvg","imageShape","color","opacity","svgData","colorStyle","includes","replace","preFillIndex","indexOf","substring","loadImage","image","Promise","resolve","loading","img","Image","element","addEventListener","undefined","error","source","src","loadGifImage","type","gifData","gifLoopCount","Infinity","downloadSvgImage","response","fetch","ok","text","replaceImageColor","imageData","particle","svgColoredData","value","imageRes","gif","data","loaded","ratio","width","height","replaceColor","replace_color","svg","Blob","domUrl","URL","window","webkitURL","url","createObjectURL","revokeObjectURL","img2"],"mappings":"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","sourcesContent":["import { errorPrefix, getLogger, getStyleFromHsl } from \"tsparticles-engine\";\nimport { decodeGIF, getGIFLoopAmount } from \"./GifUtils/Utils\";\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = getStyleFromHsl(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, () => colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nexport async function loadImage(image) {\n    return new Promise((resolve) => {\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener(\"load\", () => {\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", () => {\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            getLogger().error(`${errorPrefix} loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nexport async function loadGifImage(image) {\n    if (image.type !== \"gif\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    try {\n        image.gifData = await decodeGIF(image.source);\n        image.gifLoopCount = getGIFLoopAmount(image.gifData) ?? 0;\n        if (image.gifLoopCount === 0) {\n            image.gifLoopCount = Infinity;\n        }\n    }\n    catch {\n        image.error = true;\n    }\n    image.loading = false;\n}\nexport async function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        getLogger().error(`${errorPrefix} Image not found`);\n        image.error = true;\n    }\n    else {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n    const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? 1), imageRes = {\n        color,\n        gif: imageData.gif,\n        data: {\n            ...image,\n            svgData: svgColoredData,\n        },\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: imageData.replaceColor ?? imageData.replace_color,\n        source: imageData.src,\n    };\n    return new Promise((resolve) => {\n        const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener(\"load\", () => {\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        img.addEventListener(\"error\", async () => {\n            domUrl.revokeObjectURL(url);\n            const img2 = {\n                ...image,\n                error: false,\n                loading: true,\n            };\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        });\n        img.src = url;\n    });\n}\n"]},"metadata":{},"sourceType":"module"}