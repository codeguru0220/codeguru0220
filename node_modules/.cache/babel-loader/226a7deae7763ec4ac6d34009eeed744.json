{"ast":null,"code":"export function updateWobble(particle, delta) {\n  const {\n    wobble: wobbleOptions\n  } = particle.options,\n        {\n    wobble\n  } = particle;\n\n  if (!wobbleOptions?.enable || !wobble) {\n    return;\n  }\n\n  const angleSpeed = wobble.angleSpeed * delta.factor,\n        moveSpeed = wobble.moveSpeed * delta.factor,\n        distance = moveSpeed * ((particle.retina.wobbleDistance ?? 0) * delta.factor) / (1000 / 60),\n        max = 2 * Math.PI,\n        {\n    position\n  } = particle;\n  wobble.angle += angleSpeed;\n\n  if (wobble.angle > max) {\n    wobble.angle -= max;\n  }\n\n  position.x += distance * Math.cos(wobble.angle);\n  position.y += distance * Math.abs(Math.sin(wobble.angle));\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-updater-wobble/esm/Utils.js"],"names":["updateWobble","particle","delta","wobble","wobbleOptions","options","enable","angleSpeed","factor","moveSpeed","distance","retina","wobbleDistance","max","Math","PI","position","angle","x","cos","y","abs","sin"],"mappings":"AAAA,OAAO,SAASA,YAAT,CAAsBC,QAAtB,EAAgCC,KAAhC,EAAuC;AAC1C,QAAM;AAAEC,IAAAA,MAAM,EAAEC;AAAV,MAA4BH,QAAQ,CAACI,OAA3C;AAAA,QAAoD;AAAEF,IAAAA;AAAF,MAAaF,QAAjE;;AACA,MAAI,CAACG,aAAa,EAAEE,MAAhB,IAA0B,CAACH,MAA/B,EAAuC;AACnC;AACH;;AACD,QAAMI,UAAU,GAAGJ,MAAM,CAACI,UAAP,GAAoBL,KAAK,CAACM,MAA7C;AAAA,QAAqDC,SAAS,GAAGN,MAAM,CAACM,SAAP,GAAmBP,KAAK,CAACM,MAA1F;AAAA,QAAkGE,QAAQ,GAAID,SAAS,IAAI,CAACR,QAAQ,CAACU,MAAT,CAAgBC,cAAhB,IAAkC,CAAnC,IAAwCV,KAAK,CAACM,MAAlD,CAAV,IAAwE,OAAO,EAA/E,CAA7G;AAAA,QAAiMK,GAAG,GAAG,IAAIC,IAAI,CAACC,EAAhN;AAAA,QAAoN;AAAEC,IAAAA;AAAF,MAAef,QAAnO;AACAE,EAAAA,MAAM,CAACc,KAAP,IAAgBV,UAAhB;;AACA,MAAIJ,MAAM,CAACc,KAAP,GAAeJ,GAAnB,EAAwB;AACpBV,IAAAA,MAAM,CAACc,KAAP,IAAgBJ,GAAhB;AACH;;AACDG,EAAAA,QAAQ,CAACE,CAAT,IAAcR,QAAQ,GAAGI,IAAI,CAACK,GAAL,CAAShB,MAAM,CAACc,KAAhB,CAAzB;AACAD,EAAAA,QAAQ,CAACI,CAAT,IAAcV,QAAQ,GAAGI,IAAI,CAACO,GAAL,CAASP,IAAI,CAACQ,GAAL,CAASnB,MAAM,CAACc,KAAhB,CAAT,CAAzB;AACH","sourcesContent":["export function updateWobble(particle, delta) {\n    const { wobble: wobbleOptions } = particle.options, { wobble } = particle;\n    if (!wobbleOptions?.enable || !wobble) {\n        return;\n    }\n    const angleSpeed = wobble.angleSpeed * delta.factor, moveSpeed = wobble.moveSpeed * delta.factor, distance = (moveSpeed * ((particle.retina.wobbleDistance ?? 0) * delta.factor)) / (1000 / 60), max = 2 * Math.PI, { position } = particle;\n    wobble.angle += angleSpeed;\n    if (wobble.angle > max) {\n        wobble.angle -= max;\n    }\n    position.x += distance * Math.cos(wobble.angle);\n    position.y += distance * Math.abs(Math.sin(wobble.angle));\n}\n"]},"metadata":{},"sourceType":"module"}