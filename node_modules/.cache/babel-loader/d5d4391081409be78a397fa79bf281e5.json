{"ast":null,"code":"import { getRandom, getRangeValue, randomInRange, setRangeValue } from \"tsparticles-engine\";\nimport { Life } from \"./Options/Classes/Life\";\nexport class LifeUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n\n  init(particle) {\n    const container = this.container,\n          particlesOptions = particle.options,\n          lifeOptions = particlesOptions.life;\n\n    if (!lifeOptions) {\n      return;\n    }\n\n    particle.life = {\n      delay: container.retina.reduceFactor ? getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : getRandom()) / container.retina.reduceFactor * 1000 : 0,\n      delayTime: 0,\n      duration: container.retina.reduceFactor ? getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : getRandom()) / container.retina.reduceFactor * 1000 : 0,\n      time: 0,\n      count: lifeOptions.count\n    };\n\n    if (particle.life.duration <= 0) {\n      particle.life.duration = -1;\n    }\n\n    if (particle.life.count <= 0) {\n      particle.life.count = -1;\n    }\n\n    if (particle.life) {\n      particle.spawning = particle.life.delay > 0;\n    }\n  }\n\n  isEnabled(particle) {\n    return !particle.destroyed;\n  }\n\n  loadOptions(options) {\n    if (!options.life) {\n      options.life = new Life();\n    }\n\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    for (const source of sources) {\n      options.life.load(source?.life);\n    }\n  }\n\n  update(particle, delta) {\n    if (!this.isEnabled(particle) || !particle.life) {\n      return;\n    }\n\n    const life = particle.life;\n    let justSpawned = false;\n\n    if (particle.spawning) {\n      life.delayTime += delta.value;\n\n      if (life.delayTime >= particle.life.delay) {\n        justSpawned = true;\n        particle.spawning = false;\n        life.delayTime = 0;\n        life.time = 0;\n      } else {\n        return;\n      }\n    }\n\n    if (life.duration === -1) {\n      return;\n    }\n\n    if (particle.spawning) {\n      return;\n    }\n\n    if (justSpawned) {\n      life.time = 0;\n    } else {\n      life.time += delta.value;\n    }\n\n    if (life.time < life.duration) {\n      return;\n    }\n\n    life.time = 0;\n\n    if (particle.life.count > 0) {\n      particle.life.count--;\n    }\n\n    if (particle.life.count === 0) {\n      particle.destroy();\n      return;\n    }\n\n    const canvasSize = this.container.canvas.size,\n          widthRange = setRangeValue(0, canvasSize.width),\n          heightRange = setRangeValue(0, canvasSize.width);\n    particle.position.x = randomInRange(widthRange);\n    particle.position.y = randomInRange(heightRange);\n    particle.spawning = true;\n    life.delayTime = 0;\n    life.time = 0;\n    particle.reset();\n    const lifeOptions = particle.options.life;\n\n    if (lifeOptions) {\n      life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n      life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-updater-life/esm/LifeUpdater.js"],"names":["getRandom","getRangeValue","randomInRange","setRangeValue","Life","LifeUpdater","constructor","container","init","particle","particlesOptions","options","lifeOptions","life","delay","retina","reduceFactor","value","sync","delayTime","duration","time","count","spawning","isEnabled","destroyed","loadOptions","sources","source","load","update","delta","justSpawned","destroy","canvasSize","canvas","size","widthRange","width","heightRange","position","x","y","reset"],"mappings":"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","sourcesContent":["import { getRandom, getRangeValue, randomInRange, setRangeValue, } from \"tsparticles-engine\";\nimport { Life } from \"./Options/Classes/Life\";\nexport class LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\n        if (!lifeOptions) {\n            return;\n        }\n        particle.life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: lifeOptions.count,\n        };\n        if (particle.life.duration <= 0) {\n            particle.life.duration = -1;\n        }\n        if (particle.life.count <= 0) {\n            particle.life.count = -1;\n        }\n        if (particle.life) {\n            particle.spawning = particle.life.delay > 0;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.life) {\n            options.life = new Life();\n        }\n        for (const source of sources) {\n            options.life.load(source?.life);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.life) {\n            return;\n        }\n        const life = particle.life;\n        let justSpawned = false;\n        if (particle.spawning) {\n            life.delayTime += delta.value;\n            if (life.delayTime >= particle.life.delay) {\n                justSpawned = true;\n                particle.spawning = false;\n                life.delayTime = 0;\n                life.time = 0;\n            }\n            else {\n                return;\n            }\n        }\n        if (life.duration === -1) {\n            return;\n        }\n        if (particle.spawning) {\n            return;\n        }\n        if (justSpawned) {\n            life.time = 0;\n        }\n        else {\n            life.time += delta.value;\n        }\n        if (life.time < life.duration) {\n            return;\n        }\n        life.time = 0;\n        if (particle.life.count > 0) {\n            particle.life.count--;\n        }\n        if (particle.life.count === 0) {\n            particle.destroy();\n            return;\n        }\n        const canvasSize = this.container.canvas.size, widthRange = setRangeValue(0, canvasSize.width), heightRange = setRangeValue(0, canvasSize.width);\n        particle.position.x = randomInRange(widthRange);\n        particle.position.y = randomInRange(heightRange);\n        particle.spawning = true;\n        life.delayTime = 0;\n        life.time = 0;\n        particle.reset();\n        const lifeOptions = particle.options.life;\n        if (lifeOptions) {\n            life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n            life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}