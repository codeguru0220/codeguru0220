{"ast":null,"code":"import { getRangeValue, parseAlpha } from \"./NumberUtils\";\nimport { hslToRgb, hslaToRgba } from \"./ColorUtils\";\nexport class HslColorManager {\n  constructor() {\n    this.key = \"hsl\";\n    this.stringPrefix = \"hsl\";\n  }\n\n  handleColor(color) {\n    const colorValue = color.value,\n          hslColor = colorValue.hsl ?? color.value;\n\n    if (hslColor.h !== undefined && hslColor.s !== undefined && hslColor.l !== undefined) {\n      return hslToRgb(hslColor);\n    }\n  }\n\n  handleRangeColor(color) {\n    const colorValue = color.value,\n          hslColor = colorValue.hsl ?? color.value;\n\n    if (hslColor.h !== undefined && hslColor.l !== undefined) {\n      return hslToRgb({\n        h: getRangeValue(hslColor.h),\n        l: getRangeValue(hslColor.l),\n        s: getRangeValue(hslColor.s)\n      });\n    }\n  }\n\n  parseString(input) {\n    if (!input.startsWith(\"hsl\")) {\n      return;\n    }\n\n    const regex = /hsla?\\(\\s*(\\d+)\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*(,\\s*([\\d.%]+)\\s*)?\\)/i,\n          result = regex.exec(input);\n    return result ? hslaToRgba({\n      a: result.length > 4 ? parseAlpha(result[5]) : 1,\n      h: parseInt(result[1], 10),\n      l: parseInt(result[3], 10),\n      s: parseInt(result[2], 10)\n    }) : undefined;\n  }\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-engine/esm/Utils/HslColorManager.js"],"names":["getRangeValue","parseAlpha","hslToRgb","hslaToRgba","HslColorManager","constructor","key","stringPrefix","handleColor","color","colorValue","value","hslColor","hsl","h","undefined","s","l","handleRangeColor","parseString","input","startsWith","regex","result","exec","a","length","parseInt"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,eAA1C;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,cAArC;AACA,OAAO,MAAMC,eAAN,CAAsB;AACzBC,EAAAA,WAAW,GAAG;AACV,SAAKC,GAAL,GAAW,KAAX;AACA,SAAKC,YAAL,GAAoB,KAApB;AACH;;AACDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMC,UAAU,GAAGD,KAAK,CAACE,KAAzB;AAAA,UAAgCC,QAAQ,GAAGF,UAAU,CAACG,GAAX,IAAkBJ,KAAK,CAACE,KAAnE;;AACA,QAAIC,QAAQ,CAACE,CAAT,KAAeC,SAAf,IAA4BH,QAAQ,CAACI,CAAT,KAAeD,SAA3C,IAAwDH,QAAQ,CAACK,CAAT,KAAeF,SAA3E,EAAsF;AAClF,aAAOb,QAAQ,CAACU,QAAD,CAAf;AACH;AACJ;;AACDM,EAAAA,gBAAgB,CAACT,KAAD,EAAQ;AACpB,UAAMC,UAAU,GAAGD,KAAK,CAACE,KAAzB;AAAA,UAAgCC,QAAQ,GAAGF,UAAU,CAACG,GAAX,IAAkBJ,KAAK,CAACE,KAAnE;;AACA,QAAIC,QAAQ,CAACE,CAAT,KAAeC,SAAf,IAA4BH,QAAQ,CAACK,CAAT,KAAeF,SAA/C,EAA0D;AACtD,aAAOb,QAAQ,CAAC;AACZY,QAAAA,CAAC,EAAEd,aAAa,CAACY,QAAQ,CAACE,CAAV,CADJ;AAEZG,QAAAA,CAAC,EAAEjB,aAAa,CAACY,QAAQ,CAACK,CAAV,CAFJ;AAGZD,QAAAA,CAAC,EAAEhB,aAAa,CAACY,QAAQ,CAACI,CAAV;AAHJ,OAAD,CAAf;AAKH;AACJ;;AACDG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,QAAI,CAACA,KAAK,CAACC,UAAN,CAAiB,KAAjB,CAAL,EAA8B;AAC1B;AACH;;AACD,UAAMC,KAAK,GAAG,oEAAd;AAAA,UAAoFC,MAAM,GAAGD,KAAK,CAACE,IAAN,CAAWJ,KAAX,CAA7F;AACA,WAAOG,MAAM,GACPpB,UAAU,CAAC;AACTsB,MAAAA,CAAC,EAAEF,MAAM,CAACG,MAAP,GAAgB,CAAhB,GAAoBzB,UAAU,CAACsB,MAAM,CAAC,CAAD,CAAP,CAA9B,GAA4C,CADtC;AAETT,MAAAA,CAAC,EAAEa,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAFF;AAGTN,MAAAA,CAAC,EAAEU,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAHF;AAITP,MAAAA,CAAC,EAAEW,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ;AAJF,KAAD,CADH,GAOPR,SAPN;AAQH;;AAlCwB","sourcesContent":["import { getRangeValue, parseAlpha } from \"./NumberUtils\";\nimport { hslToRgb, hslaToRgba } from \"./ColorUtils\";\nexport class HslColorManager {\n    constructor() {\n        this.key = \"hsl\";\n        this.stringPrefix = \"hsl\";\n    }\n    handleColor(color) {\n        const colorValue = color.value, hslColor = colorValue.hsl ?? color.value;\n        if (hslColor.h !== undefined && hslColor.s !== undefined && hslColor.l !== undefined) {\n            return hslToRgb(hslColor);\n        }\n    }\n    handleRangeColor(color) {\n        const colorValue = color.value, hslColor = colorValue.hsl ?? color.value;\n        if (hslColor.h !== undefined && hslColor.l !== undefined) {\n            return hslToRgb({\n                h: getRangeValue(hslColor.h),\n                l: getRangeValue(hslColor.l),\n                s: getRangeValue(hslColor.s),\n            });\n        }\n    }\n    parseString(input) {\n        if (!input.startsWith(\"hsl\")) {\n            return;\n        }\n        const regex = /hsla?\\(\\s*(\\d+)\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*(,\\s*([\\d.%]+)\\s*)?\\)/i, result = regex.exec(input);\n        return result\n            ? hslaToRgba({\n                a: result.length > 4 ? parseAlpha(result[5]) : 1,\n                h: parseInt(result[1], 10),\n                l: parseInt(result[3], 10),\n                s: parseInt(result[2], 10),\n            })\n            : undefined;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}