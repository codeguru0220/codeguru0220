{"ast":null,"code":"import { createFormattedComponent, createFormattedDateTimePartsComponent } from './src/components/createFormattedComponent';\nimport injectIntl, { Provider as RawIntlProvider, Context as IntlContext } from './src/components/injectIntl';\nimport useIntl from './src/components/useIntl';\nimport IntlProvider, { createIntl } from './src/components/provider';\nimport FormattedRelativeTime from './src/components/relative';\nimport FormattedPlural from './src/components/plural';\nimport FormattedMessage from './src/components/message';\nimport FormattedDateTimeRange from './src/components/dateTimeRange';\nexport { FormattedDateTimeRange, FormattedMessage, FormattedPlural, FormattedRelativeTime, IntlContext, IntlProvider, RawIntlProvider, createIntl, injectIntl, useIntl };\nexport { createIntlCache, UnsupportedFormatterError, InvalidConfigError, MissingDataError, MessageFormatError, MissingTranslationError, IntlErrorCode as ReactIntlErrorCode, IntlError as ReactIntlError } from '@formatjs/intl';\nexport function defineMessages(msgs) {\n  return msgs;\n}\nexport function defineMessage(msg) {\n  return msg;\n} // IMPORTANT: Explicit here to prevent api-extractor from outputing `import('./src/types').CustomFormatConfig`\n\nexport var FormattedDate = createFormattedComponent('formatDate');\nexport var FormattedTime = createFormattedComponent('formatTime'); // @ts-ignore issue w/ TS Intl types\n\nexport var FormattedNumber = createFormattedComponent('formatNumber');\nexport var FormattedList = createFormattedComponent('formatList');\nexport var FormattedDisplayName = createFormattedComponent('formatDisplayName');\nexport var FormattedDateParts = createFormattedDateTimePartsComponent('formatDate');\nexport var FormattedTimeParts = createFormattedDateTimePartsComponent('formatTime');\nexport { FormattedNumberParts, FormattedListParts } from './src/components/createFormattedComponent';","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/react-intl/lib/index.js"],"names":["createFormattedComponent","createFormattedDateTimePartsComponent","injectIntl","Provider","RawIntlProvider","Context","IntlContext","useIntl","IntlProvider","createIntl","FormattedRelativeTime","FormattedPlural","FormattedMessage","FormattedDateTimeRange","createIntlCache","UnsupportedFormatterError","InvalidConfigError","MissingDataError","MessageFormatError","MissingTranslationError","IntlErrorCode","ReactIntlErrorCode","IntlError","ReactIntlError","defineMessages","msgs","defineMessage","msg","FormattedDate","FormattedTime","FormattedNumber","FormattedList","FormattedDisplayName","FormattedDateParts","FormattedTimeParts","FormattedNumberParts","FormattedListParts"],"mappings":"AAAA,SAASA,wBAAT,EAAmCC,qCAAnC,QAAiF,2CAAjF;AACA,OAAOC,UAAP,IAAqBC,QAAQ,IAAIC,eAAjC,EAAkDC,OAAO,IAAIC,WAA7D,QAAiF,6BAAjF;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,YAAP,IAAuBC,UAAvB,QAAyC,2BAAzC;AACA,OAAOC,qBAAP,MAAkC,2BAAlC;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,OAAOC,gBAAP,MAA6B,0BAA7B;AACA,OAAOC,sBAAP,MAAmC,gCAAnC;AACA,SAASA,sBAAT,EAAiCD,gBAAjC,EAAmDD,eAAnD,EAAoED,qBAApE,EAA2FJ,WAA3F,EAAwGE,YAAxG,EAAsHJ,eAAtH,EAAuIK,UAAvI,EAAmJP,UAAnJ,EAA+JK,OAA/J;AACA,SAASO,eAAT,EAA0BC,yBAA1B,EAAqDC,kBAArD,EAAyEC,gBAAzE,EAA2FC,kBAA3F,EAA+GC,uBAA/G,EAAwIC,aAAa,IAAIC,kBAAzJ,EAA6KC,SAAS,IAAIC,cAA1L,QAAiN,gBAAjN;AACA,OAAO,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AACjC,SAAOA,IAAP;AACH;AACD,OAAO,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AAC/B,SAAOA,GAAP;AACH,C,CACD;;AACA,OAAO,IAAIC,aAAa,GAAG5B,wBAAwB,CAAC,YAAD,CAA5C;AACP,OAAO,IAAI6B,aAAa,GAAG7B,wBAAwB,CAAC,YAAD,CAA5C,C,CACP;;AACA,OAAO,IAAI8B,eAAe,GAAG9B,wBAAwB,CAAC,cAAD,CAA9C;AACP,OAAO,IAAI+B,aAAa,GAAG/B,wBAAwB,CAAC,YAAD,CAA5C;AACP,OAAO,IAAIgC,oBAAoB,GAAGhC,wBAAwB,CAAC,mBAAD,CAAnD;AACP,OAAO,IAAIiC,kBAAkB,GAAGhC,qCAAqC,CAAC,YAAD,CAA9D;AACP,OAAO,IAAIiC,kBAAkB,GAAGjC,qCAAqC,CAAC,YAAD,CAA9D;AACP,SAASkC,oBAAT,EAA+BC,kBAA/B,QAA0D,2CAA1D","sourcesContent":["import { createFormattedComponent, createFormattedDateTimePartsComponent, } from './src/components/createFormattedComponent';\nimport injectIntl, { Provider as RawIntlProvider, Context as IntlContext, } from './src/components/injectIntl';\nimport useIntl from './src/components/useIntl';\nimport IntlProvider, { createIntl } from './src/components/provider';\nimport FormattedRelativeTime from './src/components/relative';\nimport FormattedPlural from './src/components/plural';\nimport FormattedMessage from './src/components/message';\nimport FormattedDateTimeRange from './src/components/dateTimeRange';\nexport { FormattedDateTimeRange, FormattedMessage, FormattedPlural, FormattedRelativeTime, IntlContext, IntlProvider, RawIntlProvider, createIntl, injectIntl, useIntl, };\nexport { createIntlCache, UnsupportedFormatterError, InvalidConfigError, MissingDataError, MessageFormatError, MissingTranslationError, IntlErrorCode as ReactIntlErrorCode, IntlError as ReactIntlError, } from '@formatjs/intl';\nexport function defineMessages(msgs) {\n    return msgs;\n}\nexport function defineMessage(msg) {\n    return msg;\n}\n// IMPORTANT: Explicit here to prevent api-extractor from outputing `import('./src/types').CustomFormatConfig`\nexport var FormattedDate = createFormattedComponent('formatDate');\nexport var FormattedTime = createFormattedComponent('formatTime');\n// @ts-ignore issue w/ TS Intl types\nexport var FormattedNumber = createFormattedComponent('formatNumber');\nexport var FormattedList = createFormattedComponent('formatList');\nexport var FormattedDisplayName = createFormattedComponent('formatDisplayName');\nexport var FormattedDateParts = createFormattedDateTimePartsComponent('formatDate');\nexport var FormattedTimeParts = createFormattedDateTimePartsComponent('formatTime');\nexport { FormattedNumberParts, FormattedListParts, } from './src/components/createFormattedComponent';\n"]},"metadata":{},"sourceType":"module"}