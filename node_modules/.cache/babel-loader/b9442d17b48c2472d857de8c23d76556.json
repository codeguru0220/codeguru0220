{"ast":null,"code":"import { drawLine, drawTriangle, getDistance, getDistances, getRandom, getStyleFromRgb, rangeColorToRgb } from \"tsparticles-engine\";\nexport function drawLinkLine(params) {\n  let drawn = false;\n  const {\n    begin,\n    end,\n    maxDistance,\n    context,\n    canvasSize,\n    width,\n    backgroundMask,\n    colorLine,\n    opacity,\n    links\n  } = params;\n\n  if (getDistance(begin, end) <= maxDistance) {\n    drawLine(context, begin, end);\n    drawn = true;\n  } else if (links.warp) {\n    let pi1;\n    let pi2;\n    const endNE = {\n      x: end.x - canvasSize.width,\n      y: end.y\n    };\n    const d1 = getDistances(begin, endNE);\n\n    if (d1.distance <= maxDistance) {\n      const yi = begin.y - d1.dy / d1.dx * begin.x;\n      pi1 = {\n        x: 0,\n        y: yi\n      };\n      pi2 = {\n        x: canvasSize.width,\n        y: yi\n      };\n    } else {\n      const endSW = {\n        x: end.x,\n        y: end.y - canvasSize.height\n      };\n      const d2 = getDistances(begin, endSW);\n\n      if (d2.distance <= maxDistance) {\n        const yi = begin.y - d2.dy / d2.dx * begin.x;\n        const xi = -yi / (d2.dy / d2.dx);\n        pi1 = {\n          x: xi,\n          y: 0\n        };\n        pi2 = {\n          x: xi,\n          y: canvasSize.height\n        };\n      } else {\n        const endSE = {\n          x: end.x - canvasSize.width,\n          y: end.y - canvasSize.height\n        };\n        const d3 = getDistances(begin, endSE);\n\n        if (d3.distance <= maxDistance) {\n          const yi = begin.y - d3.dy / d3.dx * begin.x;\n          const xi = -yi / (d3.dy / d3.dx);\n          pi1 = {\n            x: xi,\n            y: yi\n          };\n          pi2 = {\n            x: pi1.x + canvasSize.width,\n            y: pi1.y + canvasSize.height\n          };\n        }\n      }\n    }\n\n    if (pi1 && pi2) {\n      drawLine(context, begin, pi1);\n      drawLine(context, end, pi2);\n      drawn = true;\n    }\n  }\n\n  if (!drawn) {\n    return;\n  }\n\n  context.lineWidth = width;\n\n  if (backgroundMask.enable) {\n    context.globalCompositeOperation = backgroundMask.composite;\n  }\n\n  context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n  const {\n    shadow\n  } = links;\n\n  if (shadow.enable) {\n    const shadowColor = rangeColorToRgb(shadow.color);\n\n    if (shadowColor) {\n      context.shadowBlur = shadow.blur;\n      context.shadowColor = getStyleFromRgb(shadowColor);\n    }\n  }\n\n  context.stroke();\n}\nexport function drawLinkTriangle(params) {\n  const {\n    context,\n    pos1,\n    pos2,\n    pos3,\n    backgroundMask,\n    colorTriangle,\n    opacityTriangle\n  } = params;\n  drawTriangle(context, pos1, pos2, pos3);\n\n  if (backgroundMask.enable) {\n    context.globalCompositeOperation = backgroundMask.composite;\n  }\n\n  context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);\n  context.fill();\n}\nexport function getLinkKey(ids) {\n  ids.sort((a, b) => a - b);\n  return ids.join(\"_\");\n}\nexport function setLinkFrequency(particles, dictionary) {\n  const key = getLinkKey(particles.map(t => t.id));\n  let res = dictionary.get(key);\n\n  if (res === undefined) {\n    res = getRandom();\n    dictionary.set(key, res);\n  }\n\n  return res;\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-interaction-particles-links/esm/Utils.js"],"names":["drawLine","drawTriangle","getDistance","getDistances","getRandom","getStyleFromRgb","rangeColorToRgb","drawLinkLine","params","drawn","begin","end","maxDistance","context","canvasSize","width","backgroundMask","colorLine","opacity","links","warp","pi1","pi2","endNE","x","y","d1","distance","yi","dy","dx","endSW","height","d2","xi","endSE","d3","lineWidth","enable","globalCompositeOperation","composite","strokeStyle","shadow","shadowColor","color","shadowBlur","blur","stroke","drawLinkTriangle","pos1","pos2","pos3","colorTriangle","opacityTriangle","fillStyle","fill","getLinkKey","ids","sort","a","b","join","setLinkFrequency","particles","dictionary","key","map","t","id","res","get","undefined","set"],"mappings":"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","sourcesContent":["import { drawLine, drawTriangle, getDistance, getDistances, getRandom, getStyleFromRgb, rangeColorToRgb, } from \"tsparticles-engine\";\nexport function drawLinkLine(params) {\n    let drawn = false;\n    const { begin, end, maxDistance, context, canvasSize, width, backgroundMask, colorLine, opacity, links } = params;\n    if (getDistance(begin, end) <= maxDistance) {\n        drawLine(context, begin, end);\n        drawn = true;\n    }\n    else if (links.warp) {\n        let pi1;\n        let pi2;\n        const endNE = {\n            x: end.x - canvasSize.width,\n            y: end.y,\n        };\n        const d1 = getDistances(begin, endNE);\n        if (d1.distance <= maxDistance) {\n            const yi = begin.y - (d1.dy / d1.dx) * begin.x;\n            pi1 = { x: 0, y: yi };\n            pi2 = { x: canvasSize.width, y: yi };\n        }\n        else {\n            const endSW = {\n                x: end.x,\n                y: end.y - canvasSize.height,\n            };\n            const d2 = getDistances(begin, endSW);\n            if (d2.distance <= maxDistance) {\n                const yi = begin.y - (d2.dy / d2.dx) * begin.x;\n                const xi = -yi / (d2.dy / d2.dx);\n                pi1 = { x: xi, y: 0 };\n                pi2 = { x: xi, y: canvasSize.height };\n            }\n            else {\n                const endSE = {\n                    x: end.x - canvasSize.width,\n                    y: end.y - canvasSize.height,\n                };\n                const d3 = getDistances(begin, endSE);\n                if (d3.distance <= maxDistance) {\n                    const yi = begin.y - (d3.dy / d3.dx) * begin.x;\n                    const xi = -yi / (d3.dy / d3.dx);\n                    pi1 = { x: xi, y: yi };\n                    pi2 = { x: pi1.x + canvasSize.width, y: pi1.y + canvasSize.height };\n                }\n            }\n        }\n        if (pi1 && pi2) {\n            drawLine(context, begin, pi1);\n            drawLine(context, end, pi2);\n            drawn = true;\n        }\n    }\n    if (!drawn) {\n        return;\n    }\n    context.lineWidth = width;\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    const { shadow } = links;\n    if (shadow.enable) {\n        const shadowColor = rangeColorToRgb(shadow.color);\n        if (shadowColor) {\n            context.shadowBlur = shadow.blur;\n            context.shadowColor = getStyleFromRgb(shadowColor);\n        }\n    }\n    context.stroke();\n}\nexport function drawLinkTriangle(params) {\n    const { context, pos1, pos2, pos3, backgroundMask, colorTriangle, opacityTriangle } = params;\n    drawTriangle(context, pos1, pos2, pos3);\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);\n    context.fill();\n}\nexport function getLinkKey(ids) {\n    ids.sort((a, b) => a - b);\n    return ids.join(\"_\");\n}\nexport function setLinkFrequency(particles, dictionary) {\n    const key = getLinkKey(particles.map((t) => t.id));\n    let res = dictionary.get(key);\n    if (res === undefined) {\n        res = getRandom();\n        dictionary.set(key, res);\n    }\n    return res;\n}\n"]},"metadata":{},"sourceType":"module"}