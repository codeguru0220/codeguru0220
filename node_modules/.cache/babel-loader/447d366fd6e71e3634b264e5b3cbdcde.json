{"ast":null,"code":"import { arrayRandomIndex, executeOnSingleOrMultiple, isArray, isNumber, itemFromArray } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterInstance } from \"./EmitterInstance\";\nexport class Emitters {\n  constructor(engine, container) {\n    this.container = container;\n    this._engine = engine;\n    this.array = [];\n    this.emitters = [];\n    this.interactivityEmitters = {\n      random: {\n        count: 1,\n        enable: false\n      },\n      value: []\n    };\n\n    container.getEmitter = idxOrName => idxOrName === undefined || isNumber(idxOrName) ? this.array[idxOrName || 0] : this.array.find(t => t.name === idxOrName);\n\n    container.addEmitter = (options, position) => this.addEmitter(options, position);\n\n    container.removeEmitter = idxOrName => {\n      const emitter = container.getEmitter(idxOrName);\n\n      if (emitter) {\n        this.removeEmitter(emitter);\n      }\n    };\n\n    container.playEmitter = idxOrName => {\n      const emitter = container.getEmitter(idxOrName);\n\n      if (emitter) {\n        emitter.externalPlay();\n      }\n    };\n\n    container.pauseEmitter = idxOrName => {\n      const emitter = container.getEmitter(idxOrName);\n\n      if (emitter) {\n        emitter.externalPause();\n      }\n    };\n  }\n\n  addEmitter(options, position) {\n    const emitterOptions = new Emitter();\n    emitterOptions.load(options);\n    const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);\n    this.array.push(emitter);\n    return emitter;\n  }\n\n  handleClickMode(mode) {\n    const emitterOptions = this.emitters,\n          modeEmitters = this.interactivityEmitters;\n\n    if (mode !== \"emitter\") {\n      return;\n    }\n\n    let emittersModeOptions;\n\n    if (modeEmitters && isArray(modeEmitters.value)) {\n      if (modeEmitters.value.length > 0 && modeEmitters.random.enable) {\n        emittersModeOptions = [];\n        const usedIndexes = [];\n\n        for (let i = 0; i < modeEmitters.random.count; i++) {\n          const idx = arrayRandomIndex(modeEmitters.value);\n\n          if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n            i--;\n            continue;\n          }\n\n          usedIndexes.push(idx);\n          emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n        }\n      } else {\n        emittersModeOptions = modeEmitters.value;\n      }\n    } else {\n      emittersModeOptions = modeEmitters?.value;\n    }\n\n    const emittersOptions = emittersModeOptions ?? emitterOptions,\n          ePosition = this.container.interactivity.mouse.clickPosition;\n    executeOnSingleOrMultiple(emittersOptions, emitter => {\n      this.addEmitter(emitter, ePosition);\n    });\n  }\n\n  async init() {\n    this.emitters = this.container.actualOptions.emitters;\n    this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;\n\n    if (!this.emitters) {\n      return;\n    }\n\n    if (isArray(this.emitters)) {\n      for (const emitterOptions of this.emitters) {\n        this.addEmitter(emitterOptions);\n      }\n    } else {\n      this.addEmitter(this.emitters);\n    }\n  }\n\n  pause() {\n    for (const emitter of this.array) {\n      emitter.pause();\n    }\n  }\n\n  play() {\n    for (const emitter of this.array) {\n      emitter.play();\n    }\n  }\n\n  removeEmitter(emitter) {\n    const index = this.array.indexOf(emitter);\n\n    if (index >= 0) {\n      this.array.splice(index, 1);\n    }\n  }\n\n  resize() {\n    for (const emitter of this.array) {\n      emitter.resize();\n    }\n  }\n\n  stop() {\n    this.array = [];\n  }\n\n  update(delta) {\n    for (const emitter of this.array) {\n      emitter.update(delta);\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-plugin-emitters/esm/Emitters.js"],"names":["arrayRandomIndex","executeOnSingleOrMultiple","isArray","isNumber","itemFromArray","Emitter","EmitterInstance","Emitters","constructor","engine","container","_engine","array","emitters","interactivityEmitters","random","count","enable","value","getEmitter","idxOrName","undefined","find","t","name","addEmitter","options","position","removeEmitter","emitter","playEmitter","externalPlay","pauseEmitter","externalPause","emitterOptions","load","push","handleClickMode","mode","modeEmitters","emittersModeOptions","length","usedIndexes","i","idx","includes","emittersOptions","ePosition","interactivity","mouse","clickPosition","init","actualOptions","modes","pause","play","index","indexOf","splice","resize","stop","update","delta"],"mappings":"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","sourcesContent":["import { arrayRandomIndex, executeOnSingleOrMultiple, isArray, isNumber, itemFromArray, } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterInstance } from \"./EmitterInstance\";\nexport class Emitters {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this.array = [];\n        this.emitters = [];\n        this.interactivityEmitters = {\n            random: {\n                count: 1,\n                enable: false,\n            },\n            value: [],\n        };\n        container.getEmitter = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName || 0]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addEmitter = (options, position) => this.addEmitter(options, position);\n        container.removeEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                this.removeEmitter(emitter);\n            }\n        };\n        container.playEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPlay();\n            }\n        };\n        container.pauseEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPause();\n            }\n        };\n    }\n    addEmitter(options, position) {\n        const emitterOptions = new Emitter();\n        emitterOptions.load(options);\n        const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);\n        this.array.push(emitter);\n        return emitter;\n    }\n    handleClickMode(mode) {\n        const emitterOptions = this.emitters, modeEmitters = this.interactivityEmitters;\n        if (mode !== \"emitter\") {\n            return;\n        }\n        let emittersModeOptions;\n        if (modeEmitters && isArray(modeEmitters.value)) {\n            if (modeEmitters.value.length > 0 && modeEmitters.random.enable) {\n                emittersModeOptions = [];\n                const usedIndexes = [];\n                for (let i = 0; i < modeEmitters.random.count; i++) {\n                    const idx = arrayRandomIndex(modeEmitters.value);\n                    if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n                        i--;\n                        continue;\n                    }\n                    usedIndexes.push(idx);\n                    emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n                }\n            }\n            else {\n                emittersModeOptions = modeEmitters.value;\n            }\n        }\n        else {\n            emittersModeOptions = modeEmitters?.value;\n        }\n        const emittersOptions = emittersModeOptions ?? emitterOptions, ePosition = this.container.interactivity.mouse.clickPosition;\n        executeOnSingleOrMultiple(emittersOptions, (emitter) => {\n            this.addEmitter(emitter, ePosition);\n        });\n    }\n    async init() {\n        this.emitters = this.container.actualOptions.emitters;\n        this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;\n        if (!this.emitters) {\n            return;\n        }\n        if (isArray(this.emitters)) {\n            for (const emitterOptions of this.emitters) {\n                this.addEmitter(emitterOptions);\n            }\n        }\n        else {\n            this.addEmitter(this.emitters);\n        }\n    }\n    pause() {\n        for (const emitter of this.array) {\n            emitter.pause();\n        }\n    }\n    play() {\n        for (const emitter of this.array) {\n            emitter.play();\n        }\n    }\n    removeEmitter(emitter) {\n        const index = this.array.indexOf(emitter);\n        if (index >= 0) {\n            this.array.splice(index, 1);\n        }\n    }\n    resize() {\n        for (const emitter of this.array) {\n            emitter.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    update(delta) {\n        for (const emitter of this.array) {\n            emitter.update(delta);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}