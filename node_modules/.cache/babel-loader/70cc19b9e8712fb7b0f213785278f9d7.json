{"ast":null,"code":"import { randomInRange } from \"tsparticles-engine\";\n\nfunction updateColorValue(delta, colorValue, valueAnimation, max, decrease) {\n  if (!colorValue || !valueAnimation.enable || (colorValue.maxLoops ?? 0) > 0 && (colorValue.loops ?? 0) > (colorValue.maxLoops ?? 0)) {\n    return;\n  }\n\n  if (!colorValue.time) {\n    colorValue.time = 0;\n  }\n\n  if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n    colorValue.time += delta.value;\n  }\n\n  if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n    return;\n  }\n\n  const offset = randomInRange(valueAnimation.offset),\n        velocity = (colorValue.velocity ?? 0) * delta.factor + offset * 3.6,\n        decay = colorValue.decay ?? 1;\n\n  if (!decrease || colorValue.status === \"increasing\") {\n    colorValue.value += velocity;\n\n    if (colorValue.value > max) {\n      if (!colorValue.loops) {\n        colorValue.loops = 0;\n      }\n\n      colorValue.loops++;\n\n      if (decrease) {\n        colorValue.status = \"decreasing\";\n        colorValue.value -= colorValue.value % max;\n      }\n    }\n  } else {\n    colorValue.value -= velocity;\n\n    if (colorValue.value < 0) {\n      if (!colorValue.loops) {\n        colorValue.loops = 0;\n      }\n\n      colorValue.loops++;\n      colorValue.status = \"increasing\";\n      colorValue.value += colorValue.value;\n    }\n  }\n\n  if (colorValue.velocity && decay !== 1) {\n    colorValue.velocity *= decay;\n  }\n\n  if (colorValue.value > max) {\n    colorValue.value %= max;\n  }\n}\n\nexport function updateStrokeColor(particle, delta) {\n  if (!particle.strokeColor || !particle.strokeAnimation) {\n    return;\n  }\n\n  const {\n    h,\n    s,\n    l\n  } = particle.strokeColor,\n        {\n    h: hAnimation,\n    s: sAnimation,\n    l: lAnimation\n  } = particle.strokeAnimation;\n\n  if (h) {\n    updateColorValue(delta, h, hAnimation, 360, false);\n  }\n\n  if (s) {\n    updateColorValue(delta, s, sAnimation, 100, true);\n  }\n\n  if (l) {\n    updateColorValue(delta, l, lAnimation, 100, true);\n  }\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-updater-stroke-color/esm/Utils.js"],"names":["randomInRange","updateColorValue","delta","colorValue","valueAnimation","max","decrease","enable","maxLoops","loops","time","delayTime","value","offset","velocity","factor","decay","status","updateStrokeColor","particle","strokeColor","strokeAnimation","h","s","l","hAnimation","sAnimation","lAnimation"],"mappings":"AAAA,SAASA,aAAT,QAA+B,oBAA/B;;AACA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,UAAjC,EAA6CC,cAA7C,EAA6DC,GAA7D,EAAkEC,QAAlE,EAA4E;AACxE,MAAI,CAACH,UAAD,IACA,CAACC,cAAc,CAACG,MADhB,IAEC,CAACJ,UAAU,CAACK,QAAX,IAAuB,CAAxB,IAA6B,CAA7B,IAAkC,CAACL,UAAU,CAACM,KAAX,IAAoB,CAArB,KAA2BN,UAAU,CAACK,QAAX,IAAuB,CAAlD,CAFvC,EAE8F;AAC1F;AACH;;AACD,MAAI,CAACL,UAAU,CAACO,IAAhB,EAAsB;AAClBP,IAAAA,UAAU,CAACO,IAAX,GAAkB,CAAlB;AACH;;AACD,MAAI,CAACP,UAAU,CAACQ,SAAX,IAAwB,CAAzB,IAA8B,CAA9B,IAAmCR,UAAU,CAACO,IAAX,IAAmBP,UAAU,CAACQ,SAAX,IAAwB,CAA3C,CAAvC,EAAsF;AAClFR,IAAAA,UAAU,CAACO,IAAX,IAAmBR,KAAK,CAACU,KAAzB;AACH;;AACD,MAAI,CAACT,UAAU,CAACQ,SAAX,IAAwB,CAAzB,IAA8B,CAA9B,IAAmCR,UAAU,CAACO,IAAX,IAAmBP,UAAU,CAACQ,SAAX,IAAwB,CAA3C,CAAvC,EAAsF;AAClF;AACH;;AACD,QAAME,MAAM,GAAGb,aAAa,CAACI,cAAc,CAACS,MAAhB,CAA5B;AAAA,QAAqDC,QAAQ,GAAG,CAACX,UAAU,CAACW,QAAX,IAAuB,CAAxB,IAA6BZ,KAAK,CAACa,MAAnC,GAA4CF,MAAM,GAAG,GAArH;AAAA,QAA0HG,KAAK,GAAGb,UAAU,CAACa,KAAX,IAAoB,CAAtJ;;AACA,MAAI,CAACV,QAAD,IAAaH,UAAU,CAACc,MAAX,KAAsB,YAAvC,EAAqD;AACjDd,IAAAA,UAAU,CAACS,KAAX,IAAoBE,QAApB;;AACA,QAAIX,UAAU,CAACS,KAAX,GAAmBP,GAAvB,EAA4B;AACxB,UAAI,CAACF,UAAU,CAACM,KAAhB,EAAuB;AACnBN,QAAAA,UAAU,CAACM,KAAX,GAAmB,CAAnB;AACH;;AACDN,MAAAA,UAAU,CAACM,KAAX;;AACA,UAAIH,QAAJ,EAAc;AACVH,QAAAA,UAAU,CAACc,MAAX,GAAoB,YAApB;AACAd,QAAAA,UAAU,CAACS,KAAX,IAAoBT,UAAU,CAACS,KAAX,GAAmBP,GAAvC;AACH;AACJ;AACJ,GAZD,MAaK;AACDF,IAAAA,UAAU,CAACS,KAAX,IAAoBE,QAApB;;AACA,QAAIX,UAAU,CAACS,KAAX,GAAmB,CAAvB,EAA0B;AACtB,UAAI,CAACT,UAAU,CAACM,KAAhB,EAAuB;AACnBN,QAAAA,UAAU,CAACM,KAAX,GAAmB,CAAnB;AACH;;AACDN,MAAAA,UAAU,CAACM,KAAX;AACAN,MAAAA,UAAU,CAACc,MAAX,GAAoB,YAApB;AACAd,MAAAA,UAAU,CAACS,KAAX,IAAoBT,UAAU,CAACS,KAA/B;AACH;AACJ;;AACD,MAAIT,UAAU,CAACW,QAAX,IAAuBE,KAAK,KAAK,CAArC,EAAwC;AACpCb,IAAAA,UAAU,CAACW,QAAX,IAAuBE,KAAvB;AACH;;AACD,MAAIb,UAAU,CAACS,KAAX,GAAmBP,GAAvB,EAA4B;AACxBF,IAAAA,UAAU,CAACS,KAAX,IAAoBP,GAApB;AACH;AACJ;;AACD,OAAO,SAASa,iBAAT,CAA2BC,QAA3B,EAAqCjB,KAArC,EAA4C;AAC/C,MAAI,CAACiB,QAAQ,CAACC,WAAV,IAAyB,CAACD,QAAQ,CAACE,eAAvC,EAAwD;AACpD;AACH;;AACD,QAAM;AAAEC,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQC,IAAAA;AAAR,MAAcL,QAAQ,CAACC,WAA7B;AAAA,QAA0C;AAAEE,IAAAA,CAAC,EAAEG,UAAL;AAAiBF,IAAAA,CAAC,EAAEG,UAApB;AAAgCF,IAAAA,CAAC,EAAEG;AAAnC,MAAkDR,QAAQ,CAACE,eAArG;;AACA,MAAIC,CAAJ,EAAO;AACHrB,IAAAA,gBAAgB,CAACC,KAAD,EAAQoB,CAAR,EAAWG,UAAX,EAAuB,GAAvB,EAA4B,KAA5B,CAAhB;AACH;;AACD,MAAIF,CAAJ,EAAO;AACHtB,IAAAA,gBAAgB,CAACC,KAAD,EAAQqB,CAAR,EAAWG,UAAX,EAAuB,GAAvB,EAA4B,IAA5B,CAAhB;AACH;;AACD,MAAIF,CAAJ,EAAO;AACHvB,IAAAA,gBAAgB,CAACC,KAAD,EAAQsB,CAAR,EAAWG,UAAX,EAAuB,GAAvB,EAA4B,IAA5B,CAAhB;AACH;AACJ","sourcesContent":["import { randomInRange, } from \"tsparticles-engine\";\nfunction updateColorValue(delta, colorValue, valueAnimation, max, decrease) {\n    if (!colorValue ||\n        !valueAnimation.enable ||\n        ((colorValue.maxLoops ?? 0) > 0 && (colorValue.loops ?? 0) > (colorValue.maxLoops ?? 0))) {\n        return;\n    }\n    if (!colorValue.time) {\n        colorValue.time = 0;\n    }\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n        colorValue.time += delta.value;\n    }\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n        return;\n    }\n    const offset = randomInRange(valueAnimation.offset), velocity = (colorValue.velocity ?? 0) * delta.factor + offset * 3.6, decay = colorValue.decay ?? 1;\n    if (!decrease || colorValue.status === \"increasing\") {\n        colorValue.value += velocity;\n        if (colorValue.value > max) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            if (decrease) {\n                colorValue.status = \"decreasing\";\n                colorValue.value -= colorValue.value % max;\n            }\n        }\n    }\n    else {\n        colorValue.value -= velocity;\n        if (colorValue.value < 0) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            colorValue.status = \"increasing\";\n            colorValue.value += colorValue.value;\n        }\n    }\n    if (colorValue.velocity && decay !== 1) {\n        colorValue.velocity *= decay;\n    }\n    if (colorValue.value > max) {\n        colorValue.value %= max;\n    }\n}\nexport function updateStrokeColor(particle, delta) {\n    if (!particle.strokeColor || !particle.strokeAnimation) {\n        return;\n    }\n    const { h, s, l } = particle.strokeColor, { h: hAnimation, s: sAnimation, l: lAnimation } = particle.strokeAnimation;\n    if (h) {\n        updateColorValue(delta, h, hAnimation, 360, false);\n    }\n    if (s) {\n        updateColorValue(delta, s, sAnimation, 100, true);\n    }\n    if (l) {\n        updateColorValue(delta, l, lAnimation, 100, true);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}