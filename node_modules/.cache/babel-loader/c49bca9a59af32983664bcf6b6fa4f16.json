{"ast":null,"code":"import { invariant } from './utils';\n/**\n * https://tc39.es/ecma402/#sec-partitionpattern\n * @param pattern\n */\n\nexport function PartitionPattern(pattern) {\n  var result = [];\n  var beginIndex = pattern.indexOf('{');\n  var endIndex = 0;\n  var nextIndex = 0;\n  var length = pattern.length;\n\n  while (beginIndex < pattern.length && beginIndex > -1) {\n    endIndex = pattern.indexOf('}', beginIndex);\n    invariant(endIndex > beginIndex, \"Invalid pattern \".concat(pattern));\n\n    if (beginIndex > nextIndex) {\n      result.push({\n        type: 'literal',\n        value: pattern.substring(nextIndex, beginIndex)\n      });\n    }\n\n    result.push({\n      type: pattern.substring(beginIndex + 1, endIndex),\n      value: undefined\n    });\n    nextIndex = endIndex + 1;\n    beginIndex = pattern.indexOf('{', nextIndex);\n  }\n\n  if (nextIndex < length) {\n    result.push({\n      type: 'literal',\n      value: pattern.substring(nextIndex, length)\n    });\n  }\n\n  return result;\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/@formatjs/ecma402-abstract/lib/PartitionPattern.js"],"names":["invariant","PartitionPattern","pattern","result","beginIndex","indexOf","endIndex","nextIndex","length","concat","push","type","value","substring","undefined"],"mappings":"AAAA,SAASA,SAAT,QAA0B,SAA1B;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;AACtC,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,UAAU,GAAGF,OAAO,CAACG,OAAR,CAAgB,GAAhB,CAAjB;AACA,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,MAAM,GAAGN,OAAO,CAACM,MAArB;;AACA,SAAOJ,UAAU,GAAGF,OAAO,CAACM,MAArB,IAA+BJ,UAAU,GAAG,CAAC,CAApD,EAAuD;AACnDE,IAAAA,QAAQ,GAAGJ,OAAO,CAACG,OAAR,CAAgB,GAAhB,EAAqBD,UAArB,CAAX;AACAJ,IAAAA,SAAS,CAACM,QAAQ,GAAGF,UAAZ,EAAwB,mBAAmBK,MAAnB,CAA0BP,OAA1B,CAAxB,CAAT;;AACA,QAAIE,UAAU,GAAGG,SAAjB,EAA4B;AACxBJ,MAAAA,MAAM,CAACO,IAAP,CAAY;AACRC,QAAAA,IAAI,EAAE,SADE;AAERC,QAAAA,KAAK,EAAEV,OAAO,CAACW,SAAR,CAAkBN,SAAlB,EAA6BH,UAA7B;AAFC,OAAZ;AAIH;;AACDD,IAAAA,MAAM,CAACO,IAAP,CAAY;AACRC,MAAAA,IAAI,EAAET,OAAO,CAACW,SAAR,CAAkBT,UAAU,GAAG,CAA/B,EAAkCE,QAAlC,CADE;AAERM,MAAAA,KAAK,EAAEE;AAFC,KAAZ;AAIAP,IAAAA,SAAS,GAAGD,QAAQ,GAAG,CAAvB;AACAF,IAAAA,UAAU,GAAGF,OAAO,CAACG,OAAR,CAAgB,GAAhB,EAAqBE,SAArB,CAAb;AACH;;AACD,MAAIA,SAAS,GAAGC,MAAhB,EAAwB;AACpBL,IAAAA,MAAM,CAACO,IAAP,CAAY;AACRC,MAAAA,IAAI,EAAE,SADE;AAERC,MAAAA,KAAK,EAAEV,OAAO,CAACW,SAAR,CAAkBN,SAAlB,EAA6BC,MAA7B;AAFC,KAAZ;AAIH;;AACD,SAAOL,MAAP;AACH","sourcesContent":["import { invariant } from './utils';\n/**\n * https://tc39.es/ecma402/#sec-partitionpattern\n * @param pattern\n */\nexport function PartitionPattern(pattern) {\n    var result = [];\n    var beginIndex = pattern.indexOf('{');\n    var endIndex = 0;\n    var nextIndex = 0;\n    var length = pattern.length;\n    while (beginIndex < pattern.length && beginIndex > -1) {\n        endIndex = pattern.indexOf('}', beginIndex);\n        invariant(endIndex > beginIndex, \"Invalid pattern \".concat(pattern));\n        if (beginIndex > nextIndex) {\n            result.push({\n                type: 'literal',\n                value: pattern.substring(nextIndex, beginIndex),\n            });\n        }\n        result.push({\n            type: pattern.substring(beginIndex + 1, endIndex),\n            value: undefined,\n        });\n        nextIndex = endIndex + 1;\n        beginIndex = pattern.indexOf('{', nextIndex);\n    }\n    if (nextIndex < length) {\n        result.push({\n            type: 'literal',\n            value: pattern.substring(nextIndex, length),\n        });\n    }\n    return result;\n}\n"]},"metadata":{},"sourceType":"module"}