{"ast":null,"code":"import { clamp } from \"tsparticles-engine\";\n\nfunction checkDestroy(particle, value, minValue, maxValue) {\n  switch (particle.options.opacity.animation.destroy) {\n    case \"max\":\n      if (value >= maxValue) {\n        particle.destroy();\n      }\n\n      break;\n\n    case \"min\":\n      if (value <= minValue) {\n        particle.destroy();\n      }\n\n      break;\n  }\n}\n\nexport function updateOpacity(particle, delta) {\n  const data = particle.opacity;\n\n  if (particle.destroyed || !data?.enable || (data.maxLoops ?? 0) > 0 && (data.loops ?? 0) > (data.maxLoops ?? 0)) {\n    return;\n  }\n\n  const minValue = data.min,\n        maxValue = data.max,\n        decay = data.decay ?? 1;\n\n  if (!data.time) {\n    data.time = 0;\n  }\n\n  if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n    data.time += delta.value;\n  }\n\n  if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n    return;\n  }\n\n  switch (data.status) {\n    case \"increasing\":\n      if (data.value >= maxValue) {\n        data.status = \"decreasing\";\n\n        if (!data.loops) {\n          data.loops = 0;\n        }\n\n        data.loops++;\n      } else {\n        data.value += (data.velocity ?? 0) * delta.factor;\n      }\n\n      break;\n\n    case \"decreasing\":\n      if (data.value <= minValue) {\n        data.status = \"increasing\";\n\n        if (!data.loops) {\n          data.loops = 0;\n        }\n\n        data.loops++;\n      } else {\n        data.value -= (data.velocity ?? 0) * delta.factor;\n      }\n\n      break;\n  }\n\n  if (data.velocity && data.decay !== 1) {\n    data.velocity *= decay;\n  }\n\n  checkDestroy(particle, data.value, minValue, maxValue);\n\n  if (!particle.destroyed) {\n    data.value = clamp(data.value, minValue, maxValue);\n  }\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-updater-opacity/esm/Utils.js"],"names":["clamp","checkDestroy","particle","value","minValue","maxValue","options","opacity","animation","destroy","updateOpacity","delta","data","destroyed","enable","maxLoops","loops","min","max","decay","time","delayTime","status","velocity","factor"],"mappings":"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","sourcesContent":["import { clamp } from \"tsparticles-engine\";\nfunction checkDestroy(particle, value, minValue, maxValue) {\n    switch (particle.options.opacity.animation.destroy) {\n        case \"max\":\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case \"min\":\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nexport function updateOpacity(particle, delta) {\n    const data = particle.opacity;\n    if (particle.destroyed || !data?.enable || ((data.maxLoops ?? 0) > 0 && (data.loops ?? 0) > (data.maxLoops ?? 0))) {\n        return;\n    }\n    const minValue = data.min, maxValue = data.max, decay = data.decay ?? 1;\n    if (!data.time) {\n        data.time = 0;\n    }\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n        data.time += delta.value;\n    }\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n        return;\n    }\n    switch (data.status) {\n        case \"increasing\":\n            if (data.value >= maxValue) {\n                data.status = \"decreasing\";\n                if (!data.loops) {\n                    data.loops = 0;\n                }\n                data.loops++;\n            }\n            else {\n                data.value += (data.velocity ?? 0) * delta.factor;\n            }\n            break;\n        case \"decreasing\":\n            if (data.value <= minValue) {\n                data.status = \"increasing\";\n                if (!data.loops) {\n                    data.loops = 0;\n                }\n                data.loops++;\n            }\n            else {\n                data.value -= (data.velocity ?? 0) * delta.factor;\n            }\n            break;\n    }\n    if (data.velocity && data.decay !== 1) {\n        data.velocity *= decay;\n    }\n    checkDestroy(particle, data.value, minValue, maxValue);\n    if (!particle.destroyed) {\n        data.value = clamp(data.value, minValue, maxValue);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}