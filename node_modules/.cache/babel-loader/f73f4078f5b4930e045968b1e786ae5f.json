{"ast":null,"code":"import { ExternalInteractorBase, getDistance, getLinkColor, getLinkRandomColor, isInArray, mouseMoveEvent } from \"tsparticles-engine\";\nimport { Grab } from \"./Options/Classes/Grab\";\nimport { drawGrab } from \"./Utils\";\nexport class Grabber extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  clear() {}\n\n  init() {\n    const container = this.container,\n          grab = container.actualOptions.interactivity.modes.grab;\n\n    if (!grab) {\n      return;\n    }\n\n    container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n  }\n\n  async interact() {\n    const container = this.container,\n          options = container.actualOptions,\n          interactivity = options.interactivity;\n\n    if (!interactivity.modes.grab || !interactivity.events.onHover.enable || container.interactivity.status !== mouseMoveEvent) {\n      return;\n    }\n\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const distance = container.retina.grabModeDistance;\n\n    if (!distance || distance < 0) {\n      return;\n    }\n\n    const query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n\n    for (const particle of query) {\n      const pos = particle.getPosition(),\n            pointDistance = getDistance(pos, mousePos);\n\n      if (pointDistance > distance) {\n        continue;\n      }\n\n      const grabLineOptions = interactivity.modes.grab.links,\n            lineOpacity = grabLineOptions.opacity,\n            opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n\n      if (opacityLine <= 0) {\n        continue;\n      }\n\n      const optColor = grabLineOptions.color ?? particle.options.links?.color;\n\n      if (!container.particles.grabLineColor && optColor) {\n        const linksOptions = interactivity.modes.grab.links;\n        container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n      }\n\n      const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n\n      if (!colorLine) {\n        continue;\n      }\n\n      drawGrab(container, particle, colorLine, opacityLine, mousePos);\n    }\n  }\n\n  isEnabled(particle) {\n    const container = this.container,\n          mouse = container.interactivity.mouse,\n          events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n    return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n  }\n\n  loadModeOptions(options) {\n    if (!options.grab) {\n      options.grab = new Grab();\n    }\n\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    for (const source of sources) {\n      options.grab.load(source?.grab);\n    }\n  }\n\n  reset() {}\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-interaction-external-grab/esm/Grabber.js"],"names":["ExternalInteractorBase","getDistance","getLinkColor","getLinkRandomColor","isInArray","mouseMoveEvent","Grab","drawGrab","Grabber","constructor","container","clear","init","grab","actualOptions","interactivity","modes","retina","grabModeDistance","distance","pixelRatio","interact","options","events","onHover","enable","status","mousePos","mouse","position","query","particles","quadTree","queryCircle","p","isEnabled","particle","pos","getPosition","pointDistance","grabLineOptions","links","lineOpacity","opacity","opacityLine","optColor","color","grabLineColor","linksOptions","blink","consent","colorLine","undefined","mode","loadModeOptions","sources","source","load","reset"],"mappings":"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","sourcesContent":["import { ExternalInteractorBase, getDistance, getLinkColor, getLinkRandomColor, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nimport { Grab } from \"./Options/Classes/Grab\";\nimport { drawGrab } from \"./Utils\";\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, grab = container.actualOptions.interactivity.modes.grab;\n        if (!grab) {\n            return;\n        }\n        container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.modes.grab ||\n            !interactivity.events.onHover.enable ||\n            container.interactivity.status !== mouseMoveEvent) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance;\n        if (!distance || distance < 0) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= 0) {\n                continue;\n            }\n            const optColor = grabLineOptions.color ?? particle.options.links?.color;\n            if (!container.particles.grabLineColor && optColor) {\n                const linksOptions = interactivity.modes.grab.links;\n                container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                continue;\n            }\n            drawGrab(container, particle, colorLine, opacityLine, mousePos);\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.grab) {\n            options.grab = new Grab();\n        }\n        for (const source of sources) {\n            options.grab.load(source?.grab);\n        }\n    }\n    reset() {\n    }\n}\n"]},"metadata":{},"sourceType":"module"}