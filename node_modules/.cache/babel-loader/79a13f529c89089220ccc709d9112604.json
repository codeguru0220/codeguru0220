{"ast":null,"code":"import { getLogger, getPosition } from \"../Utils/Utils\";\nimport { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { errorPrefix } from \"./Utils/Constants\";\nconst qTreeCapacity = 4;\n\nconst qTreeRectangle = canvasSize => {\n  return new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2);\n};\n\nexport class Particles {\n  constructor(engine, container) {\n    this._applyDensity = (options, manualCount, group) => {\n      if (!options.number.density?.enable) {\n        return;\n      }\n\n      const numberOptions = options.number,\n            densityFactor = this._initDensityFactor(numberOptions.density),\n            optParticlesNumber = numberOptions.value,\n            optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber,\n            particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount,\n            particlesCount = Math.min(this.count, this.filter(t => t.group === group).length);\n\n      this.limit = numberOptions.limit * densityFactor;\n\n      if (particlesCount < particlesNumber) {\n        this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n      } else if (particlesCount > particlesNumber) {\n        this.removeQuantity(particlesCount - particlesNumber, group);\n      }\n    };\n\n    this._initDensityFactor = densityOptions => {\n      const container = this._container;\n\n      if (!container.canvas.element || !densityOptions.enable) {\n        return 1;\n      }\n\n      const canvas = container.canvas.element,\n            pxRatio = container.retina.pixelRatio;\n      return canvas.width * canvas.height / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n    };\n\n    this._pushParticle = (position, overrideOptions, group, initializer) => {\n      try {\n        let particle = this.pool.pop();\n\n        if (particle) {\n          particle.init(this._nextId, position, overrideOptions, group);\n        } else {\n          particle = new Particle(this._engine, this._nextId, this._container, position, overrideOptions, group);\n        }\n\n        let canAdd = true;\n\n        if (initializer) {\n          canAdd = initializer(particle);\n        }\n\n        if (!canAdd) {\n          return;\n        }\n\n        this._array.push(particle);\n\n        this._zArray.push(particle);\n\n        this._nextId++;\n\n        this._engine.dispatchEvent(\"particleAdded\", {\n          container: this._container,\n          data: {\n            particle\n          }\n        });\n\n        return particle;\n      } catch (e) {\n        getLogger().warning(`${errorPrefix} adding particle: ${e}`);\n        return;\n      }\n    };\n\n    this._removeParticle = (index, group, override) => {\n      const particle = this._array[index];\n\n      if (!particle || particle.group !== group) {\n        return false;\n      }\n\n      particle.destroy(override);\n\n      const zIdx = this._zArray.indexOf(particle);\n\n      this._array.splice(index, 1);\n\n      this._zArray.splice(zIdx, 1);\n\n      this.pool.push(particle);\n\n      this._engine.dispatchEvent(\"particleRemoved\", {\n        container: this._container,\n        data: {\n          particle\n        }\n      });\n\n      return true;\n    };\n\n    this._engine = engine;\n    this._container = container;\n    this._nextId = 0;\n    this._array = [];\n    this._zArray = [];\n    this.pool = [];\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this._interactionManager = new InteractionManager(engine, container);\n    const canvasSize = container.canvas.size;\n    this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n    this.movers = this._engine.plugins.getMovers(container, true);\n    this.updaters = this._engine.plugins.getUpdaters(container, true);\n  }\n\n  get count() {\n    return this._array.length;\n  }\n\n  addManualParticles() {\n    const container = this._container,\n          options = container.actualOptions;\n\n    for (const particle of options.manualParticles) {\n      this.addParticle(particle.position ? getPosition(particle.position, container.canvas.size) : undefined, particle.options);\n    }\n  }\n\n  addParticle(position, overrideOptions, group, initializer) {\n    const container = this._container,\n          options = container.actualOptions,\n          limit = options.particles.number.limit;\n\n    if (limit > 0) {\n      const countToRemove = this.count + 1 - limit;\n\n      if (countToRemove > 0) {\n        this.removeQuantity(countToRemove);\n      }\n    }\n\n    return this._pushParticle(position, overrideOptions, group, initializer);\n  }\n\n  clear() {\n    this._array = [];\n    this._zArray = [];\n  }\n\n  destroy() {\n    this._array = [];\n    this._zArray = [];\n    this.movers = [];\n    this.updaters = [];\n  }\n\n  async draw(delta) {\n    const container = this._container;\n    container.canvas.clear();\n    await this.update(delta);\n\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawPlugin(plugin, delta);\n    }\n\n    for (const p of this._zArray) {\n      p.draw(delta);\n    }\n  }\n\n  filter(condition) {\n    return this._array.filter(condition);\n  }\n\n  find(condition) {\n    return this._array.find(condition);\n  }\n\n  handleClickMode(mode) {\n    this._interactionManager.handleClickMode(mode);\n  }\n\n  init() {\n    const container = this._container,\n          options = container.actualOptions;\n    this.lastZIndex = 0;\n    this.needsSort = false;\n    let handled = false;\n    this.updaters = this._engine.plugins.getUpdaters(container, true);\n\n    this._interactionManager.init();\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    this._interactionManager.init();\n\n    for (const [, pathGenerator] of container.pathGenerators) {\n      pathGenerator.init(container);\n    }\n\n    this.addManualParticles();\n\n    if (!handled) {\n      for (const group in options.particles.groups) {\n        const groupOptions = options.particles.groups[group];\n\n        for (let i = this.count, j = 0; j < groupOptions.number?.value && i < options.particles.number.value; i++, j++) {\n          this.addParticle(undefined, groupOptions, group);\n        }\n      }\n\n      for (let i = this.count; i < options.particles.number.value; i++) {\n        this.addParticle();\n      }\n    }\n  }\n\n  push(nb, mouse, overrideOptions, group) {\n    this.pushing = true;\n\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse?.position, overrideOptions, group);\n    }\n\n    this.pushing = false;\n  }\n\n  async redraw() {\n    this.clear();\n    this.init();\n    await this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n\n  remove(particle, group, override) {\n    this.removeAt(this._array.indexOf(particle), undefined, group, override);\n  }\n\n  removeAt(index) {\n    let quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let group = arguments.length > 2 ? arguments[2] : undefined;\n    let override = arguments.length > 3 ? arguments[3] : undefined;\n\n    if (index < 0 || index > this.count) {\n      return;\n    }\n\n    let deleted = 0;\n\n    for (let i = index; deleted < quantity && i < this.count; i++) {\n      this._removeParticle(i--, group, override) && deleted++;\n    }\n  }\n\n  removeQuantity(quantity, group) {\n    this.removeAt(0, quantity, group);\n  }\n\n  setDensity() {\n    const options = this._container.actualOptions,\n          groups = options.particles.groups;\n\n    for (const group in groups) {\n      this._applyDensity(groups[group], 0, group);\n    }\n\n    this._applyDensity(options.particles, options.manualParticles.length);\n  }\n\n  async update(delta) {\n    const container = this._container,\n          particlesToDelete = new Set();\n    this.quadTree = new QuadTree(qTreeRectangle(container.canvas.size), qTreeCapacity);\n\n    for (const [, pathGenerator] of container.pathGenerators) {\n      pathGenerator.update();\n    }\n\n    for (const [, plugin] of container.plugins) {\n      plugin.update && plugin.update(delta);\n    }\n\n    for (const particle of this._array) {\n      const resizeFactor = container.canvas.resizeFactor;\n\n      if (resizeFactor && !particle.ignoresResizeRatio) {\n        particle.position.x *= resizeFactor.width;\n        particle.position.y *= resizeFactor.height;\n        particle.initialPosition.x *= resizeFactor.width;\n        particle.initialPosition.y *= resizeFactor.height;\n      }\n\n      particle.ignoresResizeRatio = false;\n      await this._interactionManager.reset(particle);\n\n      for (const [, plugin] of this._container.plugins) {\n        if (particle.destroyed) {\n          break;\n        }\n\n        if (plugin.particleUpdate) {\n          plugin.particleUpdate(particle, delta);\n        }\n      }\n\n      for (const mover of this.movers) {\n        mover.isEnabled(particle) && mover.move(particle, delta);\n      }\n\n      if (particle.destroyed) {\n        particlesToDelete.add(particle);\n        continue;\n      }\n\n      this.quadTree.insert(new Point(particle.getPosition(), particle));\n    }\n\n    if (particlesToDelete.size) {\n      const checkDelete = p => !particlesToDelete.has(p);\n\n      this._array = this.filter(checkDelete);\n      this._zArray = this._zArray.filter(checkDelete);\n      this.pool.push(...particlesToDelete);\n    }\n\n    await this._interactionManager.externalInteract(delta);\n\n    for (const particle of this._array) {\n      for (const updater of this.updaters) {\n        updater.update(particle, delta);\n      }\n\n      if (!particle.destroyed && !particle.spawning) {\n        await this._interactionManager.particlesInteract(particle, delta);\n      }\n    }\n\n    delete container.canvas.resizeFactor;\n\n    if (this.needsSort) {\n      const zArray = this._zArray;\n      zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n      this.lastZIndex = zArray[zArray.length - 1].position.z;\n      this.needsSort = false;\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-engine/esm/Core/Particles.js"],"names":["getLogger","getPosition","InteractionManager","Particle","Point","QuadTree","Rectangle","errorPrefix","qTreeCapacity","qTreeRectangle","canvasSize","width","height","Particles","constructor","engine","container","_applyDensity","options","manualCount","group","number","density","enable","numberOptions","densityFactor","_initDensityFactor","optParticlesNumber","value","optParticlesLimit","limit","particlesNumber","Math","min","particlesCount","count","filter","t","length","push","abs","undefined","removeQuantity","densityOptions","_container","canvas","element","pxRatio","retina","pixelRatio","factor","area","_pushParticle","position","overrideOptions","initializer","particle","pool","pop","init","_nextId","_engine","canAdd","_array","_zArray","dispatchEvent","data","e","warning","_removeParticle","index","override","destroy","zIdx","indexOf","splice","needsSort","lastZIndex","_interactionManager","size","quadTree","movers","plugins","getMovers","updaters","getUpdaters","addManualParticles","actualOptions","manualParticles","addParticle","particles","countToRemove","clear","draw","delta","update","plugin","drawPlugin","p","condition","find","handleClickMode","mode","handled","particlesInitialization","pathGenerator","pathGenerators","groups","groupOptions","i","j","nb","mouse","pushing","redraw","remove","removeAt","quantity","deleted","setDensity","particlesToDelete","Set","resizeFactor","ignoresResizeRatio","x","y","initialPosition","reset","destroyed","particleUpdate","mover","isEnabled","move","add","insert","checkDelete","has","externalInteract","updater","spawning","particlesInteract","zArray","sort","a","b","z","id"],"mappings":"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","sourcesContent":["import { getLogger, getPosition } from \"../Utils/Utils\";\nimport { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { errorPrefix } from \"./Utils/Constants\";\nconst qTreeCapacity = 4;\nconst qTreeRectangle = (canvasSize) => {\n    return new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2);\n};\nexport class Particles {\n    constructor(engine, container) {\n        this._applyDensity = (options, manualCount, group) => {\n            if (!options.number.density?.enable) {\n                return;\n            }\n            const numberOptions = options.number, densityFactor = this._initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this.filter((t) => t.group === group).length);\n            this.limit = numberOptions.limit * densityFactor;\n            if (particlesCount < particlesNumber) {\n                this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n            }\n            else if (particlesCount > particlesNumber) {\n                this.removeQuantity(particlesCount - particlesNumber, group);\n            }\n        };\n        this._initDensityFactor = (densityOptions) => {\n            const container = this._container;\n            if (!container.canvas.element || !densityOptions.enable) {\n                return 1;\n            }\n            const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n            return (canvas.width * canvas.height) / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n        };\n        this._pushParticle = (position, overrideOptions, group, initializer) => {\n            try {\n                let particle = this.pool.pop();\n                if (particle) {\n                    particle.init(this._nextId, position, overrideOptions, group);\n                }\n                else {\n                    particle = new Particle(this._engine, this._nextId, this._container, position, overrideOptions, group);\n                }\n                let canAdd = true;\n                if (initializer) {\n                    canAdd = initializer(particle);\n                }\n                if (!canAdd) {\n                    return;\n                }\n                this._array.push(particle);\n                this._zArray.push(particle);\n                this._nextId++;\n                this._engine.dispatchEvent(\"particleAdded\", {\n                    container: this._container,\n                    data: {\n                        particle,\n                    },\n                });\n                return particle;\n            }\n            catch (e) {\n                getLogger().warning(`${errorPrefix} adding particle: ${e}`);\n                return;\n            }\n        };\n        this._removeParticle = (index, group, override) => {\n            const particle = this._array[index];\n            if (!particle || particle.group !== group) {\n                return false;\n            }\n            particle.destroy(override);\n            const zIdx = this._zArray.indexOf(particle);\n            this._array.splice(index, 1);\n            this._zArray.splice(zIdx, 1);\n            this.pool.push(particle);\n            this._engine.dispatchEvent(\"particleRemoved\", {\n                container: this._container,\n                data: {\n                    particle,\n                },\n            });\n            return true;\n        };\n        this._engine = engine;\n        this._container = container;\n        this._nextId = 0;\n        this._array = [];\n        this._zArray = [];\n        this.pool = [];\n        this.limit = 0;\n        this.needsSort = false;\n        this.lastZIndex = 0;\n        this._interactionManager = new InteractionManager(engine, container);\n        const canvasSize = container.canvas.size;\n        this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n        this.movers = this._engine.plugins.getMovers(container, true);\n        this.updaters = this._engine.plugins.getUpdaters(container, true);\n    }\n    get count() {\n        return this._array.length;\n    }\n    addManualParticles() {\n        const container = this._container, options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            this.addParticle(particle.position ? getPosition(particle.position, container.canvas.size) : undefined, particle.options);\n        }\n    }\n    addParticle(position, overrideOptions, group, initializer) {\n        const container = this._container, options = container.actualOptions, limit = options.particles.number.limit;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this._pushParticle(position, overrideOptions, group, initializer);\n    }\n    clear() {\n        this._array = [];\n        this._zArray = [];\n    }\n    destroy() {\n        this._array = [];\n        this._zArray = [];\n        this.movers = [];\n        this.updaters = [];\n    }\n    async draw(delta) {\n        const container = this._container;\n        container.canvas.clear();\n        await this.update(delta);\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this._zArray) {\n            p.draw(delta);\n        }\n    }\n    filter(condition) {\n        return this._array.filter(condition);\n    }\n    find(condition) {\n        return this._array.find(condition);\n    }\n    handleClickMode(mode) {\n        this._interactionManager.handleClickMode(mode);\n    }\n    init() {\n        const container = this._container, options = container.actualOptions;\n        this.lastZIndex = 0;\n        this.needsSort = false;\n        let handled = false;\n        this.updaters = this._engine.plugins.getUpdaters(container, true);\n        this._interactionManager.init();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this._interactionManager.init();\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.init(container);\n        }\n        this.addManualParticles();\n        if (!handled) {\n            for (const group in options.particles.groups) {\n                const groupOptions = options.particles.groups[group];\n                for (let i = this.count, j = 0; j < groupOptions.number?.value && i < options.particles.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n    }\n    push(nb, mouse, overrideOptions, group) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse?.position, overrideOptions, group);\n        }\n        this.pushing = false;\n    }\n    async redraw() {\n        this.clear();\n        this.init();\n        await this.draw({ value: 0, factor: 0 });\n    }\n    remove(particle, group, override) {\n        this.removeAt(this._array.indexOf(particle), undefined, group, override);\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (index < 0 || index > this.count) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            this._removeParticle(i--, group, override) && deleted++;\n        }\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    setDensity() {\n        const options = this._container.actualOptions, groups = options.particles.groups;\n        for (const group in groups) {\n            this._applyDensity(groups[group], 0, group);\n        }\n        this._applyDensity(options.particles, options.manualParticles.length);\n    }\n    async update(delta) {\n        const container = this._container, particlesToDelete = new Set();\n        this.quadTree = new QuadTree(qTreeRectangle(container.canvas.size), qTreeCapacity);\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.update();\n        }\n        for (const [, plugin] of container.plugins) {\n            plugin.update && plugin.update(delta);\n        }\n        for (const particle of this._array) {\n            const resizeFactor = container.canvas.resizeFactor;\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n                particle.initialPosition.x *= resizeFactor.width;\n                particle.initialPosition.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            await this._interactionManager.reset(particle);\n            for (const [, plugin] of this._container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                if (plugin.particleUpdate) {\n                    plugin.particleUpdate(particle, delta);\n                }\n            }\n            for (const mover of this.movers) {\n                mover.isEnabled(particle) && mover.move(particle, delta);\n            }\n            if (particle.destroyed) {\n                particlesToDelete.add(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        if (particlesToDelete.size) {\n            const checkDelete = (p) => !particlesToDelete.has(p);\n            this._array = this.filter(checkDelete);\n            this._zArray = this._zArray.filter(checkDelete);\n            this.pool.push(...particlesToDelete);\n        }\n        await this._interactionManager.externalInteract(delta);\n        for (const particle of this._array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                await this._interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n        if (this.needsSort) {\n            const zArray = this._zArray;\n            zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this.lastZIndex = zArray[zArray.length - 1].position.z;\n            this.needsSort = false;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}