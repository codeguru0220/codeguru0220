{"ast":null,"code":"import React, { Component } from \"react\";\nimport { tsParticles } from \"tsparticles-engine\";\nimport { deepCompare } from \"./Utils\";\nconst defaultId = \"tsparticles\";\n\nclass Particles extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      init: false,\n      library: undefined\n    };\n  }\n\n  destroy() {\n    if (!this.state.library) {\n      return;\n    }\n\n    this.state.library.destroy();\n    this.setState({\n      library: undefined\n    });\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const nextOptions = nextProps.options ?? nextProps.params,\n          currentOptions = this.props.options ?? this.props.params;\n    return nextProps.url !== this.props.url || nextProps.id !== this.props.id || nextProps.canvasClassName !== this.props.canvasClassName || nextProps.className !== this.props.className || nextProps.height !== this.props.height || nextProps.width !== this.props.width || !deepCompare(nextProps.style, this.props.style) || nextProps.init !== this.props.init || nextProps.loaded !== this.props.loaded || !deepCompare(nextOptions, currentOptions, key => key.startsWith(\"_\"));\n  }\n\n  componentDidUpdate() {\n    this.refresh();\n  }\n\n  forceUpdate() {\n    this.refresh().then(() => {\n      super.forceUpdate();\n    });\n  }\n\n  componentDidMount() {\n    (async () => {\n      if (this.props.init) {\n        await this.props.init(tsParticles);\n      }\n\n      this.setState({\n        init: true\n      }, async () => {\n        await this.loadParticles();\n      });\n    })();\n  }\n\n  componentWillUnmount() {\n    this.destroy();\n  }\n\n  render() {\n    const {\n      width,\n      height,\n      className,\n      canvasClassName,\n      id\n    } = this.props;\n    return React.createElement(\"div\", {\n      className: className,\n      id: id\n    }, React.createElement(\"canvas\", {\n      className: canvasClassName,\n      style: { ...this.props.style,\n        width,\n        height\n      }\n    }));\n  }\n\n  async refresh() {\n    this.destroy();\n    await this.loadParticles();\n  }\n\n  async loadParticles() {\n    if (!this.state.init) {\n      return;\n    }\n\n    const id = this.props.id ?? Particles.defaultProps.id ?? defaultId,\n          container = await tsParticles.load({\n      url: this.props.url,\n      id,\n      options: this.props.options ?? this.props.params\n    });\n\n    if (this.props.container) {\n      this.props.container.current = container;\n    }\n\n    this.setState({\n      library: container\n    });\n\n    if (this.props.loaded) {\n      await this.props.loaded(container);\n    }\n  }\n\n}\n\nParticles.defaultProps = {\n  width: \"100%\",\n  height: \"100%\",\n  options: {},\n  style: {},\n  url: undefined,\n  id: defaultId\n};\nexport default Particles;","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/react-tsparticles/esm/Particles.js"],"names":["React","Component","tsParticles","deepCompare","defaultId","Particles","constructor","props","state","init","library","undefined","destroy","setState","shouldComponentUpdate","nextProps","nextOptions","options","params","currentOptions","url","id","canvasClassName","className","height","width","style","loaded","key","startsWith","componentDidUpdate","refresh","forceUpdate","then","componentDidMount","loadParticles","componentWillUnmount","render","createElement","defaultProps","container","load","current"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { tsParticles } from \"tsparticles-engine\";\nimport { deepCompare } from \"./Utils\";\nconst defaultId = \"tsparticles\";\nclass Particles extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            init: false,\n            library: undefined,\n        };\n    }\n    destroy() {\n        if (!this.state.library) {\n            return;\n        }\n        this.state.library.destroy();\n        this.setState({\n            library: undefined,\n        });\n    }\n    shouldComponentUpdate(nextProps) {\n        const nextOptions = nextProps.options ?? nextProps.params, currentOptions = this.props.options ?? this.props.params;\n        return (nextProps.url !== this.props.url ||\n            nextProps.id !== this.props.id ||\n            nextProps.canvasClassName !== this.props.canvasClassName ||\n            nextProps.className !== this.props.className ||\n            nextProps.height !== this.props.height ||\n            nextProps.width !== this.props.width ||\n            !deepCompare(nextProps.style, this.props.style) ||\n            nextProps.init !== this.props.init ||\n            nextProps.loaded !== this.props.loaded ||\n            !deepCompare(nextOptions, currentOptions, key => key.startsWith(\"_\")));\n    }\n    componentDidUpdate() {\n        this.refresh();\n    }\n    forceUpdate() {\n        this.refresh().then(() => {\n            super.forceUpdate();\n        });\n    }\n    componentDidMount() {\n        (async () => {\n            if (this.props.init) {\n                await this.props.init(tsParticles);\n            }\n            this.setState({\n                init: true,\n            }, async () => {\n                await this.loadParticles();\n            });\n        })();\n    }\n    componentWillUnmount() {\n        this.destroy();\n    }\n    render() {\n        const { width, height, className, canvasClassName, id } = this.props;\n        return (React.createElement(\"div\", { className: className, id: id },\n            React.createElement(\"canvas\", { className: canvasClassName, style: {\n                    ...this.props.style,\n                    width,\n                    height,\n                } })));\n    }\n    async refresh() {\n        this.destroy();\n        await this.loadParticles();\n    }\n    async loadParticles() {\n        if (!this.state.init) {\n            return;\n        }\n        const id = this.props.id ?? Particles.defaultProps.id ?? defaultId, container = await tsParticles.load({\n            url: this.props.url,\n            id,\n            options: this.props.options ?? this.props.params,\n        });\n        if (this.props.container) {\n            this.props.container.current = container;\n        }\n        this.setState({\n            library: container,\n        });\n        if (this.props.loaded) {\n            await this.props.loaded(container);\n        }\n    }\n}\nParticles.defaultProps = {\n    width: \"100%\",\n    height: \"100%\",\n    options: {},\n    style: {},\n    url: undefined,\n    id: defaultId,\n};\nexport default Particles;\n"]},"metadata":{},"sourceType":"module"}