{"ast":null,"code":"import { executeOnSingleOrMultiple, isBoolean, safeMatchMedia } from \"../../Utils/Utils\";\nimport { mouseDownEvent, mouseLeaveEvent, mouseMoveEvent, mouseOutEvent, mouseUpEvent, resizeEvent, touchCancelEvent, touchEndEvent, touchMoveEvent, touchStartEvent, visibilityChangeEvent } from \"./Constants\";\n\nfunction manageListener(element, event, handler, add, options) {\n  if (add) {\n    let addOptions = {\n      passive: true\n    };\n\n    if (isBoolean(options)) {\n      addOptions.capture = options;\n    } else if (options !== undefined) {\n      addOptions = options;\n    }\n\n    element.addEventListener(event, handler, addOptions);\n  } else {\n    const removeOptions = options;\n    element.removeEventListener(event, handler, removeOptions);\n  }\n}\n\nexport class EventListeners {\n  constructor(container) {\n    this.container = container;\n\n    this._doMouseTouchClick = e => {\n      const container = this.container,\n            options = container.actualOptions;\n\n      if (this._canPush) {\n        const mouseInteractivity = container.interactivity.mouse,\n              mousePos = mouseInteractivity.position;\n\n        if (!mousePos) {\n          return;\n        }\n\n        mouseInteractivity.clickPosition = { ...mousePos\n        };\n        mouseInteractivity.clickTime = new Date().getTime();\n        const onClick = options.interactivity.events.onClick;\n        executeOnSingleOrMultiple(onClick.mode, mode => this.container.handleClickMode(mode));\n      }\n\n      if (e.type === \"touchend\") {\n        setTimeout(() => this._mouseTouchFinish(), 500);\n      }\n    };\n\n    this._handleThemeChange = e => {\n      const mediaEvent = e,\n            container = this.container,\n            options = container.options,\n            defaultThemes = options.defaultThemes,\n            themeName = mediaEvent.matches ? defaultThemes.dark : defaultThemes.light,\n            theme = options.themes.find(theme => theme.name === themeName);\n\n      if (theme && theme.default.auto) {\n        container.loadTheme(themeName);\n      }\n    };\n\n    this._handleVisibilityChange = () => {\n      const container = this.container,\n            options = container.actualOptions;\n\n      this._mouseTouchFinish();\n\n      if (!options.pauseOnBlur) {\n        return;\n      }\n\n      if (document && document.hidden) {\n        container.pageHidden = true;\n        container.pause();\n      } else {\n        container.pageHidden = false;\n\n        if (container.getAnimationStatus()) {\n          container.play(true);\n        } else {\n          container.draw(true);\n        }\n      }\n    };\n\n    this._handleWindowResize = async () => {\n      if (this._resizeTimeout) {\n        clearTimeout(this._resizeTimeout);\n        delete this._resizeTimeout;\n      }\n\n      this._resizeTimeout = setTimeout(async () => {\n        const canvas = this.container.canvas;\n        canvas && (await canvas.windowResize());\n      }, this.container.actualOptions.interactivity.events.resize.delay * 1000);\n    };\n\n    this._manageInteractivityListeners = (mouseLeaveTmpEvent, add) => {\n      const handlers = this._handlers,\n            container = this.container,\n            options = container.actualOptions;\n      const interactivityEl = container.interactivity.element;\n\n      if (!interactivityEl) {\n        return;\n      }\n\n      const html = interactivityEl,\n            canvasEl = container.canvas.element;\n\n      if (canvasEl) {\n        canvasEl.style.pointerEvents = html === canvasEl ? \"initial\" : \"none\";\n      }\n\n      if (!(options.interactivity.events.onHover.enable || options.interactivity.events.onClick.enable)) {\n        return;\n      }\n\n      manageListener(interactivityEl, mouseMoveEvent, handlers.mouseMove, add);\n      manageListener(interactivityEl, touchStartEvent, handlers.touchStart, add);\n      manageListener(interactivityEl, touchMoveEvent, handlers.touchMove, add);\n\n      if (!options.interactivity.events.onClick.enable) {\n        manageListener(interactivityEl, touchEndEvent, handlers.touchEnd, add);\n      } else {\n        manageListener(interactivityEl, touchEndEvent, handlers.touchEndClick, add);\n        manageListener(interactivityEl, mouseUpEvent, handlers.mouseUp, add);\n        manageListener(interactivityEl, mouseDownEvent, handlers.mouseDown, add);\n      }\n\n      manageListener(interactivityEl, mouseLeaveTmpEvent, handlers.mouseLeave, add);\n      manageListener(interactivityEl, touchCancelEvent, handlers.touchCancel, add);\n    };\n\n    this._manageListeners = add => {\n      const handlers = this._handlers,\n            container = this.container,\n            options = container.actualOptions,\n            detectType = options.interactivity.detectsOn,\n            canvasEl = container.canvas.element;\n      let mouseLeaveTmpEvent = mouseLeaveEvent;\n\n      if (detectType === \"window\") {\n        container.interactivity.element = window;\n        mouseLeaveTmpEvent = mouseOutEvent;\n      } else if (detectType === \"parent\" && canvasEl) {\n        container.interactivity.element = canvasEl.parentElement ?? canvasEl.parentNode;\n      } else {\n        container.interactivity.element = canvasEl;\n      }\n\n      this._manageMediaMatch(add);\n\n      this._manageResize(add);\n\n      this._manageInteractivityListeners(mouseLeaveTmpEvent, add);\n\n      if (document) {\n        manageListener(document, visibilityChangeEvent, handlers.visibilityChange, add, false);\n      }\n    };\n\n    this._manageMediaMatch = add => {\n      const handlers = this._handlers,\n            mediaMatch = safeMatchMedia(\"(prefers-color-scheme: dark)\");\n\n      if (!mediaMatch) {\n        return;\n      }\n\n      if (mediaMatch.addEventListener !== undefined) {\n        manageListener(mediaMatch, \"change\", handlers.themeChange, add);\n        return;\n      }\n\n      if (mediaMatch.addListener === undefined) {\n        return;\n      }\n\n      if (add) {\n        mediaMatch.addListener(handlers.oldThemeChange);\n      } else {\n        mediaMatch.removeListener(handlers.oldThemeChange);\n      }\n    };\n\n    this._manageResize = add => {\n      const handlers = this._handlers,\n            container = this.container,\n            options = container.actualOptions;\n\n      if (!options.interactivity.events.resize) {\n        return;\n      }\n\n      if (typeof ResizeObserver === \"undefined\") {\n        manageListener(window, resizeEvent, handlers.resize, add);\n        return;\n      }\n\n      const canvasEl = container.canvas.element;\n\n      if (this._resizeObserver && !add) {\n        if (canvasEl) {\n          this._resizeObserver.unobserve(canvasEl);\n        }\n\n        this._resizeObserver.disconnect();\n\n        delete this._resizeObserver;\n      } else if (!this._resizeObserver && add && canvasEl) {\n        this._resizeObserver = new ResizeObserver(async entries => {\n          const entry = entries.find(e => e.target === canvasEl);\n\n          if (!entry) {\n            return;\n          }\n\n          await this._handleWindowResize();\n        });\n\n        this._resizeObserver.observe(canvasEl);\n      }\n    };\n\n    this._mouseDown = () => {\n      const {\n        interactivity\n      } = this.container;\n\n      if (!interactivity) {\n        return;\n      }\n\n      const {\n        mouse\n      } = interactivity;\n      mouse.clicking = true;\n      mouse.downPosition = mouse.position;\n    };\n\n    this._mouseTouchClick = e => {\n      const container = this.container,\n            options = container.actualOptions,\n            {\n        mouse\n      } = container.interactivity;\n      mouse.inside = true;\n      let handled = false;\n      const mousePosition = mouse.position;\n\n      if (!mousePosition || !options.interactivity.events.onClick.enable) {\n        return;\n      }\n\n      for (const [, plugin] of container.plugins) {\n        if (!plugin.clickPositionValid) {\n          continue;\n        }\n\n        handled = plugin.clickPositionValid(mousePosition);\n\n        if (handled) {\n          break;\n        }\n      }\n\n      if (!handled) {\n        this._doMouseTouchClick(e);\n      }\n\n      mouse.clicking = false;\n    };\n\n    this._mouseTouchFinish = () => {\n      const interactivity = this.container.interactivity;\n\n      if (!interactivity) {\n        return;\n      }\n\n      const mouse = interactivity.mouse;\n      delete mouse.position;\n      delete mouse.clickPosition;\n      delete mouse.downPosition;\n      interactivity.status = mouseLeaveEvent;\n      mouse.inside = false;\n      mouse.clicking = false;\n    };\n\n    this._mouseTouchMove = e => {\n      const container = this.container,\n            options = container.actualOptions,\n            interactivity = container.interactivity,\n            canvasEl = container.canvas.element;\n\n      if (!interactivity || !interactivity.element) {\n        return;\n      }\n\n      interactivity.mouse.inside = true;\n      let pos;\n\n      if (e.type.startsWith(\"pointer\")) {\n        this._canPush = true;\n        const mouseEvent = e;\n\n        if (interactivity.element === window) {\n          if (canvasEl) {\n            const clientRect = canvasEl.getBoundingClientRect();\n            pos = {\n              x: mouseEvent.clientX - clientRect.left,\n              y: mouseEvent.clientY - clientRect.top\n            };\n          }\n        } else if (options.interactivity.detectsOn === \"parent\") {\n          const source = mouseEvent.target,\n                target = mouseEvent.currentTarget;\n\n          if (source && target && canvasEl) {\n            const sourceRect = source.getBoundingClientRect(),\n                  targetRect = target.getBoundingClientRect(),\n                  canvasRect = canvasEl.getBoundingClientRect();\n            pos = {\n              x: mouseEvent.offsetX + 2 * sourceRect.left - (targetRect.left + canvasRect.left),\n              y: mouseEvent.offsetY + 2 * sourceRect.top - (targetRect.top + canvasRect.top)\n            };\n          } else {\n            pos = {\n              x: mouseEvent.offsetX ?? mouseEvent.clientX,\n              y: mouseEvent.offsetY ?? mouseEvent.clientY\n            };\n          }\n        } else if (mouseEvent.target === canvasEl) {\n          pos = {\n            x: mouseEvent.offsetX ?? mouseEvent.clientX,\n            y: mouseEvent.offsetY ?? mouseEvent.clientY\n          };\n        }\n      } else {\n        this._canPush = e.type !== \"touchmove\";\n\n        if (canvasEl) {\n          const touchEvent = e,\n                lastTouch = touchEvent.touches[touchEvent.touches.length - 1],\n                canvasRect = canvasEl.getBoundingClientRect();\n          pos = {\n            x: lastTouch.clientX - (canvasRect.left ?? 0),\n            y: lastTouch.clientY - (canvasRect.top ?? 0)\n          };\n        }\n      }\n\n      const pxRatio = container.retina.pixelRatio;\n\n      if (pos) {\n        pos.x *= pxRatio;\n        pos.y *= pxRatio;\n      }\n\n      interactivity.mouse.position = pos;\n      interactivity.status = mouseMoveEvent;\n    };\n\n    this._touchEnd = e => {\n      const evt = e,\n            touches = Array.from(evt.changedTouches);\n\n      for (const touch of touches) {\n        this._touches.delete(touch.identifier);\n      }\n\n      this._mouseTouchFinish();\n    };\n\n    this._touchEndClick = e => {\n      const evt = e,\n            touches = Array.from(evt.changedTouches);\n\n      for (const touch of touches) {\n        this._touches.delete(touch.identifier);\n      }\n\n      this._mouseTouchClick(e);\n    };\n\n    this._touchStart = e => {\n      const evt = e,\n            touches = Array.from(evt.changedTouches);\n\n      for (const touch of touches) {\n        this._touches.set(touch.identifier, performance.now());\n      }\n\n      this._mouseTouchMove(e);\n    };\n\n    this._canPush = true;\n    this._touches = new Map();\n    this._handlers = {\n      mouseDown: () => this._mouseDown(),\n      mouseLeave: () => this._mouseTouchFinish(),\n      mouseMove: e => this._mouseTouchMove(e),\n      mouseUp: e => this._mouseTouchClick(e),\n      touchStart: e => this._touchStart(e),\n      touchMove: e => this._mouseTouchMove(e),\n      touchEnd: e => this._touchEnd(e),\n      touchCancel: e => this._touchEnd(e),\n      touchEndClick: e => this._touchEndClick(e),\n      visibilityChange: () => this._handleVisibilityChange(),\n      themeChange: e => this._handleThemeChange(e),\n      oldThemeChange: e => this._handleThemeChange(e),\n      resize: () => {\n        this._handleWindowResize();\n      }\n    };\n  }\n\n  addListeners() {\n    this._manageListeners(true);\n  }\n\n  removeListeners() {\n    this._manageListeners(false);\n  }\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-engine/esm/Core/Utils/EventListeners.js"],"names":["executeOnSingleOrMultiple","isBoolean","safeMatchMedia","mouseDownEvent","mouseLeaveEvent","mouseMoveEvent","mouseOutEvent","mouseUpEvent","resizeEvent","touchCancelEvent","touchEndEvent","touchMoveEvent","touchStartEvent","visibilityChangeEvent","manageListener","element","event","handler","add","options","addOptions","passive","capture","undefined","addEventListener","removeOptions","removeEventListener","EventListeners","constructor","container","_doMouseTouchClick","e","actualOptions","_canPush","mouseInteractivity","interactivity","mouse","mousePos","position","clickPosition","clickTime","Date","getTime","onClick","events","mode","handleClickMode","type","setTimeout","_mouseTouchFinish","_handleThemeChange","mediaEvent","defaultThemes","themeName","matches","dark","light","theme","themes","find","name","default","auto","loadTheme","_handleVisibilityChange","pauseOnBlur","document","hidden","pageHidden","pause","getAnimationStatus","play","draw","_handleWindowResize","_resizeTimeout","clearTimeout","canvas","windowResize","resize","delay","_manageInteractivityListeners","mouseLeaveTmpEvent","handlers","_handlers","interactivityEl","html","canvasEl","style","pointerEvents","onHover","enable","mouseMove","touchStart","touchMove","touchEnd","touchEndClick","mouseUp","mouseDown","mouseLeave","touchCancel","_manageListeners","detectType","detectsOn","window","parentElement","parentNode","_manageMediaMatch","_manageResize","visibilityChange","mediaMatch","themeChange","addListener","oldThemeChange","removeListener","ResizeObserver","_resizeObserver","unobserve","disconnect","entries","entry","target","observe","_mouseDown","clicking","downPosition","_mouseTouchClick","inside","handled","mousePosition","plugin","plugins","clickPositionValid","status","_mouseTouchMove","pos","startsWith","mouseEvent","clientRect","getBoundingClientRect","x","clientX","left","y","clientY","top","source","currentTarget","sourceRect","targetRect","canvasRect","offsetX","offsetY","touchEvent","lastTouch","touches","length","pxRatio","retina","pixelRatio","_touchEnd","evt","Array","from","changedTouches","touch","_touches","delete","identifier","_touchEndClick","_touchStart","set","performance","now","Map","addListeners","removeListeners"],"mappings":"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","sourcesContent":["import { executeOnSingleOrMultiple, isBoolean, safeMatchMedia } from \"../../Utils/Utils\";\nimport { mouseDownEvent, mouseLeaveEvent, mouseMoveEvent, mouseOutEvent, mouseUpEvent, resizeEvent, touchCancelEvent, touchEndEvent, touchMoveEvent, touchStartEvent, visibilityChangeEvent, } from \"./Constants\";\nfunction manageListener(element, event, handler, add, options) {\n    if (add) {\n        let addOptions = { passive: true };\n        if (isBoolean(options)) {\n            addOptions.capture = options;\n        }\n        else if (options !== undefined) {\n            addOptions = options;\n        }\n        element.addEventListener(event, handler, addOptions);\n    }\n    else {\n        const removeOptions = options;\n        element.removeEventListener(event, handler, removeOptions);\n    }\n}\nexport class EventListeners {\n    constructor(container) {\n        this.container = container;\n        this._doMouseTouchClick = (e) => {\n            const container = this.container, options = container.actualOptions;\n            if (this._canPush) {\n                const mouseInteractivity = container.interactivity.mouse, mousePos = mouseInteractivity.position;\n                if (!mousePos) {\n                    return;\n                }\n                mouseInteractivity.clickPosition = { ...mousePos };\n                mouseInteractivity.clickTime = new Date().getTime();\n                const onClick = options.interactivity.events.onClick;\n                executeOnSingleOrMultiple(onClick.mode, (mode) => this.container.handleClickMode(mode));\n            }\n            if (e.type === \"touchend\") {\n                setTimeout(() => this._mouseTouchFinish(), 500);\n            }\n        };\n        this._handleThemeChange = (e) => {\n            const mediaEvent = e, container = this.container, options = container.options, defaultThemes = options.defaultThemes, themeName = mediaEvent.matches ? defaultThemes.dark : defaultThemes.light, theme = options.themes.find((theme) => theme.name === themeName);\n            if (theme && theme.default.auto) {\n                container.loadTheme(themeName);\n            }\n        };\n        this._handleVisibilityChange = () => {\n            const container = this.container, options = container.actualOptions;\n            this._mouseTouchFinish();\n            if (!options.pauseOnBlur) {\n                return;\n            }\n            if (document && document.hidden) {\n                container.pageHidden = true;\n                container.pause();\n            }\n            else {\n                container.pageHidden = false;\n                if (container.getAnimationStatus()) {\n                    container.play(true);\n                }\n                else {\n                    container.draw(true);\n                }\n            }\n        };\n        this._handleWindowResize = async () => {\n            if (this._resizeTimeout) {\n                clearTimeout(this._resizeTimeout);\n                delete this._resizeTimeout;\n            }\n            this._resizeTimeout = setTimeout(async () => {\n                const canvas = this.container.canvas;\n                canvas && (await canvas.windowResize());\n            }, this.container.actualOptions.interactivity.events.resize.delay * 1000);\n        };\n        this._manageInteractivityListeners = (mouseLeaveTmpEvent, add) => {\n            const handlers = this._handlers, container = this.container, options = container.actualOptions;\n            const interactivityEl = container.interactivity.element;\n            if (!interactivityEl) {\n                return;\n            }\n            const html = interactivityEl, canvasEl = container.canvas.element;\n            if (canvasEl) {\n                canvasEl.style.pointerEvents = html === canvasEl ? \"initial\" : \"none\";\n            }\n            if (!(options.interactivity.events.onHover.enable || options.interactivity.events.onClick.enable)) {\n                return;\n            }\n            manageListener(interactivityEl, mouseMoveEvent, handlers.mouseMove, add);\n            manageListener(interactivityEl, touchStartEvent, handlers.touchStart, add);\n            manageListener(interactivityEl, touchMoveEvent, handlers.touchMove, add);\n            if (!options.interactivity.events.onClick.enable) {\n                manageListener(interactivityEl, touchEndEvent, handlers.touchEnd, add);\n            }\n            else {\n                manageListener(interactivityEl, touchEndEvent, handlers.touchEndClick, add);\n                manageListener(interactivityEl, mouseUpEvent, handlers.mouseUp, add);\n                manageListener(interactivityEl, mouseDownEvent, handlers.mouseDown, add);\n            }\n            manageListener(interactivityEl, mouseLeaveTmpEvent, handlers.mouseLeave, add);\n            manageListener(interactivityEl, touchCancelEvent, handlers.touchCancel, add);\n        };\n        this._manageListeners = (add) => {\n            const handlers = this._handlers, container = this.container, options = container.actualOptions, detectType = options.interactivity.detectsOn, canvasEl = container.canvas.element;\n            let mouseLeaveTmpEvent = mouseLeaveEvent;\n            if (detectType === \"window\") {\n                container.interactivity.element = window;\n                mouseLeaveTmpEvent = mouseOutEvent;\n            }\n            else if (detectType === \"parent\" && canvasEl) {\n                container.interactivity.element = canvasEl.parentElement ?? canvasEl.parentNode;\n            }\n            else {\n                container.interactivity.element = canvasEl;\n            }\n            this._manageMediaMatch(add);\n            this._manageResize(add);\n            this._manageInteractivityListeners(mouseLeaveTmpEvent, add);\n            if (document) {\n                manageListener(document, visibilityChangeEvent, handlers.visibilityChange, add, false);\n            }\n        };\n        this._manageMediaMatch = (add) => {\n            const handlers = this._handlers, mediaMatch = safeMatchMedia(\"(prefers-color-scheme: dark)\");\n            if (!mediaMatch) {\n                return;\n            }\n            if (mediaMatch.addEventListener !== undefined) {\n                manageListener(mediaMatch, \"change\", handlers.themeChange, add);\n                return;\n            }\n            if (mediaMatch.addListener === undefined) {\n                return;\n            }\n            if (add) {\n                mediaMatch.addListener(handlers.oldThemeChange);\n            }\n            else {\n                mediaMatch.removeListener(handlers.oldThemeChange);\n            }\n        };\n        this._manageResize = (add) => {\n            const handlers = this._handlers, container = this.container, options = container.actualOptions;\n            if (!options.interactivity.events.resize) {\n                return;\n            }\n            if (typeof ResizeObserver === \"undefined\") {\n                manageListener(window, resizeEvent, handlers.resize, add);\n                return;\n            }\n            const canvasEl = container.canvas.element;\n            if (this._resizeObserver && !add) {\n                if (canvasEl) {\n                    this._resizeObserver.unobserve(canvasEl);\n                }\n                this._resizeObserver.disconnect();\n                delete this._resizeObserver;\n            }\n            else if (!this._resizeObserver && add && canvasEl) {\n                this._resizeObserver = new ResizeObserver(async (entries) => {\n                    const entry = entries.find((e) => e.target === canvasEl);\n                    if (!entry) {\n                        return;\n                    }\n                    await this._handleWindowResize();\n                });\n                this._resizeObserver.observe(canvasEl);\n            }\n        };\n        this._mouseDown = () => {\n            const { interactivity } = this.container;\n            if (!interactivity) {\n                return;\n            }\n            const { mouse } = interactivity;\n            mouse.clicking = true;\n            mouse.downPosition = mouse.position;\n        };\n        this._mouseTouchClick = (e) => {\n            const container = this.container, options = container.actualOptions, { mouse } = container.interactivity;\n            mouse.inside = true;\n            let handled = false;\n            const mousePosition = mouse.position;\n            if (!mousePosition || !options.interactivity.events.onClick.enable) {\n                return;\n            }\n            for (const [, plugin] of container.plugins) {\n                if (!plugin.clickPositionValid) {\n                    continue;\n                }\n                handled = plugin.clickPositionValid(mousePosition);\n                if (handled) {\n                    break;\n                }\n            }\n            if (!handled) {\n                this._doMouseTouchClick(e);\n            }\n            mouse.clicking = false;\n        };\n        this._mouseTouchFinish = () => {\n            const interactivity = this.container.interactivity;\n            if (!interactivity) {\n                return;\n            }\n            const mouse = interactivity.mouse;\n            delete mouse.position;\n            delete mouse.clickPosition;\n            delete mouse.downPosition;\n            interactivity.status = mouseLeaveEvent;\n            mouse.inside = false;\n            mouse.clicking = false;\n        };\n        this._mouseTouchMove = (e) => {\n            const container = this.container, options = container.actualOptions, interactivity = container.interactivity, canvasEl = container.canvas.element;\n            if (!interactivity || !interactivity.element) {\n                return;\n            }\n            interactivity.mouse.inside = true;\n            let pos;\n            if (e.type.startsWith(\"pointer\")) {\n                this._canPush = true;\n                const mouseEvent = e;\n                if (interactivity.element === window) {\n                    if (canvasEl) {\n                        const clientRect = canvasEl.getBoundingClientRect();\n                        pos = {\n                            x: mouseEvent.clientX - clientRect.left,\n                            y: mouseEvent.clientY - clientRect.top,\n                        };\n                    }\n                }\n                else if (options.interactivity.detectsOn === \"parent\") {\n                    const source = mouseEvent.target, target = mouseEvent.currentTarget;\n                    if (source && target && canvasEl) {\n                        const sourceRect = source.getBoundingClientRect(), targetRect = target.getBoundingClientRect(), canvasRect = canvasEl.getBoundingClientRect();\n                        pos = {\n                            x: mouseEvent.offsetX + 2 * sourceRect.left - (targetRect.left + canvasRect.left),\n                            y: mouseEvent.offsetY + 2 * sourceRect.top - (targetRect.top + canvasRect.top),\n                        };\n                    }\n                    else {\n                        pos = {\n                            x: mouseEvent.offsetX ?? mouseEvent.clientX,\n                            y: mouseEvent.offsetY ?? mouseEvent.clientY,\n                        };\n                    }\n                }\n                else if (mouseEvent.target === canvasEl) {\n                    pos = {\n                        x: mouseEvent.offsetX ?? mouseEvent.clientX,\n                        y: mouseEvent.offsetY ?? mouseEvent.clientY,\n                    };\n                }\n            }\n            else {\n                this._canPush = e.type !== \"touchmove\";\n                if (canvasEl) {\n                    const touchEvent = e, lastTouch = touchEvent.touches[touchEvent.touches.length - 1], canvasRect = canvasEl.getBoundingClientRect();\n                    pos = {\n                        x: lastTouch.clientX - (canvasRect.left ?? 0),\n                        y: lastTouch.clientY - (canvasRect.top ?? 0),\n                    };\n                }\n            }\n            const pxRatio = container.retina.pixelRatio;\n            if (pos) {\n                pos.x *= pxRatio;\n                pos.y *= pxRatio;\n            }\n            interactivity.mouse.position = pos;\n            interactivity.status = mouseMoveEvent;\n        };\n        this._touchEnd = (e) => {\n            const evt = e, touches = Array.from(evt.changedTouches);\n            for (const touch of touches) {\n                this._touches.delete(touch.identifier);\n            }\n            this._mouseTouchFinish();\n        };\n        this._touchEndClick = (e) => {\n            const evt = e, touches = Array.from(evt.changedTouches);\n            for (const touch of touches) {\n                this._touches.delete(touch.identifier);\n            }\n            this._mouseTouchClick(e);\n        };\n        this._touchStart = (e) => {\n            const evt = e, touches = Array.from(evt.changedTouches);\n            for (const touch of touches) {\n                this._touches.set(touch.identifier, performance.now());\n            }\n            this._mouseTouchMove(e);\n        };\n        this._canPush = true;\n        this._touches = new Map();\n        this._handlers = {\n            mouseDown: () => this._mouseDown(),\n            mouseLeave: () => this._mouseTouchFinish(),\n            mouseMove: (e) => this._mouseTouchMove(e),\n            mouseUp: (e) => this._mouseTouchClick(e),\n            touchStart: (e) => this._touchStart(e),\n            touchMove: (e) => this._mouseTouchMove(e),\n            touchEnd: (e) => this._touchEnd(e),\n            touchCancel: (e) => this._touchEnd(e),\n            touchEndClick: (e) => this._touchEndClick(e),\n            visibilityChange: () => this._handleVisibilityChange(),\n            themeChange: (e) => this._handleThemeChange(e),\n            oldThemeChange: (e) => this._handleThemeChange(e),\n            resize: () => {\n                this._handleWindowResize();\n            },\n        };\n    }\n    addListeners() {\n        this._manageListeners(true);\n    }\n    removeListeners() {\n        this._manageListeners(false);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}