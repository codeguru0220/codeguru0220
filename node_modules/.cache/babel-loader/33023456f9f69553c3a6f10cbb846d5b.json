{"ast":null,"code":"import { Circle, Rectangle } from \"tsparticles-engine\";\nexport class CircleWarp extends Circle {\n  constructor(x, y, radius, canvasSize) {\n    super(x, y, radius);\n    this.canvasSize = canvasSize;\n    this.canvasSize = { ...canvasSize\n    };\n  }\n\n  contains(point) {\n    const {\n      width,\n      height\n    } = this.canvasSize;\n    const {\n      x,\n      y\n    } = point;\n    return super.contains(point) || super.contains({\n      x: x - width,\n      y\n    }) || super.contains({\n      x: x - width,\n      y: y - height\n    }) || super.contains({\n      x,\n      y: y - height\n    });\n  }\n\n  intersects(range) {\n    if (super.intersects(range)) {\n      return true;\n    }\n\n    const rect = range,\n          circle = range,\n          newPos = {\n      x: range.position.x - this.canvasSize.width,\n      y: range.position.y - this.canvasSize.height\n    };\n\n    if (circle.radius !== undefined) {\n      const biggerCircle = new Circle(newPos.x, newPos.y, circle.radius * 2);\n      return super.intersects(biggerCircle);\n    } else if (rect.size !== undefined) {\n      const rectSW = new Rectangle(newPos.x, newPos.y, rect.size.width * 2, rect.size.height * 2);\n      return super.intersects(rectSW);\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-interaction-particles-links/esm/CircleWarp.js"],"names":["Circle","Rectangle","CircleWarp","constructor","x","y","radius","canvasSize","contains","point","width","height","intersects","range","rect","circle","newPos","position","undefined","biggerCircle","size","rectSW"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,oBAAlC;AACA,OAAO,MAAMC,UAAN,SAAyBF,MAAzB,CAAgC;AACnCG,EAAAA,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAOC,MAAP,EAAeC,UAAf,EAA2B;AAClC,UAAMH,CAAN,EAASC,CAAT,EAAYC,MAAZ;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKA,UAAL,GAAkB,EAAE,GAAGA;AAAL,KAAlB;AACH;;AACDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACZ,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAoB,KAAKJ,UAA/B;AACA,UAAM;AAAEH,MAAAA,CAAF;AAAKC,MAAAA;AAAL,QAAWI,KAAjB;AACA,WAAQ,MAAMD,QAAN,CAAeC,KAAf,KACJ,MAAMD,QAAN,CAAe;AAAEJ,MAAAA,CAAC,EAAEA,CAAC,GAAGM,KAAT;AAAgBL,MAAAA;AAAhB,KAAf,CADI,IAEJ,MAAMG,QAAN,CAAe;AAAEJ,MAAAA,CAAC,EAAEA,CAAC,GAAGM,KAAT;AAAgBL,MAAAA,CAAC,EAAEA,CAAC,GAAGM;AAAvB,KAAf,CAFI,IAGJ,MAAMH,QAAN,CAAe;AAAEJ,MAAAA,CAAF;AAAKC,MAAAA,CAAC,EAAEA,CAAC,GAAGM;AAAZ,KAAf,CAHJ;AAIH;;AACDC,EAAAA,UAAU,CAACC,KAAD,EAAQ;AACd,QAAI,MAAMD,UAAN,CAAiBC,KAAjB,CAAJ,EAA6B;AACzB,aAAO,IAAP;AACH;;AACD,UAAMC,IAAI,GAAGD,KAAb;AAAA,UAAoBE,MAAM,GAAGF,KAA7B;AAAA,UAAoCG,MAAM,GAAG;AACzCZ,MAAAA,CAAC,EAAES,KAAK,CAACI,QAAN,CAAeb,CAAf,GAAmB,KAAKG,UAAL,CAAgBG,KADG;AAEzCL,MAAAA,CAAC,EAAEQ,KAAK,CAACI,QAAN,CAAeZ,CAAf,GAAmB,KAAKE,UAAL,CAAgBI;AAFG,KAA7C;;AAIA,QAAII,MAAM,CAACT,MAAP,KAAkBY,SAAtB,EAAiC;AAC7B,YAAMC,YAAY,GAAG,IAAInB,MAAJ,CAAWgB,MAAM,CAACZ,CAAlB,EAAqBY,MAAM,CAACX,CAA5B,EAA+BU,MAAM,CAACT,MAAP,GAAgB,CAA/C,CAArB;AACA,aAAO,MAAMM,UAAN,CAAiBO,YAAjB,CAAP;AACH,KAHD,MAIK,IAAIL,IAAI,CAACM,IAAL,KAAcF,SAAlB,EAA6B;AAC9B,YAAMG,MAAM,GAAG,IAAIpB,SAAJ,CAAce,MAAM,CAACZ,CAArB,EAAwBY,MAAM,CAACX,CAA/B,EAAkCS,IAAI,CAACM,IAAL,CAAUV,KAAV,GAAkB,CAApD,EAAuDI,IAAI,CAACM,IAAL,CAAUT,MAAV,GAAmB,CAA1E,CAAf;AACA,aAAO,MAAMC,UAAN,CAAiBS,MAAjB,CAAP;AACH;;AACD,WAAO,KAAP;AACH;;AA/BkC","sourcesContent":["import { Circle, Rectangle } from \"tsparticles-engine\";\nexport class CircleWarp extends Circle {\n    constructor(x, y, radius, canvasSize) {\n        super(x, y, radius);\n        this.canvasSize = canvasSize;\n        this.canvasSize = { ...canvasSize };\n    }\n    contains(point) {\n        const { width, height } = this.canvasSize;\n        const { x, y } = point;\n        return (super.contains(point) ||\n            super.contains({ x: x - width, y }) ||\n            super.contains({ x: x - width, y: y - height }) ||\n            super.contains({ x, y: y - height }));\n    }\n    intersects(range) {\n        if (super.intersects(range)) {\n            return true;\n        }\n        const rect = range, circle = range, newPos = {\n            x: range.position.x - this.canvasSize.width,\n            y: range.position.y - this.canvasSize.height,\n        };\n        if (circle.radius !== undefined) {\n            const biggerCircle = new Circle(newPos.x, newPos.y, circle.radius * 2);\n            return super.intersects(biggerCircle);\n        }\n        else if (rect.size !== undefined) {\n            const rectSW = new Rectangle(newPos.x, newPos.y, rect.size.width * 2, rect.size.height * 2);\n            return super.intersects(rectSW);\n        }\n        return false;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}