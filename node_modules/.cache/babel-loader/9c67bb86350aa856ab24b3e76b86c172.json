{"ast":null,"code":"import { getStyleFromRgb } from \"./ColorUtils\";\nexport function drawLine(context, begin, end) {\n  context.beginPath();\n  context.moveTo(begin.x, begin.y);\n  context.lineTo(end.x, end.y);\n  context.closePath();\n}\nexport function drawTriangle(context, p1, p2, p3) {\n  context.beginPath();\n  context.moveTo(p1.x, p1.y);\n  context.lineTo(p2.x, p2.y);\n  context.lineTo(p3.x, p3.y);\n  context.closePath();\n}\nexport function paintBase(context, dimension, baseColor) {\n  context.fillStyle = baseColor ?? \"rgba(0,0,0,0)\";\n  context.fillRect(0, 0, dimension.width, dimension.height);\n}\nexport function paintImage(context, dimension, image, opacity) {\n  if (!image) {\n    return;\n  }\n\n  context.globalAlpha = opacity;\n  context.drawImage(image, 0, 0, dimension.width, dimension.height);\n  context.globalAlpha = 1;\n}\nexport function clear(context, dimension) {\n  context.clearRect(0, 0, dimension.width, dimension.height);\n}\nexport function drawParticle(data) {\n  const {\n    container,\n    context,\n    particle,\n    delta,\n    colorStyles,\n    backgroundMask,\n    composite,\n    radius,\n    opacity,\n    shadow,\n    transform\n  } = data;\n  const pos = particle.getPosition(),\n        angle = particle.rotation + (particle.pathRotation ? particle.velocity.angle : 0),\n        rotateData = {\n    sin: Math.sin(angle),\n    cos: Math.cos(angle)\n  },\n        transformData = {\n    a: rotateData.cos * (transform.a ?? 1),\n    b: rotateData.sin * (transform.b ?? 1),\n    c: -rotateData.sin * (transform.c ?? 1),\n    d: rotateData.cos * (transform.d ?? 1)\n  };\n  context.setTransform(transformData.a, transformData.b, transformData.c, transformData.d, pos.x, pos.y);\n  context.beginPath();\n\n  if (backgroundMask) {\n    context.globalCompositeOperation = composite;\n  }\n\n  const shadowColor = particle.shadowColor;\n\n  if (shadow.enable && shadowColor) {\n    context.shadowBlur = shadow.blur;\n    context.shadowColor = getStyleFromRgb(shadowColor);\n    context.shadowOffsetX = shadow.offset.x;\n    context.shadowOffsetY = shadow.offset.y;\n  }\n\n  if (colorStyles.fill) {\n    context.fillStyle = colorStyles.fill;\n  }\n\n  const strokeWidth = particle.strokeWidth ?? 0;\n  context.lineWidth = strokeWidth;\n\n  if (colorStyles.stroke) {\n    context.strokeStyle = colorStyles.stroke;\n  }\n\n  drawShape(container, context, particle, radius, opacity, delta);\n\n  if (strokeWidth > 0) {\n    context.stroke();\n  }\n\n  if (particle.close) {\n    context.closePath();\n  }\n\n  if (particle.fill) {\n    context.fill();\n  }\n\n  drawShapeAfterEffect(container, context, particle, radius, opacity, delta);\n  context.globalCompositeOperation = \"source-over\";\n  context.setTransform(1, 0, 0, 1, 0, 0);\n}\nexport function drawShape(container, context, particle, radius, opacity, delta) {\n  if (!particle.shape) {\n    return;\n  }\n\n  const drawer = container.drawers.get(particle.shape);\n\n  if (!drawer) {\n    return;\n  }\n\n  drawer.draw(context, particle, radius, opacity, delta, container.retina.pixelRatio);\n}\nexport function drawShapeAfterEffect(container, context, particle, radius, opacity, delta) {\n  if (!particle.shape) {\n    return;\n  }\n\n  const drawer = container.drawers.get(particle.shape);\n\n  if (!drawer || !drawer.afterEffect) {\n    return;\n  }\n\n  drawer.afterEffect(context, particle, radius, opacity, delta, container.retina.pixelRatio);\n}\nexport function drawPlugin(context, plugin, delta) {\n  if (!plugin.draw) {\n    return;\n  }\n\n  plugin.draw(context, delta);\n}\nexport function drawParticlePlugin(context, plugin, particle, delta) {\n  if (!plugin.drawParticle) {\n    return;\n  }\n\n  plugin.drawParticle(context, particle, delta);\n}\nexport function alterHsl(color, type, value) {\n  return {\n    h: color.h,\n    s: color.s,\n    l: color.l + (type === \"darken\" ? -1 : 1) * value\n  };\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-engine/esm/Utils/CanvasUtils.js"],"names":["getStyleFromRgb","drawLine","context","begin","end","beginPath","moveTo","x","y","lineTo","closePath","drawTriangle","p1","p2","p3","paintBase","dimension","baseColor","fillStyle","fillRect","width","height","paintImage","image","opacity","globalAlpha","drawImage","clear","clearRect","drawParticle","data","container","particle","delta","colorStyles","backgroundMask","composite","radius","shadow","transform","pos","getPosition","angle","rotation","pathRotation","velocity","rotateData","sin","Math","cos","transformData","a","b","c","d","setTransform","globalCompositeOperation","shadowColor","enable","shadowBlur","blur","shadowOffsetX","offset","shadowOffsetY","fill","strokeWidth","lineWidth","stroke","strokeStyle","drawShape","close","drawShapeAfterEffect","shape","drawer","drawers","get","draw","retina","pixelRatio","afterEffect","drawPlugin","plugin","drawParticlePlugin","alterHsl","color","type","value","h","s","l"],"mappings":"AAAA,SAASA,eAAT,QAAgC,cAAhC;AACA,OAAO,SAASC,QAAT,CAAkBC,OAAlB,EAA2BC,KAA3B,EAAkCC,GAAlC,EAAuC;AAC1CF,EAAAA,OAAO,CAACG,SAAR;AACAH,EAAAA,OAAO,CAACI,MAAR,CAAeH,KAAK,CAACI,CAArB,EAAwBJ,KAAK,CAACK,CAA9B;AACAN,EAAAA,OAAO,CAACO,MAAR,CAAeL,GAAG,CAACG,CAAnB,EAAsBH,GAAG,CAACI,CAA1B;AACAN,EAAAA,OAAO,CAACQ,SAAR;AACH;AACD,OAAO,SAASC,YAAT,CAAsBT,OAAtB,EAA+BU,EAA/B,EAAmCC,EAAnC,EAAuCC,EAAvC,EAA2C;AAC9CZ,EAAAA,OAAO,CAACG,SAAR;AACAH,EAAAA,OAAO,CAACI,MAAR,CAAeM,EAAE,CAACL,CAAlB,EAAqBK,EAAE,CAACJ,CAAxB;AACAN,EAAAA,OAAO,CAACO,MAAR,CAAeI,EAAE,CAACN,CAAlB,EAAqBM,EAAE,CAACL,CAAxB;AACAN,EAAAA,OAAO,CAACO,MAAR,CAAeK,EAAE,CAACP,CAAlB,EAAqBO,EAAE,CAACN,CAAxB;AACAN,EAAAA,OAAO,CAACQ,SAAR;AACH;AACD,OAAO,SAASK,SAAT,CAAmBb,OAAnB,EAA4Bc,SAA5B,EAAuCC,SAAvC,EAAkD;AACrDf,EAAAA,OAAO,CAACgB,SAAR,GAAoBD,SAAS,IAAI,eAAjC;AACAf,EAAAA,OAAO,CAACiB,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBH,SAAS,CAACI,KAAjC,EAAwCJ,SAAS,CAACK,MAAlD;AACH;AACD,OAAO,SAASC,UAAT,CAAoBpB,OAApB,EAA6Bc,SAA7B,EAAwCO,KAAxC,EAA+CC,OAA/C,EAAwD;AAC3D,MAAI,CAACD,KAAL,EAAY;AACR;AACH;;AACDrB,EAAAA,OAAO,CAACuB,WAAR,GAAsBD,OAAtB;AACAtB,EAAAA,OAAO,CAACwB,SAAR,CAAkBH,KAAlB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+BP,SAAS,CAACI,KAAzC,EAAgDJ,SAAS,CAACK,MAA1D;AACAnB,EAAAA,OAAO,CAACuB,WAAR,GAAsB,CAAtB;AACH;AACD,OAAO,SAASE,KAAT,CAAezB,OAAf,EAAwBc,SAAxB,EAAmC;AACtCd,EAAAA,OAAO,CAAC0B,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBZ,SAAS,CAACI,KAAlC,EAAyCJ,SAAS,CAACK,MAAnD;AACH;AACD,OAAO,SAASQ,YAAT,CAAsBC,IAAtB,EAA4B;AAC/B,QAAM;AAAEC,IAAAA,SAAF;AAAa7B,IAAAA,OAAb;AAAsB8B,IAAAA,QAAtB;AAAgCC,IAAAA,KAAhC;AAAuCC,IAAAA,WAAvC;AAAoDC,IAAAA,cAApD;AAAoEC,IAAAA,SAApE;AAA+EC,IAAAA,MAA/E;AAAuFb,IAAAA,OAAvF;AAAgGc,IAAAA,MAAhG;AAAwGC,IAAAA;AAAxG,MAAuHT,IAA7H;AACA,QAAMU,GAAG,GAAGR,QAAQ,CAACS,WAAT,EAAZ;AAAA,QAAoCC,KAAK,GAAGV,QAAQ,CAACW,QAAT,IAAqBX,QAAQ,CAACY,YAAT,GAAwBZ,QAAQ,CAACa,QAAT,CAAkBH,KAA1C,GAAkD,CAAvE,CAA5C;AAAA,QAAuHI,UAAU,GAAG;AAChIC,IAAAA,GAAG,EAAEC,IAAI,CAACD,GAAL,CAASL,KAAT,CAD2H;AAEhIO,IAAAA,GAAG,EAAED,IAAI,CAACC,GAAL,CAASP,KAAT;AAF2H,GAApI;AAAA,QAGGQ,aAAa,GAAG;AACfC,IAAAA,CAAC,EAAEL,UAAU,CAACG,GAAX,IAAkBV,SAAS,CAACY,CAAV,IAAe,CAAjC,CADY;AAEfC,IAAAA,CAAC,EAAEN,UAAU,CAACC,GAAX,IAAkBR,SAAS,CAACa,CAAV,IAAe,CAAjC,CAFY;AAGfC,IAAAA,CAAC,EAAE,CAACP,UAAU,CAACC,GAAZ,IAAmBR,SAAS,CAACc,CAAV,IAAe,CAAlC,CAHY;AAIfC,IAAAA,CAAC,EAAER,UAAU,CAACG,GAAX,IAAkBV,SAAS,CAACe,CAAV,IAAe,CAAjC;AAJY,GAHnB;AASApD,EAAAA,OAAO,CAACqD,YAAR,CAAqBL,aAAa,CAACC,CAAnC,EAAsCD,aAAa,CAACE,CAApD,EAAuDF,aAAa,CAACG,CAArE,EAAwEH,aAAa,CAACI,CAAtF,EAAyFd,GAAG,CAACjC,CAA7F,EAAgGiC,GAAG,CAAChC,CAApG;AACAN,EAAAA,OAAO,CAACG,SAAR;;AACA,MAAI8B,cAAJ,EAAoB;AAChBjC,IAAAA,OAAO,CAACsD,wBAAR,GAAmCpB,SAAnC;AACH;;AACD,QAAMqB,WAAW,GAAGzB,QAAQ,CAACyB,WAA7B;;AACA,MAAInB,MAAM,CAACoB,MAAP,IAAiBD,WAArB,EAAkC;AAC9BvD,IAAAA,OAAO,CAACyD,UAAR,GAAqBrB,MAAM,CAACsB,IAA5B;AACA1D,IAAAA,OAAO,CAACuD,WAAR,GAAsBzD,eAAe,CAACyD,WAAD,CAArC;AACAvD,IAAAA,OAAO,CAAC2D,aAAR,GAAwBvB,MAAM,CAACwB,MAAP,CAAcvD,CAAtC;AACAL,IAAAA,OAAO,CAAC6D,aAAR,GAAwBzB,MAAM,CAACwB,MAAP,CAActD,CAAtC;AACH;;AACD,MAAI0B,WAAW,CAAC8B,IAAhB,EAAsB;AAClB9D,IAAAA,OAAO,CAACgB,SAAR,GAAoBgB,WAAW,CAAC8B,IAAhC;AACH;;AACD,QAAMC,WAAW,GAAGjC,QAAQ,CAACiC,WAAT,IAAwB,CAA5C;AACA/D,EAAAA,OAAO,CAACgE,SAAR,GAAoBD,WAApB;;AACA,MAAI/B,WAAW,CAACiC,MAAhB,EAAwB;AACpBjE,IAAAA,OAAO,CAACkE,WAAR,GAAsBlC,WAAW,CAACiC,MAAlC;AACH;;AACDE,EAAAA,SAAS,CAACtC,SAAD,EAAY7B,OAAZ,EAAqB8B,QAArB,EAA+BK,MAA/B,EAAuCb,OAAvC,EAAgDS,KAAhD,CAAT;;AACA,MAAIgC,WAAW,GAAG,CAAlB,EAAqB;AACjB/D,IAAAA,OAAO,CAACiE,MAAR;AACH;;AACD,MAAInC,QAAQ,CAACsC,KAAb,EAAoB;AAChBpE,IAAAA,OAAO,CAACQ,SAAR;AACH;;AACD,MAAIsB,QAAQ,CAACgC,IAAb,EAAmB;AACf9D,IAAAA,OAAO,CAAC8D,IAAR;AACH;;AACDO,EAAAA,oBAAoB,CAACxC,SAAD,EAAY7B,OAAZ,EAAqB8B,QAArB,EAA+BK,MAA/B,EAAuCb,OAAvC,EAAgDS,KAAhD,CAApB;AACA/B,EAAAA,OAAO,CAACsD,wBAAR,GAAmC,aAAnC;AACAtD,EAAAA,OAAO,CAACqD,YAAR,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,CAApC;AACH;AACD,OAAO,SAASc,SAAT,CAAmBtC,SAAnB,EAA8B7B,OAA9B,EAAuC8B,QAAvC,EAAiDK,MAAjD,EAAyDb,OAAzD,EAAkES,KAAlE,EAAyE;AAC5E,MAAI,CAACD,QAAQ,CAACwC,KAAd,EAAqB;AACjB;AACH;;AACD,QAAMC,MAAM,GAAG1C,SAAS,CAAC2C,OAAV,CAAkBC,GAAlB,CAAsB3C,QAAQ,CAACwC,KAA/B,CAAf;;AACA,MAAI,CAACC,MAAL,EAAa;AACT;AACH;;AACDA,EAAAA,MAAM,CAACG,IAAP,CAAY1E,OAAZ,EAAqB8B,QAArB,EAA+BK,MAA/B,EAAuCb,OAAvC,EAAgDS,KAAhD,EAAuDF,SAAS,CAAC8C,MAAV,CAAiBC,UAAxE;AACH;AACD,OAAO,SAASP,oBAAT,CAA8BxC,SAA9B,EAAyC7B,OAAzC,EAAkD8B,QAAlD,EAA4DK,MAA5D,EAAoEb,OAApE,EAA6ES,KAA7E,EAAoF;AACvF,MAAI,CAACD,QAAQ,CAACwC,KAAd,EAAqB;AACjB;AACH;;AACD,QAAMC,MAAM,GAAG1C,SAAS,CAAC2C,OAAV,CAAkBC,GAAlB,CAAsB3C,QAAQ,CAACwC,KAA/B,CAAf;;AACA,MAAI,CAACC,MAAD,IAAW,CAACA,MAAM,CAACM,WAAvB,EAAoC;AAChC;AACH;;AACDN,EAAAA,MAAM,CAACM,WAAP,CAAmB7E,OAAnB,EAA4B8B,QAA5B,EAAsCK,MAAtC,EAA8Cb,OAA9C,EAAuDS,KAAvD,EAA8DF,SAAS,CAAC8C,MAAV,CAAiBC,UAA/E;AACH;AACD,OAAO,SAASE,UAAT,CAAoB9E,OAApB,EAA6B+E,MAA7B,EAAqChD,KAArC,EAA4C;AAC/C,MAAI,CAACgD,MAAM,CAACL,IAAZ,EAAkB;AACd;AACH;;AACDK,EAAAA,MAAM,CAACL,IAAP,CAAY1E,OAAZ,EAAqB+B,KAArB;AACH;AACD,OAAO,SAASiD,kBAAT,CAA4BhF,OAA5B,EAAqC+E,MAArC,EAA6CjD,QAA7C,EAAuDC,KAAvD,EAA8D;AACjE,MAAI,CAACgD,MAAM,CAACpD,YAAZ,EAA0B;AACtB;AACH;;AACDoD,EAAAA,MAAM,CAACpD,YAAP,CAAoB3B,OAApB,EAA6B8B,QAA7B,EAAuCC,KAAvC;AACH;AACD,OAAO,SAASkD,QAAT,CAAkBC,KAAlB,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsC;AACzC,SAAO;AACHC,IAAAA,CAAC,EAAEH,KAAK,CAACG,CADN;AAEHC,IAAAA,CAAC,EAAEJ,KAAK,CAACI,CAFN;AAGHC,IAAAA,CAAC,EAAEL,KAAK,CAACK,CAAN,GAAU,CAACJ,IAAI,KAAK,QAAT,GAAoB,CAAC,CAArB,GAAyB,CAA1B,IAA+BC;AAHzC,GAAP;AAKH","sourcesContent":["import { getStyleFromRgb } from \"./ColorUtils\";\nexport function drawLine(context, begin, end) {\n    context.beginPath();\n    context.moveTo(begin.x, begin.y);\n    context.lineTo(end.x, end.y);\n    context.closePath();\n}\nexport function drawTriangle(context, p1, p2, p3) {\n    context.beginPath();\n    context.moveTo(p1.x, p1.y);\n    context.lineTo(p2.x, p2.y);\n    context.lineTo(p3.x, p3.y);\n    context.closePath();\n}\nexport function paintBase(context, dimension, baseColor) {\n    context.fillStyle = baseColor ?? \"rgba(0,0,0,0)\";\n    context.fillRect(0, 0, dimension.width, dimension.height);\n}\nexport function paintImage(context, dimension, image, opacity) {\n    if (!image) {\n        return;\n    }\n    context.globalAlpha = opacity;\n    context.drawImage(image, 0, 0, dimension.width, dimension.height);\n    context.globalAlpha = 1;\n}\nexport function clear(context, dimension) {\n    context.clearRect(0, 0, dimension.width, dimension.height);\n}\nexport function drawParticle(data) {\n    const { container, context, particle, delta, colorStyles, backgroundMask, composite, radius, opacity, shadow, transform, } = data;\n    const pos = particle.getPosition(), angle = particle.rotation + (particle.pathRotation ? particle.velocity.angle : 0), rotateData = {\n        sin: Math.sin(angle),\n        cos: Math.cos(angle),\n    }, transformData = {\n        a: rotateData.cos * (transform.a ?? 1),\n        b: rotateData.sin * (transform.b ?? 1),\n        c: -rotateData.sin * (transform.c ?? 1),\n        d: rotateData.cos * (transform.d ?? 1),\n    };\n    context.setTransform(transformData.a, transformData.b, transformData.c, transformData.d, pos.x, pos.y);\n    context.beginPath();\n    if (backgroundMask) {\n        context.globalCompositeOperation = composite;\n    }\n    const shadowColor = particle.shadowColor;\n    if (shadow.enable && shadowColor) {\n        context.shadowBlur = shadow.blur;\n        context.shadowColor = getStyleFromRgb(shadowColor);\n        context.shadowOffsetX = shadow.offset.x;\n        context.shadowOffsetY = shadow.offset.y;\n    }\n    if (colorStyles.fill) {\n        context.fillStyle = colorStyles.fill;\n    }\n    const strokeWidth = particle.strokeWidth ?? 0;\n    context.lineWidth = strokeWidth;\n    if (colorStyles.stroke) {\n        context.strokeStyle = colorStyles.stroke;\n    }\n    drawShape(container, context, particle, radius, opacity, delta);\n    if (strokeWidth > 0) {\n        context.stroke();\n    }\n    if (particle.close) {\n        context.closePath();\n    }\n    if (particle.fill) {\n        context.fill();\n    }\n    drawShapeAfterEffect(container, context, particle, radius, opacity, delta);\n    context.globalCompositeOperation = \"source-over\";\n    context.setTransform(1, 0, 0, 1, 0, 0);\n}\nexport function drawShape(container, context, particle, radius, opacity, delta) {\n    if (!particle.shape) {\n        return;\n    }\n    const drawer = container.drawers.get(particle.shape);\n    if (!drawer) {\n        return;\n    }\n    drawer.draw(context, particle, radius, opacity, delta, container.retina.pixelRatio);\n}\nexport function drawShapeAfterEffect(container, context, particle, radius, opacity, delta) {\n    if (!particle.shape) {\n        return;\n    }\n    const drawer = container.drawers.get(particle.shape);\n    if (!drawer || !drawer.afterEffect) {\n        return;\n    }\n    drawer.afterEffect(context, particle, radius, opacity, delta, container.retina.pixelRatio);\n}\nexport function drawPlugin(context, plugin, delta) {\n    if (!plugin.draw) {\n        return;\n    }\n    plugin.draw(context, delta);\n}\nexport function drawParticlePlugin(context, plugin, particle, delta) {\n    if (!plugin.drawParticle) {\n        return;\n    }\n    plugin.drawParticle(context, particle, delta);\n}\nexport function alterHsl(color, type, value) {\n    return {\n        h: color.h,\n        s: color.s,\n        l: color.l + (type === \"darken\" ? -1 : 1) * value,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}