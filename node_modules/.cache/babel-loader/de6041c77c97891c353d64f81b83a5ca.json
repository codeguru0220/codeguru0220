{"ast":null,"code":"import { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, randomInRange, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize\";\nexport class EmitterInstance {\n  constructor(engine, emitters, container, options, position) {\n    this.emitters = emitters;\n    this.container = container;\n\n    this._calcPosition = () => {\n      return calcPositionOrRandomFromSizeRanged({\n        size: this.container.canvas.size,\n        position: this.options.position\n      });\n    };\n\n    this._destroy = () => {\n      this.emitters.removeEmitter(this);\n\n      this._engine.dispatchEvent(\"emitterDestroyed\", {\n        container: this.container,\n        data: {\n          emitter: this\n        }\n      });\n    };\n\n    this._emit = () => {\n      if (this._paused) {\n        return;\n      }\n\n      const quantity = getRangeValue(this.options.rate.quantity);\n\n      this._emitParticles(quantity);\n    };\n\n    this._emitParticles = quantity => {\n      const position = this.getPosition(),\n            size = this.getSize(),\n            singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n\n      for (let i = 0; i < quantity; i++) {\n        const particlesOptions = deepExtend({}, singleParticlesOptions);\n\n        if (this.spawnColor) {\n          const hslAnimation = this.options.spawnColor?.animation;\n\n          if (hslAnimation) {\n            this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\n            this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\n            this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\n          }\n\n          if (!particlesOptions.color) {\n            particlesOptions.color = {\n              value: this.spawnColor\n            };\n          } else {\n            particlesOptions.color.value = this.spawnColor;\n          }\n        }\n\n        if (!position) {\n          return;\n        }\n\n        const pPosition = this._shape?.randomPosition(position, size, this.fill) ?? position;\n        this.container.particles.addParticle(pPosition, particlesOptions);\n      }\n    };\n\n    this._prepareToDie = () => {\n      if (this._paused) {\n        return;\n      }\n\n      const duration = this.options.life?.duration !== undefined ? getRangeValue(this.options.life.duration) : undefined;\n\n      if (this.container.retina.reduceFactor && (this._lifeCount > 0 || this._immortal) && duration !== undefined && duration > 0) {\n        this._duration = duration * 1000;\n      }\n    };\n\n    this._setColorAnimation = (animation, initValue, maxValue) => {\n      const container = this.container;\n\n      if (!animation.enable) {\n        return initValue;\n      }\n\n      const colorOffset = randomInRange(animation.offset),\n            delay = getRangeValue(this.options.rate.delay),\n            emitFactor = 1000 * delay / container.retina.reduceFactor,\n            colorSpeed = getRangeValue(animation.speed ?? 0);\n      return (initValue + colorSpeed * container.fpsLimit / emitFactor + colorOffset * 3.6) % maxValue;\n    };\n\n    this._engine = engine;\n    this._currentDuration = 0;\n    this._currentEmitDelay = 0;\n    this._currentSpawnDelay = 0;\n    this._initialPosition = position;\n\n    if (options instanceof Emitter) {\n      this.options = options;\n    } else {\n      this.options = new Emitter();\n      this.options.load(options);\n    }\n\n    this._spawnDelay = getRangeValue(this.options.life.delay ?? 0) * 1000 / this.container.retina.reduceFactor;\n    this.position = this._initialPosition ?? this._calcPosition();\n    this.name = this.options.name;\n    this._shape = this._engine.emitterShapeManager?.getShape(this.options.shape);\n    this.fill = this.options.fill;\n    this._firstSpawn = !this.options.life.wait;\n    this._startParticlesAdded = false;\n    let particlesOptions = deepExtend({}, this.options.particles);\n    particlesOptions ??= {};\n    particlesOptions.move ??= {};\n    particlesOptions.move.direction ??= this.options.direction;\n\n    if (this.options.spawnColor) {\n      this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n    }\n\n    this._paused = !this.options.autoPlay;\n    this._particlesOptions = particlesOptions;\n\n    this.size = this.options.size ?? (() => {\n      const size = new EmitterSize();\n      size.load({\n        height: 0,\n        mode: \"percent\",\n        width: 0\n      });\n      return size;\n    })();\n\n    this._lifeCount = this.options.life.count ?? -1;\n    this._immortal = this._lifeCount <= 0;\n\n    this._engine.dispatchEvent(\"emitterCreated\", {\n      container,\n      data: {\n        emitter: this\n      }\n    });\n\n    this.play();\n  }\n\n  externalPause() {\n    this._paused = true;\n    this.pause();\n  }\n\n  externalPlay() {\n    this._paused = false;\n    this.play();\n  }\n\n  getPosition() {\n    if (this.options.domId) {\n      const container = this.container,\n            element = document.getElementById(this.options.domId);\n\n      if (element) {\n        const elRect = element.getBoundingClientRect();\n        return {\n          x: (elRect.x + elRect.width / 2) * container.retina.pixelRatio,\n          y: (elRect.y + elRect.height / 2) * container.retina.pixelRatio\n        };\n      }\n    }\n\n    return this.position;\n  }\n\n  getSize() {\n    const container = this.container;\n\n    if (this.options.domId) {\n      const element = document.getElementById(this.options.domId);\n\n      if (element) {\n        const elRect = element.getBoundingClientRect();\n        return {\n          width: elRect.width * container.retina.pixelRatio,\n          height: elRect.height * container.retina.pixelRatio\n        };\n      }\n    }\n\n    return getSize(this.size, container.canvas.size);\n  }\n\n  pause() {\n    if (this._paused) {\n      return;\n    }\n\n    delete this._emitDelay;\n  }\n\n  play() {\n    if (this._paused) {\n      return;\n    }\n\n    if (!(this.container.retina.reduceFactor && (this._lifeCount > 0 || this._immortal || !this.options.life.count) && (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? 0)))) {\n      return;\n    }\n\n    if (this._emitDelay === undefined) {\n      const delay = getRangeValue(this.options.rate.delay);\n      this._emitDelay = 1000 * delay / this.container.retina.reduceFactor;\n    }\n\n    if (this._lifeCount > 0 || this._immortal) {\n      this._prepareToDie();\n    }\n  }\n\n  resize() {\n    const initialPosition = this._initialPosition;\n    this.position = initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin) ? initialPosition : this._calcPosition();\n  }\n\n  update(delta) {\n    if (this._paused) {\n      return;\n    }\n\n    if (this._firstSpawn) {\n      this._firstSpawn = false;\n      this._currentSpawnDelay = this._spawnDelay ?? 0;\n      this._currentEmitDelay = this._emitDelay ?? 0;\n    }\n\n    if (!this._startParticlesAdded) {\n      this._startParticlesAdded = true;\n\n      this._emitParticles(this.options.startCount);\n    }\n\n    if (this._duration !== undefined) {\n      this._currentDuration += delta.value;\n\n      if (this._currentDuration >= this._duration) {\n        this.pause();\n\n        if (this._spawnDelay !== undefined) {\n          delete this._spawnDelay;\n        }\n\n        if (!this._immortal) {\n          this._lifeCount--;\n        }\n\n        if (this._lifeCount > 0 || this._immortal) {\n          this.position = this._calcPosition();\n          this._spawnDelay = getRangeValue(this.options.life.delay ?? 0) * 1000 / this.container.retina.reduceFactor;\n        } else {\n          this._destroy();\n        }\n\n        this._currentDuration -= this._duration;\n        delete this._duration;\n      }\n    }\n\n    if (this._spawnDelay !== undefined) {\n      this._currentSpawnDelay += delta.value;\n\n      if (this._currentSpawnDelay >= this._spawnDelay) {\n        this._engine.dispatchEvent(\"emitterPlay\", {\n          container: this.container\n        });\n\n        this.play();\n        this._currentSpawnDelay -= this._currentSpawnDelay;\n        delete this._spawnDelay;\n      }\n    }\n\n    if (this._emitDelay !== undefined) {\n      this._currentEmitDelay += delta.value;\n\n      if (this._currentEmitDelay >= this._emitDelay) {\n        this._emit();\n\n        this._currentEmitDelay -= this._emitDelay;\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-plugin-emitters/esm/EmitterInstance.js"],"names":["Vector","calcPositionOrRandomFromSizeRanged","deepExtend","getRangeValue","getSize","isPointInside","itemFromSingleOrMultiple","randomInRange","rangeColorToHsl","Emitter","EmitterSize","EmitterInstance","constructor","engine","emitters","container","options","position","_calcPosition","size","canvas","_destroy","removeEmitter","_engine","dispatchEvent","data","emitter","_emit","_paused","quantity","rate","_emitParticles","getPosition","singleParticlesOptions","_particlesOptions","i","particlesOptions","spawnColor","hslAnimation","animation","h","_setColorAnimation","s","l","color","value","pPosition","_shape","randomPosition","fill","particles","addParticle","_prepareToDie","duration","life","undefined","retina","reduceFactor","_lifeCount","_immortal","_duration","initValue","maxValue","enable","colorOffset","offset","delay","emitFactor","colorSpeed","speed","fpsLimit","_currentDuration","_currentEmitDelay","_currentSpawnDelay","_initialPosition","load","_spawnDelay","name","emitterShapeManager","getShape","shape","_firstSpawn","wait","_startParticlesAdded","move","direction","autoPlay","height","mode","width","count","play","externalPause","pause","externalPlay","domId","element","document","getElementById","elRect","getBoundingClientRect","x","pixelRatio","y","_emitDelay","resize","initialPosition","origin","update","delta","startCount"],"mappings":"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","sourcesContent":["import { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, randomInRange, rangeColorToHsl, } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize\";\nexport class EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        this.emitters = emitters;\n        this.container = container;\n        this._calcPosition = () => {\n            return calcPositionOrRandomFromSizeRanged({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n        };\n        this._destroy = () => {\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent(\"emitterDestroyed\", {\n                container: this.container,\n                data: {\n                    emitter: this,\n                },\n            });\n        };\n        this._emit = () => {\n            if (this._paused) {\n                return;\n            }\n            const quantity = getRangeValue(this.options.rate.quantity);\n            this._emitParticles(quantity);\n        };\n        this._emitParticles = (quantity) => {\n            const position = this.getPosition(), size = this.getSize(), singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n            for (let i = 0; i < quantity; i++) {\n                const particlesOptions = deepExtend({}, singleParticlesOptions);\n                if (this.spawnColor) {\n                    const hslAnimation = this.options.spawnColor?.animation;\n                    if (hslAnimation) {\n                        this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\n                        this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\n                        this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\n                    }\n                    if (!particlesOptions.color) {\n                        particlesOptions.color = {\n                            value: this.spawnColor,\n                        };\n                    }\n                    else {\n                        particlesOptions.color.value = this.spawnColor;\n                    }\n                }\n                if (!position) {\n                    return;\n                }\n                const pPosition = this._shape?.randomPosition(position, size, this.fill) ?? position;\n                this.container.particles.addParticle(pPosition, particlesOptions);\n            }\n        };\n        this._prepareToDie = () => {\n            if (this._paused) {\n                return;\n            }\n            const duration = this.options.life?.duration !== undefined ? getRangeValue(this.options.life.duration) : undefined;\n            if (this.container.retina.reduceFactor &&\n                (this._lifeCount > 0 || this._immortal) &&\n                duration !== undefined &&\n                duration > 0) {\n                this._duration = duration * 1000;\n            }\n        };\n        this._setColorAnimation = (animation, initValue, maxValue) => {\n            const container = this.container;\n            if (!animation.enable) {\n                return initValue;\n            }\n            const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = (1000 * delay) / container.retina.reduceFactor, colorSpeed = getRangeValue(animation.speed ?? 0);\n            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * 3.6) % maxValue;\n        };\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay = (getRangeValue(this.options.life.delay ?? 0) * 1000) / this.container.retina.reduceFactor;\n        this.position = this._initialPosition ?? this._calcPosition();\n        this.name = this.options.name;\n        this._shape = this._engine.emitterShapeManager?.getShape(this.options.shape);\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = deepExtend({}, this.options.particles);\n        particlesOptions ??= {};\n        particlesOptions.move ??= {};\n        particlesOptions.move.direction ??= this.options.direction;\n        if (this.options.spawnColor) {\n            this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this.size =\n            this.options.size ??\n                (() => {\n                    const size = new EmitterSize();\n                    size.load({\n                        height: 0,\n                        mode: \"percent\",\n                        width: 0,\n                    });\n                    return size;\n                })();\n        this._lifeCount = this.options.life.count ?? -1;\n        this._immortal = this._lifeCount <= 0;\n        this._engine.dispatchEvent(\"emitterCreated\", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    getPosition() {\n        if (this.options.domId) {\n            const container = this.container, element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    x: (elRect.x + elRect.width / 2) * container.retina.pixelRatio,\n                    y: (elRect.y + elRect.height / 2) * container.retina.pixelRatio,\n                };\n            }\n        }\n        return this.position;\n    }\n    getSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                };\n            }\n        }\n        return getSize(this.size, container.canvas.size);\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > 0 || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? 0)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = getRangeValue(this.options.rate.delay);\n            this._emitDelay = (1000 * delay) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > 0 || this._immortal) {\n            this._prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n    update(delta) {\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = this._spawnDelay ?? 0;\n            this._currentEmitDelay = this._emitDelay ?? 0;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            this._emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > 0 || this._immortal) {\n                    this.position = this._calcPosition();\n                    this._spawnDelay =\n                        (getRangeValue(this.options.life.delay ?? 0) * 1000) / this.container.retina.reduceFactor;\n                }\n                else {\n                    this._destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                this._emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}