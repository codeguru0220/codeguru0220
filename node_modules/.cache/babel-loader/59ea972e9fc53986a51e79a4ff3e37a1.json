{"ast":null,"code":"import { ExternalInteractorBase, isInArray } from \"tsparticles-engine\";\nimport { Connect } from \"./Options/Classes/Connect\";\nimport { drawConnection } from \"./Utils\";\nexport class Connector extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  clear() {}\n\n  init() {\n    const container = this.container,\n          connect = container.actualOptions.interactivity.modes.connect;\n\n    if (!connect) {\n      return;\n    }\n\n    container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n    container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n  }\n\n  async interact() {\n    const container = this.container,\n          options = container.actualOptions;\n\n    if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n      const mousePos = container.interactivity.mouse.position;\n\n      if (!container.retina.connectModeDistance || container.retina.connectModeDistance < 0 || !container.retina.connectModeRadius || container.retina.connectModeRadius < 0 || !mousePos) {\n        return;\n      }\n\n      const distance = Math.abs(container.retina.connectModeRadius),\n            query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n      let i = 0;\n\n      for (const p1 of query) {\n        const pos1 = p1.getPosition();\n\n        for (const p2 of query.slice(i + 1)) {\n          const pos2 = p2.getPosition(),\n                distMax = Math.abs(container.retina.connectModeDistance),\n                xDiff = Math.abs(pos1.x - pos2.x),\n                yDiff = Math.abs(pos1.y - pos2.y);\n\n          if (xDiff < distMax && yDiff < distMax) {\n            drawConnection(container, p1, p2);\n          }\n        }\n\n        ++i;\n      }\n    }\n  }\n\n  isEnabled(particle) {\n    const container = this.container,\n          mouse = container.interactivity.mouse,\n          events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n\n    if (!(events.onHover.enable && mouse.position)) {\n      return false;\n    }\n\n    return isInArray(\"connect\", events.onHover.mode);\n  }\n\n  loadModeOptions(options) {\n    if (!options.connect) {\n      options.connect = new Connect();\n    }\n\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    for (const source of sources) {\n      options.connect.load(source?.connect);\n    }\n  }\n\n  reset() {}\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-interaction-external-connect/esm/Connector.js"],"names":["ExternalInteractorBase","isInArray","Connect","drawConnection","Connector","constructor","container","clear","init","connect","actualOptions","interactivity","modes","retina","connectModeDistance","distance","pixelRatio","connectModeRadius","radius","interact","options","events","onHover","enable","status","mousePos","mouse","position","Math","abs","query","particles","quadTree","queryCircle","p","isEnabled","i","p1","pos1","getPosition","p2","slice","pos2","distMax","xDiff","x","yDiff","y","particle","mode","loadModeOptions","sources","source","load","reset"],"mappings":"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","sourcesContent":["import { ExternalInteractorBase, isInArray, } from \"tsparticles-engine\";\nimport { Connect } from \"./Options/Classes/Connect\";\nimport { drawConnection } from \"./Utils\";\nexport class Connector extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, connect = container.actualOptions.interactivity.modes.connect;\n        if (!connect) {\n            return;\n        }\n        container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n        container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n            const mousePos = container.interactivity.mouse.position;\n            if (!container.retina.connectModeDistance ||\n                container.retina.connectModeDistance < 0 ||\n                !container.retina.connectModeRadius ||\n                container.retina.connectModeRadius < 0 ||\n                !mousePos) {\n                return;\n            }\n            const distance = Math.abs(container.retina.connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            let i = 0;\n            for (const p1 of query) {\n                const pos1 = p1.getPosition();\n                for (const p2 of query.slice(i + 1)) {\n                    const pos2 = p2.getPosition(), distMax = Math.abs(container.retina.connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        drawConnection(container, p1, p2);\n                    }\n                }\n                ++i;\n            }\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return isInArray(\"connect\", events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.connect) {\n            options.connect = new Connect();\n        }\n        for (const source of sources) {\n            options.connect.load(source?.connect);\n        }\n    }\n    reset() {\n    }\n}\n"]},"metadata":{},"sourceType":"module"}