{"ast":null,"code":"import { getRangeValue } from \"tsparticles-engine\";\nimport { Destroy } from \"./Options/Classes/Destroy\";\nimport { split } from \"./Utils\";\nexport class DestroyUpdater {\n  constructor(engine, container) {\n    this.engine = engine;\n    this.container = container;\n  }\n\n  init(particle) {\n    const container = this.container,\n          particlesOptions = particle.options,\n          destroyOptions = particlesOptions.destroy;\n\n    if (!destroyOptions) {\n      return;\n    }\n\n    particle.splitCount = 0;\n    const destroyBoundsOptions = destroyOptions.bounds;\n\n    if (!particle.destroyBounds) {\n      particle.destroyBounds = {};\n    }\n\n    const {\n      bottom,\n      left,\n      right,\n      top\n    } = destroyBoundsOptions,\n          {\n      destroyBounds\n    } = particle,\n          canvasSize = container.canvas.size;\n\n    if (bottom) {\n      destroyBounds.bottom = getRangeValue(bottom) * canvasSize.height / 100;\n    }\n\n    if (left) {\n      destroyBounds.left = getRangeValue(left) * canvasSize.width / 100;\n    }\n\n    if (right) {\n      destroyBounds.right = getRangeValue(right) * canvasSize.width / 100;\n    }\n\n    if (top) {\n      destroyBounds.top = getRangeValue(top) * canvasSize.height / 100;\n    }\n  }\n\n  isEnabled(particle) {\n    return !particle.destroyed;\n  }\n\n  loadOptions(options) {\n    if (!options.destroy) {\n      options.destroy = new Destroy();\n    }\n\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    for (const source of sources) {\n      options.destroy.load(source?.destroy);\n    }\n  }\n\n  particleDestroyed(particle, override) {\n    if (override) {\n      return;\n    }\n\n    const destroyOptions = particle.options.destroy;\n\n    if (destroyOptions && destroyOptions.mode === \"split\") {\n      split(this.engine, this.container, particle);\n    }\n  }\n\n  update(particle) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n\n    const position = particle.getPosition(),\n          bounds = particle.destroyBounds;\n\n    if (!bounds) {\n      return;\n    }\n\n    if (bounds.bottom !== undefined && position.y >= bounds.bottom || bounds.left !== undefined && position.x <= bounds.left || bounds.right !== undefined && position.x >= bounds.right || bounds.top !== undefined && position.y <= bounds.top) {\n      particle.destroy();\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-updater-destroy/esm/DestroyUpdater.js"],"names":["getRangeValue","Destroy","split","DestroyUpdater","constructor","engine","container","init","particle","particlesOptions","options","destroyOptions","destroy","splitCount","destroyBoundsOptions","bounds","destroyBounds","bottom","left","right","top","canvasSize","canvas","size","height","width","isEnabled","destroyed","loadOptions","sources","source","load","particleDestroyed","override","mode","update","position","getPosition","undefined","y","x"],"mappings":"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","sourcesContent":["import { getRangeValue, } from \"tsparticles-engine\";\nimport { Destroy } from \"./Options/Classes/Destroy\";\nimport { split } from \"./Utils\";\nexport class DestroyUpdater {\n    constructor(engine, container) {\n        this.engine = engine;\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, destroyOptions = particlesOptions.destroy;\n        if (!destroyOptions) {\n            return;\n        }\n        particle.splitCount = 0;\n        const destroyBoundsOptions = destroyOptions.bounds;\n        if (!particle.destroyBounds) {\n            particle.destroyBounds = {};\n        }\n        const { bottom, left, right, top } = destroyBoundsOptions, { destroyBounds } = particle, canvasSize = container.canvas.size;\n        if (bottom) {\n            destroyBounds.bottom = (getRangeValue(bottom) * canvasSize.height) / 100;\n        }\n        if (left) {\n            destroyBounds.left = (getRangeValue(left) * canvasSize.width) / 100;\n        }\n        if (right) {\n            destroyBounds.right = (getRangeValue(right) * canvasSize.width) / 100;\n        }\n        if (top) {\n            destroyBounds.top = (getRangeValue(top) * canvasSize.height) / 100;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.destroy) {\n            options.destroy = new Destroy();\n        }\n        for (const source of sources) {\n            options.destroy.load(source?.destroy);\n        }\n    }\n    particleDestroyed(particle, override) {\n        if (override) {\n            return;\n        }\n        const destroyOptions = particle.options.destroy;\n        if (destroyOptions && destroyOptions.mode === \"split\") {\n            split(this.engine, this.container, particle);\n        }\n    }\n    update(particle) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        const position = particle.getPosition(), bounds = particle.destroyBounds;\n        if (!bounds) {\n            return;\n        }\n        if ((bounds.bottom !== undefined && position.y >= bounds.bottom) ||\n            (bounds.left !== undefined && position.x <= bounds.left) ||\n            (bounds.right !== undefined && position.x >= bounds.right) ||\n            (bounds.top !== undefined && position.y <= bounds.top)) {\n            particle.destroy();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}