{"ast":null,"code":"import { executeOnSingleOrMultiple, isArray, isInArray } from \"tsparticles-engine\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nimport { Absorbers } from \"./Absorbers\";\n\nclass AbsorbersPlugin {\n  constructor() {\n    this.id = \"absorbers\";\n  }\n\n  getPlugin(container) {\n    return new Absorbers(container);\n  }\n\n  loadOptions(options, source) {\n    if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n      return;\n    }\n\n    if (source?.absorbers) {\n      options.absorbers = executeOnSingleOrMultiple(source.absorbers, absorber => {\n        const tmp = new Absorber();\n        tmp.load(absorber);\n        return tmp;\n      });\n    }\n\n    options.interactivity.modes.absorbers = executeOnSingleOrMultiple(source?.interactivity?.modes?.absorbers, absorber => {\n      const tmp = new Absorber();\n      tmp.load(absorber);\n      return tmp;\n    });\n  }\n\n  needsPlugin(options) {\n    if (!options) {\n      return false;\n    }\n\n    const absorbers = options.absorbers;\n\n    if (isArray(absorbers)) {\n      return !!absorbers.length;\n    } else if (absorbers) {\n      return true;\n    } else if (options.interactivity?.events?.onClick?.mode && isInArray(\"absorber\", options.interactivity.events.onClick.mode)) {\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexport async function loadAbsorbersPlugin(engine) {\n  let refresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  await engine.addPlugin(new AbsorbersPlugin(), refresh);\n}\nexport * from \"./AbsorberContainer\";\nexport * from \"./Enums/AbsorberClickMode\";","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-plugin-absorbers/esm/index.js"],"names":["executeOnSingleOrMultiple","isArray","isInArray","Absorber","Absorbers","AbsorbersPlugin","constructor","id","getPlugin","container","loadOptions","options","source","needsPlugin","absorbers","absorber","tmp","load","interactivity","modes","length","events","onClick","mode","loadAbsorbersPlugin","engine","refresh","addPlugin"],"mappings":"AAAA,SAASA,yBAAT,EAAoCC,OAApC,EAA6CC,SAA7C,QAA+D,oBAA/D;AACA,SAASC,QAAT,QAAyB,4BAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AACA,MAAMC,eAAN,CAAsB;AAClBC,EAAAA,WAAW,GAAG;AACV,SAAKC,EAAL,GAAU,WAAV;AACH;;AACDC,EAAAA,SAAS,CAACC,SAAD,EAAY;AACjB,WAAO,IAAIL,SAAJ,CAAcK,SAAd,CAAP;AACH;;AACDC,EAAAA,WAAW,CAACC,OAAD,EAAUC,MAAV,EAAkB;AACzB,QAAI,CAAC,KAAKC,WAAL,CAAiBF,OAAjB,CAAD,IAA8B,CAAC,KAAKE,WAAL,CAAiBD,MAAjB,CAAnC,EAA6D;AACzD;AACH;;AACD,QAAIA,MAAM,EAAEE,SAAZ,EAAuB;AACnBH,MAAAA,OAAO,CAACG,SAAR,GAAoBd,yBAAyB,CAACY,MAAM,CAACE,SAAR,EAAoBC,QAAD,IAAc;AAC1E,cAAMC,GAAG,GAAG,IAAIb,QAAJ,EAAZ;AACAa,QAAAA,GAAG,CAACC,IAAJ,CAASF,QAAT;AACA,eAAOC,GAAP;AACH,OAJ4C,CAA7C;AAKH;;AACDL,IAAAA,OAAO,CAACO,aAAR,CAAsBC,KAAtB,CAA4BL,SAA5B,GAAwCd,yBAAyB,CAACY,MAAM,EAAEM,aAAR,EAAuBC,KAAvB,EAA8BL,SAA/B,EAA2CC,QAAD,IAAc;AACrH,YAAMC,GAAG,GAAG,IAAIb,QAAJ,EAAZ;AACAa,MAAAA,GAAG,CAACC,IAAJ,CAASF,QAAT;AACA,aAAOC,GAAP;AACH,KAJgE,CAAjE;AAKH;;AACDH,EAAAA,WAAW,CAACF,OAAD,EAAU;AACjB,QAAI,CAACA,OAAL,EAAc;AACV,aAAO,KAAP;AACH;;AACD,UAAMG,SAAS,GAAGH,OAAO,CAACG,SAA1B;;AACA,QAAIb,OAAO,CAACa,SAAD,CAAX,EAAwB;AACpB,aAAO,CAAC,CAACA,SAAS,CAACM,MAAnB;AACH,KAFD,MAGK,IAAIN,SAAJ,EAAe;AAChB,aAAO,IAAP;AACH,KAFI,MAGA,IAAIH,OAAO,CAACO,aAAR,EAAuBG,MAAvB,EAA+BC,OAA/B,EAAwCC,IAAxC,IACLrB,SAAS,CAAC,UAAD,EAAaS,OAAO,CAACO,aAAR,CAAsBG,MAAtB,CAA6BC,OAA7B,CAAqCC,IAAlD,CADR,EACiE;AAClE,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AAxCiB;;AA0CtB,OAAO,eAAeC,mBAAf,CAAmCC,MAAnC,EAA2D;AAAA,MAAhBC,OAAgB,uEAAN,IAAM;AAC9D,QAAMD,MAAM,CAACE,SAAP,CAAiB,IAAItB,eAAJ,EAAjB,EAAwCqB,OAAxC,CAAN;AACH;AACD,cAAc,qBAAd;AACA,cAAc,2BAAd","sourcesContent":["import { executeOnSingleOrMultiple, isArray, isInArray, } from \"tsparticles-engine\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nimport { Absorbers } from \"./Absorbers\";\nclass AbsorbersPlugin {\n    constructor() {\n        this.id = \"absorbers\";\n    }\n    getPlugin(container) {\n        return new Absorbers(container);\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.absorbers) {\n            options.absorbers = executeOnSingleOrMultiple(source.absorbers, (absorber) => {\n                const tmp = new Absorber();\n                tmp.load(absorber);\n                return tmp;\n            });\n        }\n        options.interactivity.modes.absorbers = executeOnSingleOrMultiple(source?.interactivity?.modes?.absorbers, (absorber) => {\n            const tmp = new Absorber();\n            tmp.load(absorber);\n            return tmp;\n        });\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const absorbers = options.absorbers;\n        if (isArray(absorbers)) {\n            return !!absorbers.length;\n        }\n        else if (absorbers) {\n            return true;\n        }\n        else if (options.interactivity?.events?.onClick?.mode &&\n            isInArray(\"absorber\", options.interactivity.events.onClick.mode)) {\n            return true;\n        }\n        return false;\n    }\n}\nexport async function loadAbsorbersPlugin(engine, refresh = true) {\n    await engine.addPlugin(new AbsorbersPlugin(), refresh);\n}\nexport * from \"./AbsorberContainer\";\nexport * from \"./Enums/AbsorberClickMode\";\n"]},"metadata":{},"sourceType":"module"}