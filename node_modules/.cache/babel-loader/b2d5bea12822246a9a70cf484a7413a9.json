{"ast":null,"code":"import { getRandom, getRangeValue, rangeColorToHsl } from \"tsparticles-engine\";\nexport function initParticle(particle) {\n  const rollOpt = particle.options.roll;\n\n  if (!rollOpt?.enable) {\n    particle.roll = {\n      enable: false,\n      horizontal: false,\n      vertical: false,\n      angle: 0,\n      speed: 0\n    };\n    return;\n  }\n\n  particle.roll = {\n    enable: rollOpt.enable,\n    horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n    vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n    angle: getRandom() * Math.PI * 2,\n    speed: getRangeValue(rollOpt.speed) / 360\n  };\n\n  if (rollOpt.backColor) {\n    particle.backColor = rangeColorToHsl(rollOpt.backColor);\n  } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n    const alterType = getRandom() >= 0.5 ? \"darken\" : \"enlighten\";\n    particle.roll.alter = {\n      type: alterType,\n      value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value)\n    };\n  } else if (rollOpt.darken.enable) {\n    particle.roll.alter = {\n      type: \"darken\",\n      value: getRangeValue(rollOpt.darken.value)\n    };\n  } else if (rollOpt.enlighten.enable) {\n    particle.roll.alter = {\n      type: \"enlighten\",\n      value: getRangeValue(rollOpt.enlighten.value)\n    };\n  }\n}\nexport function updateRoll(particle, delta) {\n  const roll = particle.options.roll,\n        data = particle.roll;\n\n  if (!data || !roll?.enable) {\n    return;\n  }\n\n  const speed = data.speed * delta.factor,\n        max = 2 * Math.PI;\n  data.angle += speed;\n\n  if (data.angle > max) {\n    data.angle -= max;\n  }\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-updater-roll/esm/Utils.js"],"names":["getRandom","getRangeValue","rangeColorToHsl","initParticle","particle","rollOpt","options","roll","enable","horizontal","vertical","angle","speed","mode","Math","PI","backColor","darken","enlighten","alterType","alter","type","value","updateRoll","delta","data","factor","max"],"mappings":"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","sourcesContent":["import { getRandom, getRangeValue, rangeColorToHsl } from \"tsparticles-engine\";\nexport function initParticle(particle) {\n    const rollOpt = particle.options.roll;\n    if (!rollOpt?.enable) {\n        particle.roll = {\n            enable: false,\n            horizontal: false,\n            vertical: false,\n            angle: 0,\n            speed: 0,\n        };\n        return;\n    }\n    particle.roll = {\n        enable: rollOpt.enable,\n        horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n        vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n        angle: getRandom() * Math.PI * 2,\n        speed: getRangeValue(rollOpt.speed) / 360,\n    };\n    if (rollOpt.backColor) {\n        particle.backColor = rangeColorToHsl(rollOpt.backColor);\n    }\n    else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n        const alterType = getRandom() >= 0.5 ? \"darken\" : \"enlighten\";\n        particle.roll.alter = {\n            type: alterType,\n            value: getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value),\n        };\n    }\n    else if (rollOpt.darken.enable) {\n        particle.roll.alter = {\n            type: \"darken\",\n            value: getRangeValue(rollOpt.darken.value),\n        };\n    }\n    else if (rollOpt.enlighten.enable) {\n        particle.roll.alter = {\n            type: \"enlighten\",\n            value: getRangeValue(rollOpt.enlighten.value),\n        };\n    }\n}\nexport function updateRoll(particle, delta) {\n    const roll = particle.options.roll, data = particle.roll;\n    if (!data || !roll?.enable) {\n        return;\n    }\n    const speed = data.speed * delta.factor, max = 2 * Math.PI;\n    data.angle += speed;\n    if (data.angle > max) {\n        data.angle -= max;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}