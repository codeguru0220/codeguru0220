{"ast":null,"code":"import { getLogger, isFunction } from \"../Utils/Utils\";\nimport { Canvas } from \"./Canvas\";\nimport { EventListeners } from \"./Utils/EventListeners\";\nimport { Options } from \"../Options/Classes/Options\";\nimport { Particles } from \"./Particles\";\nimport { Retina } from \"./Retina\";\nimport { errorPrefix } from \"./Utils/Constants\";\nimport { getRangeValue } from \"../Utils/NumberUtils\";\nimport { loadOptions } from \"../Utils/OptionsUtils\";\n\nfunction guardCheck(container) {\n  return container && !container.destroyed;\n}\n\nfunction initDelta(value) {\n  let fpsLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60;\n  let smooth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return {\n    value,\n    factor: smooth ? 60 / fpsLimit : 60 * value / 1000\n  };\n}\n\nfunction loadContainerOptions(engine, container) {\n  const options = new Options(engine, container);\n\n  for (var _len = arguments.length, sourceOptionsArr = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    sourceOptionsArr[_key - 2] = arguments[_key];\n  }\n\n  loadOptions(options, ...sourceOptionsArr);\n  return options;\n}\n\nconst defaultPathGeneratorKey = \"default\",\n      defaultPathGenerator = {\n  generate: p => p.velocity,\n  init: () => {},\n  update: () => {},\n  reset: () => {}\n};\nexport class Container {\n  constructor(engine, id, sourceOptions) {\n    this.id = id;\n\n    this._intersectionManager = entries => {\n      if (!guardCheck(this) || !this.actualOptions.pauseOnOutsideViewport) {\n        return;\n      }\n\n      for (const entry of entries) {\n        if (entry.target !== this.interactivity.element) {\n          continue;\n        }\n\n        (entry.isIntersecting ? this.play : this.pause)();\n      }\n    };\n\n    this._nextFrame = async timestamp => {\n      try {\n        if (!this.smooth && this.lastFrameTime !== undefined && timestamp < this.lastFrameTime + 1000 / this.fpsLimit) {\n          this.draw(false);\n          return;\n        }\n\n        this.lastFrameTime ??= timestamp;\n        const delta = initDelta(timestamp - this.lastFrameTime, this.fpsLimit, this.smooth);\n        this.addLifeTime(delta.value);\n        this.lastFrameTime = timestamp;\n\n        if (delta.value > 1000) {\n          this.draw(false);\n          return;\n        }\n\n        await this.particles.draw(delta);\n\n        if (!this.alive()) {\n          this.destroy();\n          return;\n        }\n\n        if (this.getAnimationStatus()) {\n          this.draw(false);\n        }\n      } catch (e) {\n        getLogger().error(`${errorPrefix} in animation loop`, e);\n      }\n    };\n\n    this._engine = engine;\n    this.fpsLimit = 120;\n    this.smooth = false;\n    this._delay = 0;\n    this._duration = 0;\n    this._lifeTime = 0;\n    this._firstStart = true;\n    this.started = false;\n    this.destroyed = false;\n    this._paused = true;\n    this.lastFrameTime = 0;\n    this.zLayers = 100;\n    this.pageHidden = false;\n    this._sourceOptions = sourceOptions;\n    this._initialSourceOptions = sourceOptions;\n    this.retina = new Retina(this);\n    this.canvas = new Canvas(this);\n    this.particles = new Particles(this._engine, this);\n    this.pathGenerators = new Map();\n    this.interactivity = {\n      mouse: {\n        clicking: false,\n        inside: false\n      }\n    };\n    this.plugins = new Map();\n    this.drawers = new Map();\n    this._options = loadContainerOptions(this._engine, this);\n    this.actualOptions = loadContainerOptions(this._engine, this);\n    this._eventListeners = new EventListeners(this);\n\n    if (typeof IntersectionObserver !== \"undefined\" && IntersectionObserver) {\n      this._intersectionObserver = new IntersectionObserver(entries => this._intersectionManager(entries));\n    }\n\n    this._engine.dispatchEvent(\"containerBuilt\", {\n      container: this\n    });\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  get sourceOptions() {\n    return this._sourceOptions;\n  }\n\n  addClickHandler(callback) {\n    if (!guardCheck(this)) {\n      return;\n    }\n\n    const el = this.interactivity.element;\n\n    if (!el) {\n      return;\n    }\n\n    const clickOrTouchHandler = (e, pos, radius) => {\n      if (!guardCheck(this)) {\n        return;\n      }\n\n      const pxRatio = this.retina.pixelRatio,\n            posRetina = {\n        x: pos.x * pxRatio,\n        y: pos.y * pxRatio\n      },\n            particles = this.particles.quadTree.queryCircle(posRetina, radius * pxRatio);\n      callback(e, particles);\n    };\n\n    const clickHandler = e => {\n      if (!guardCheck(this)) {\n        return;\n      }\n\n      const mouseEvent = e,\n            pos = {\n        x: mouseEvent.offsetX || mouseEvent.clientX,\n        y: mouseEvent.offsetY || mouseEvent.clientY\n      };\n      clickOrTouchHandler(e, pos, 1);\n    };\n\n    const touchStartHandler = () => {\n      if (!guardCheck(this)) {\n        return;\n      }\n\n      touched = true;\n      touchMoved = false;\n    };\n\n    const touchMoveHandler = () => {\n      if (!guardCheck(this)) {\n        return;\n      }\n\n      touchMoved = true;\n    };\n\n    const touchEndHandler = e => {\n      if (!guardCheck(this)) {\n        return;\n      }\n\n      if (touched && !touchMoved) {\n        const touchEvent = e;\n        let lastTouch = touchEvent.touches[touchEvent.touches.length - 1];\n\n        if (!lastTouch) {\n          lastTouch = touchEvent.changedTouches[touchEvent.changedTouches.length - 1];\n\n          if (!lastTouch) {\n            return;\n          }\n        }\n\n        const element = this.canvas.element,\n              canvasRect = element ? element.getBoundingClientRect() : undefined,\n              pos = {\n          x: lastTouch.clientX - (canvasRect ? canvasRect.left : 0),\n          y: lastTouch.clientY - (canvasRect ? canvasRect.top : 0)\n        };\n        clickOrTouchHandler(e, pos, Math.max(lastTouch.radiusX, lastTouch.radiusY));\n      }\n\n      touched = false;\n      touchMoved = false;\n    };\n\n    const touchCancelHandler = () => {\n      if (!guardCheck(this)) {\n        return;\n      }\n\n      touched = false;\n      touchMoved = false;\n    };\n\n    let touched = false,\n        touchMoved = false;\n    el.addEventListener(\"click\", clickHandler);\n    el.addEventListener(\"touchstart\", touchStartHandler);\n    el.addEventListener(\"touchmove\", touchMoveHandler);\n    el.addEventListener(\"touchend\", touchEndHandler);\n    el.addEventListener(\"touchcancel\", touchCancelHandler);\n  }\n\n  addLifeTime(value) {\n    this._lifeTime += value;\n  }\n\n  addPath(key, generator) {\n    let override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (!guardCheck(this) || !override && this.pathGenerators.has(key)) {\n      return false;\n    }\n\n    this.pathGenerators.set(key, generator ?? defaultPathGenerator);\n    return true;\n  }\n\n  alive() {\n    return !this._duration || this._lifeTime <= this._duration;\n  }\n\n  destroy() {\n    if (!guardCheck(this)) {\n      return;\n    }\n\n    this.stop();\n    this.particles.destroy();\n    this.canvas.destroy();\n\n    for (const [, drawer] of this.drawers) {\n      drawer.destroy && drawer.destroy(this);\n    }\n\n    for (const key of this.drawers.keys()) {\n      this.drawers.delete(key);\n    }\n\n    this._engine.plugins.destroy(this);\n\n    this.destroyed = true;\n\n    const mainArr = this._engine.dom(),\n          idx = mainArr.findIndex(t => t === this);\n\n    if (idx >= 0) {\n      mainArr.splice(idx, 1);\n    }\n\n    this._engine.dispatchEvent(\"containerDestroyed\", {\n      container: this\n    });\n  }\n\n  draw(force) {\n    if (!guardCheck(this)) {\n      return;\n    }\n\n    let refreshTime = force;\n    this._drawAnimationFrame = requestAnimationFrame(async timestamp => {\n      if (refreshTime) {\n        this.lastFrameTime = undefined;\n        refreshTime = false;\n      }\n\n      await this._nextFrame(timestamp);\n    });\n  }\n\n  async export(type) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (const [, plugin] of this.plugins) {\n      if (!plugin.export) {\n        continue;\n      }\n\n      const res = await plugin.export(type, options);\n\n      if (!res.supported) {\n        continue;\n      }\n\n      return res.blob;\n    }\n\n    getLogger().error(`${errorPrefix} - Export plugin with type ${type} not found`);\n  }\n\n  getAnimationStatus() {\n    return !this._paused && !this.pageHidden && guardCheck(this);\n  }\n\n  handleClickMode(mode) {\n    if (!guardCheck(this)) {\n      return;\n    }\n\n    this.particles.handleClickMode(mode);\n\n    for (const [, plugin] of this.plugins) {\n      plugin.handleClickMode && plugin.handleClickMode(mode);\n    }\n  }\n\n  async init() {\n    if (!guardCheck(this)) {\n      return;\n    }\n\n    const shapes = this._engine.plugins.getSupportedShapes();\n\n    for (const type of shapes) {\n      const drawer = this._engine.plugins.getShapeDrawer(type);\n\n      if (drawer) {\n        this.drawers.set(type, drawer);\n      }\n    }\n\n    this._options = loadContainerOptions(this._engine, this, this._initialSourceOptions, this.sourceOptions);\n    this.actualOptions = loadContainerOptions(this._engine, this, this._options);\n\n    const availablePlugins = this._engine.plugins.getAvailablePlugins(this);\n\n    for (const [id, plugin] of availablePlugins) {\n      this.plugins.set(id, plugin);\n    }\n\n    this.retina.init();\n    await this.canvas.init();\n    this.updateActualOptions();\n    this.canvas.initBackground();\n    this.canvas.resize();\n    this.zLayers = this.actualOptions.zLayers;\n    this._duration = getRangeValue(this.actualOptions.duration) * 1000;\n    this._delay = getRangeValue(this.actualOptions.delay) * 1000;\n    this._lifeTime = 0;\n    this.fpsLimit = this.actualOptions.fpsLimit > 0 ? this.actualOptions.fpsLimit : 120;\n    this.smooth = this.actualOptions.smooth;\n\n    for (const [, drawer] of this.drawers) {\n      drawer.init && (await drawer.init(this));\n    }\n\n    for (const [, plugin] of this.plugins) {\n      plugin.init && (await plugin.init());\n    }\n\n    this._engine.dispatchEvent(\"containerInit\", {\n      container: this\n    });\n\n    this.particles.init();\n    this.particles.setDensity();\n\n    for (const [, plugin] of this.plugins) {\n      plugin.particlesSetup && plugin.particlesSetup();\n    }\n\n    this._engine.dispatchEvent(\"particlesSetup\", {\n      container: this\n    });\n  }\n\n  async loadTheme(name) {\n    if (!guardCheck(this)) {\n      return;\n    }\n\n    this._currentTheme = name;\n    await this.refresh();\n  }\n\n  pause() {\n    if (!guardCheck(this)) {\n      return;\n    }\n\n    if (this._drawAnimationFrame !== undefined) {\n      cancelAnimationFrame(this._drawAnimationFrame);\n      delete this._drawAnimationFrame;\n    }\n\n    if (this._paused) {\n      return;\n    }\n\n    for (const [, plugin] of this.plugins) {\n      plugin.pause && plugin.pause();\n    }\n\n    if (!this.pageHidden) {\n      this._paused = true;\n    }\n\n    this._engine.dispatchEvent(\"containerPaused\", {\n      container: this\n    });\n  }\n\n  play(force) {\n    if (!guardCheck(this)) {\n      return;\n    }\n\n    const needsUpdate = this._paused || force;\n\n    if (this._firstStart && !this.actualOptions.autoPlay) {\n      this._firstStart = false;\n      return;\n    }\n\n    if (this._paused) {\n      this._paused = false;\n    }\n\n    if (needsUpdate) {\n      for (const [, plugin] of this.plugins) {\n        if (plugin.play) {\n          plugin.play();\n        }\n      }\n    }\n\n    this._engine.dispatchEvent(\"containerPlay\", {\n      container: this\n    });\n\n    this.draw(needsUpdate || false);\n  }\n\n  async refresh() {\n    if (!guardCheck(this)) {\n      return;\n    }\n\n    this.stop();\n    return this.start();\n  }\n\n  async reset() {\n    if (!guardCheck(this)) {\n      return;\n    }\n\n    this._initialSourceOptions = undefined;\n    this._options = loadContainerOptions(this._engine, this);\n    this.actualOptions = loadContainerOptions(this._engine, this, this._options);\n    return this.refresh();\n  }\n\n  setNoise(noiseOrGenerator, init, update) {\n    if (!guardCheck(this)) {\n      return;\n    }\n\n    this.setPath(noiseOrGenerator, init, update);\n  }\n\n  setPath(pathOrGenerator, init, update) {\n    if (!pathOrGenerator || !guardCheck(this)) {\n      return;\n    }\n\n    const pathGenerator = { ...defaultPathGenerator\n    };\n\n    if (isFunction(pathOrGenerator)) {\n      pathGenerator.generate = pathOrGenerator;\n\n      if (init) {\n        pathGenerator.init = init;\n      }\n\n      if (update) {\n        pathGenerator.update = update;\n      }\n    } else {\n      const oldGenerator = pathGenerator;\n      pathGenerator.generate = pathOrGenerator.generate || oldGenerator.generate;\n      pathGenerator.init = pathOrGenerator.init || oldGenerator.init;\n      pathGenerator.update = pathOrGenerator.update || oldGenerator.update;\n    }\n\n    this.addPath(defaultPathGeneratorKey, pathGenerator, true);\n  }\n\n  async start() {\n    if (!guardCheck(this) || this.started) {\n      return;\n    }\n\n    await this.init();\n    this.started = true;\n    await new Promise(resolve => {\n      this._delayTimeout = setTimeout(async () => {\n        this._eventListeners.addListeners();\n\n        if (this.interactivity.element instanceof HTMLElement && this._intersectionObserver) {\n          this._intersectionObserver.observe(this.interactivity.element);\n        }\n\n        for (const [, plugin] of this.plugins) {\n          plugin.start && (await plugin.start());\n        }\n\n        this._engine.dispatchEvent(\"containerStarted\", {\n          container: this\n        });\n\n        this.play();\n        resolve();\n      }, this._delay);\n    });\n  }\n\n  stop() {\n    if (!guardCheck(this) || !this.started) {\n      return;\n    }\n\n    if (this._delayTimeout) {\n      clearTimeout(this._delayTimeout);\n      delete this._delayTimeout;\n    }\n\n    this._firstStart = true;\n    this.started = false;\n\n    this._eventListeners.removeListeners();\n\n    this.pause();\n    this.particles.clear();\n    this.canvas.stop();\n\n    if (this.interactivity.element instanceof HTMLElement && this._intersectionObserver) {\n      this._intersectionObserver.unobserve(this.interactivity.element);\n    }\n\n    for (const [, plugin] of this.plugins) {\n      plugin.stop && plugin.stop();\n    }\n\n    for (const key of this.plugins.keys()) {\n      this.plugins.delete(key);\n    }\n\n    this._sourceOptions = this._options;\n\n    this._engine.dispatchEvent(\"containerStopped\", {\n      container: this\n    });\n  }\n\n  updateActualOptions() {\n    this.actualOptions.responsive = [];\n    const newMaxWidth = this.actualOptions.setResponsive(this.canvas.size.width, this.retina.pixelRatio, this._options);\n    this.actualOptions.setTheme(this._currentTheme);\n\n    if (this.responsiveMaxWidth === newMaxWidth) {\n      return false;\n    }\n\n    this.responsiveMaxWidth = newMaxWidth;\n    return true;\n  }\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-engine/esm/Core/Container.js"],"names":["getLogger","isFunction","Canvas","EventListeners","Options","Particles","Retina","errorPrefix","getRangeValue","loadOptions","guardCheck","container","destroyed","initDelta","value","fpsLimit","smooth","factor","loadContainerOptions","engine","options","sourceOptionsArr","defaultPathGeneratorKey","defaultPathGenerator","generate","p","velocity","init","update","reset","Container","constructor","id","sourceOptions","_intersectionManager","entries","actualOptions","pauseOnOutsideViewport","entry","target","interactivity","element","isIntersecting","play","pause","_nextFrame","timestamp","lastFrameTime","undefined","draw","delta","addLifeTime","particles","alive","destroy","getAnimationStatus","e","error","_engine","_delay","_duration","_lifeTime","_firstStart","started","_paused","zLayers","pageHidden","_sourceOptions","_initialSourceOptions","retina","canvas","pathGenerators","Map","mouse","clicking","inside","plugins","drawers","_options","_eventListeners","IntersectionObserver","_intersectionObserver","dispatchEvent","addClickHandler","callback","el","clickOrTouchHandler","pos","radius","pxRatio","pixelRatio","posRetina","x","y","quadTree","queryCircle","clickHandler","mouseEvent","offsetX","clientX","offsetY","clientY","touchStartHandler","touched","touchMoved","touchMoveHandler","touchEndHandler","touchEvent","lastTouch","touches","length","changedTouches","canvasRect","getBoundingClientRect","left","top","Math","max","radiusX","radiusY","touchCancelHandler","addEventListener","addPath","key","generator","override","has","set","stop","drawer","keys","delete","mainArr","dom","idx","findIndex","t","splice","force","refreshTime","_drawAnimationFrame","requestAnimationFrame","export","type","plugin","res","supported","blob","handleClickMode","mode","shapes","getSupportedShapes","getShapeDrawer","availablePlugins","getAvailablePlugins","updateActualOptions","initBackground","resize","duration","delay","setDensity","particlesSetup","loadTheme","name","_currentTheme","refresh","cancelAnimationFrame","needsUpdate","autoPlay","start","setNoise","noiseOrGenerator","setPath","pathOrGenerator","pathGenerator","oldGenerator","Promise","resolve","_delayTimeout","setTimeout","addListeners","HTMLElement","observe","clearTimeout","removeListeners","clear","unobserve","responsive","newMaxWidth","setResponsive","size","width","setTheme","responsiveMaxWidth"],"mappings":"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","sourcesContent":["import { getLogger, isFunction } from \"../Utils/Utils\";\nimport { Canvas } from \"./Canvas\";\nimport { EventListeners } from \"./Utils/EventListeners\";\nimport { Options } from \"../Options/Classes/Options\";\nimport { Particles } from \"./Particles\";\nimport { Retina } from \"./Retina\";\nimport { errorPrefix } from \"./Utils/Constants\";\nimport { getRangeValue } from \"../Utils/NumberUtils\";\nimport { loadOptions } from \"../Utils/OptionsUtils\";\nfunction guardCheck(container) {\n    return container && !container.destroyed;\n}\nfunction initDelta(value, fpsLimit = 60, smooth = false) {\n    return {\n        value,\n        factor: smooth ? 60 / fpsLimit : (60 * value) / 1000,\n    };\n}\nfunction loadContainerOptions(engine, container, ...sourceOptionsArr) {\n    const options = new Options(engine, container);\n    loadOptions(options, ...sourceOptionsArr);\n    return options;\n}\nconst defaultPathGeneratorKey = \"default\", defaultPathGenerator = {\n    generate: (p) => p.velocity,\n    init: () => {\n    },\n    update: () => {\n    },\n    reset: () => {\n    },\n};\nexport class Container {\n    constructor(engine, id, sourceOptions) {\n        this.id = id;\n        this._intersectionManager = (entries) => {\n            if (!guardCheck(this) || !this.actualOptions.pauseOnOutsideViewport) {\n                return;\n            }\n            for (const entry of entries) {\n                if (entry.target !== this.interactivity.element) {\n                    continue;\n                }\n                (entry.isIntersecting ? this.play : this.pause)();\n            }\n        };\n        this._nextFrame = async (timestamp) => {\n            try {\n                if (!this.smooth &&\n                    this.lastFrameTime !== undefined &&\n                    timestamp < this.lastFrameTime + 1000 / this.fpsLimit) {\n                    this.draw(false);\n                    return;\n                }\n                this.lastFrameTime ??= timestamp;\n                const delta = initDelta(timestamp - this.lastFrameTime, this.fpsLimit, this.smooth);\n                this.addLifeTime(delta.value);\n                this.lastFrameTime = timestamp;\n                if (delta.value > 1000) {\n                    this.draw(false);\n                    return;\n                }\n                await this.particles.draw(delta);\n                if (!this.alive()) {\n                    this.destroy();\n                    return;\n                }\n                if (this.getAnimationStatus()) {\n                    this.draw(false);\n                }\n            }\n            catch (e) {\n                getLogger().error(`${errorPrefix} in animation loop`, e);\n            }\n        };\n        this._engine = engine;\n        this.fpsLimit = 120;\n        this.smooth = false;\n        this._delay = 0;\n        this._duration = 0;\n        this._lifeTime = 0;\n        this._firstStart = true;\n        this.started = false;\n        this.destroyed = false;\n        this._paused = true;\n        this.lastFrameTime = 0;\n        this.zLayers = 100;\n        this.pageHidden = false;\n        this._sourceOptions = sourceOptions;\n        this._initialSourceOptions = sourceOptions;\n        this.retina = new Retina(this);\n        this.canvas = new Canvas(this);\n        this.particles = new Particles(this._engine, this);\n        this.pathGenerators = new Map();\n        this.interactivity = {\n            mouse: {\n                clicking: false,\n                inside: false,\n            },\n        };\n        this.plugins = new Map();\n        this.drawers = new Map();\n        this._options = loadContainerOptions(this._engine, this);\n        this.actualOptions = loadContainerOptions(this._engine, this);\n        this._eventListeners = new EventListeners(this);\n        if (typeof IntersectionObserver !== \"undefined\" && IntersectionObserver) {\n            this._intersectionObserver = new IntersectionObserver((entries) => this._intersectionManager(entries));\n        }\n        this._engine.dispatchEvent(\"containerBuilt\", { container: this });\n    }\n    get options() {\n        return this._options;\n    }\n    get sourceOptions() {\n        return this._sourceOptions;\n    }\n    addClickHandler(callback) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        const el = this.interactivity.element;\n        if (!el) {\n            return;\n        }\n        const clickOrTouchHandler = (e, pos, radius) => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            const pxRatio = this.retina.pixelRatio, posRetina = {\n                x: pos.x * pxRatio,\n                y: pos.y * pxRatio,\n            }, particles = this.particles.quadTree.queryCircle(posRetina, radius * pxRatio);\n            callback(e, particles);\n        };\n        const clickHandler = (e) => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            const mouseEvent = e, pos = {\n                x: mouseEvent.offsetX || mouseEvent.clientX,\n                y: mouseEvent.offsetY || mouseEvent.clientY,\n            };\n            clickOrTouchHandler(e, pos, 1);\n        };\n        const touchStartHandler = () => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            touched = true;\n            touchMoved = false;\n        };\n        const touchMoveHandler = () => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            touchMoved = true;\n        };\n        const touchEndHandler = (e) => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            if (touched && !touchMoved) {\n                const touchEvent = e;\n                let lastTouch = touchEvent.touches[touchEvent.touches.length - 1];\n                if (!lastTouch) {\n                    lastTouch = touchEvent.changedTouches[touchEvent.changedTouches.length - 1];\n                    if (!lastTouch) {\n                        return;\n                    }\n                }\n                const element = this.canvas.element, canvasRect = element ? element.getBoundingClientRect() : undefined, pos = {\n                    x: lastTouch.clientX - (canvasRect ? canvasRect.left : 0),\n                    y: lastTouch.clientY - (canvasRect ? canvasRect.top : 0),\n                };\n                clickOrTouchHandler(e, pos, Math.max(lastTouch.radiusX, lastTouch.radiusY));\n            }\n            touched = false;\n            touchMoved = false;\n        };\n        const touchCancelHandler = () => {\n            if (!guardCheck(this)) {\n                return;\n            }\n            touched = false;\n            touchMoved = false;\n        };\n        let touched = false, touchMoved = false;\n        el.addEventListener(\"click\", clickHandler);\n        el.addEventListener(\"touchstart\", touchStartHandler);\n        el.addEventListener(\"touchmove\", touchMoveHandler);\n        el.addEventListener(\"touchend\", touchEndHandler);\n        el.addEventListener(\"touchcancel\", touchCancelHandler);\n    }\n    addLifeTime(value) {\n        this._lifeTime += value;\n    }\n    addPath(key, generator, override = false) {\n        if (!guardCheck(this) || (!override && this.pathGenerators.has(key))) {\n            return false;\n        }\n        this.pathGenerators.set(key, generator ?? defaultPathGenerator);\n        return true;\n    }\n    alive() {\n        return !this._duration || this._lifeTime <= this._duration;\n    }\n    destroy() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.stop();\n        this.particles.destroy();\n        this.canvas.destroy();\n        for (const [, drawer] of this.drawers) {\n            drawer.destroy && drawer.destroy(this);\n        }\n        for (const key of this.drawers.keys()) {\n            this.drawers.delete(key);\n        }\n        this._engine.plugins.destroy(this);\n        this.destroyed = true;\n        const mainArr = this._engine.dom(), idx = mainArr.findIndex((t) => t === this);\n        if (idx >= 0) {\n            mainArr.splice(idx, 1);\n        }\n        this._engine.dispatchEvent(\"containerDestroyed\", { container: this });\n    }\n    draw(force) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        let refreshTime = force;\n        this._drawAnimationFrame = requestAnimationFrame(async (timestamp) => {\n            if (refreshTime) {\n                this.lastFrameTime = undefined;\n                refreshTime = false;\n            }\n            await this._nextFrame(timestamp);\n        });\n    }\n    async export(type, options = {}) {\n        for (const [, plugin] of this.plugins) {\n            if (!plugin.export) {\n                continue;\n            }\n            const res = await plugin.export(type, options);\n            if (!res.supported) {\n                continue;\n            }\n            return res.blob;\n        }\n        getLogger().error(`${errorPrefix} - Export plugin with type ${type} not found`);\n    }\n    getAnimationStatus() {\n        return !this._paused && !this.pageHidden && guardCheck(this);\n    }\n    handleClickMode(mode) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.particles.handleClickMode(mode);\n        for (const [, plugin] of this.plugins) {\n            plugin.handleClickMode && plugin.handleClickMode(mode);\n        }\n    }\n    async init() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        const shapes = this._engine.plugins.getSupportedShapes();\n        for (const type of shapes) {\n            const drawer = this._engine.plugins.getShapeDrawer(type);\n            if (drawer) {\n                this.drawers.set(type, drawer);\n            }\n        }\n        this._options = loadContainerOptions(this._engine, this, this._initialSourceOptions, this.sourceOptions);\n        this.actualOptions = loadContainerOptions(this._engine, this, this._options);\n        const availablePlugins = this._engine.plugins.getAvailablePlugins(this);\n        for (const [id, plugin] of availablePlugins) {\n            this.plugins.set(id, plugin);\n        }\n        this.retina.init();\n        await this.canvas.init();\n        this.updateActualOptions();\n        this.canvas.initBackground();\n        this.canvas.resize();\n        this.zLayers = this.actualOptions.zLayers;\n        this._duration = getRangeValue(this.actualOptions.duration) * 1000;\n        this._delay = getRangeValue(this.actualOptions.delay) * 1000;\n        this._lifeTime = 0;\n        this.fpsLimit = this.actualOptions.fpsLimit > 0 ? this.actualOptions.fpsLimit : 120;\n        this.smooth = this.actualOptions.smooth;\n        for (const [, drawer] of this.drawers) {\n            drawer.init && (await drawer.init(this));\n        }\n        for (const [, plugin] of this.plugins) {\n            plugin.init && (await plugin.init());\n        }\n        this._engine.dispatchEvent(\"containerInit\", { container: this });\n        this.particles.init();\n        this.particles.setDensity();\n        for (const [, plugin] of this.plugins) {\n            plugin.particlesSetup && plugin.particlesSetup();\n        }\n        this._engine.dispatchEvent(\"particlesSetup\", { container: this });\n    }\n    async loadTheme(name) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this._currentTheme = name;\n        await this.refresh();\n    }\n    pause() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        if (this._drawAnimationFrame !== undefined) {\n            cancelAnimationFrame(this._drawAnimationFrame);\n            delete this._drawAnimationFrame;\n        }\n        if (this._paused) {\n            return;\n        }\n        for (const [, plugin] of this.plugins) {\n            plugin.pause && plugin.pause();\n        }\n        if (!this.pageHidden) {\n            this._paused = true;\n        }\n        this._engine.dispatchEvent(\"containerPaused\", { container: this });\n    }\n    play(force) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        const needsUpdate = this._paused || force;\n        if (this._firstStart && !this.actualOptions.autoPlay) {\n            this._firstStart = false;\n            return;\n        }\n        if (this._paused) {\n            this._paused = false;\n        }\n        if (needsUpdate) {\n            for (const [, plugin] of this.plugins) {\n                if (plugin.play) {\n                    plugin.play();\n                }\n            }\n        }\n        this._engine.dispatchEvent(\"containerPlay\", { container: this });\n        this.draw(needsUpdate || false);\n    }\n    async refresh() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.stop();\n        return this.start();\n    }\n    async reset() {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this._initialSourceOptions = undefined;\n        this._options = loadContainerOptions(this._engine, this);\n        this.actualOptions = loadContainerOptions(this._engine, this, this._options);\n        return this.refresh();\n    }\n    setNoise(noiseOrGenerator, init, update) {\n        if (!guardCheck(this)) {\n            return;\n        }\n        this.setPath(noiseOrGenerator, init, update);\n    }\n    setPath(pathOrGenerator, init, update) {\n        if (!pathOrGenerator || !guardCheck(this)) {\n            return;\n        }\n        const pathGenerator = { ...defaultPathGenerator };\n        if (isFunction(pathOrGenerator)) {\n            pathGenerator.generate = pathOrGenerator;\n            if (init) {\n                pathGenerator.init = init;\n            }\n            if (update) {\n                pathGenerator.update = update;\n            }\n        }\n        else {\n            const oldGenerator = pathGenerator;\n            pathGenerator.generate = pathOrGenerator.generate || oldGenerator.generate;\n            pathGenerator.init = pathOrGenerator.init || oldGenerator.init;\n            pathGenerator.update = pathOrGenerator.update || oldGenerator.update;\n        }\n        this.addPath(defaultPathGeneratorKey, pathGenerator, true);\n    }\n    async start() {\n        if (!guardCheck(this) || this.started) {\n            return;\n        }\n        await this.init();\n        this.started = true;\n        await new Promise((resolve) => {\n            this._delayTimeout = setTimeout(async () => {\n                this._eventListeners.addListeners();\n                if (this.interactivity.element instanceof HTMLElement && this._intersectionObserver) {\n                    this._intersectionObserver.observe(this.interactivity.element);\n                }\n                for (const [, plugin] of this.plugins) {\n                    plugin.start && (await plugin.start());\n                }\n                this._engine.dispatchEvent(\"containerStarted\", { container: this });\n                this.play();\n                resolve();\n            }, this._delay);\n        });\n    }\n    stop() {\n        if (!guardCheck(this) || !this.started) {\n            return;\n        }\n        if (this._delayTimeout) {\n            clearTimeout(this._delayTimeout);\n            delete this._delayTimeout;\n        }\n        this._firstStart = true;\n        this.started = false;\n        this._eventListeners.removeListeners();\n        this.pause();\n        this.particles.clear();\n        this.canvas.stop();\n        if (this.interactivity.element instanceof HTMLElement && this._intersectionObserver) {\n            this._intersectionObserver.unobserve(this.interactivity.element);\n        }\n        for (const [, plugin] of this.plugins) {\n            plugin.stop && plugin.stop();\n        }\n        for (const key of this.plugins.keys()) {\n            this.plugins.delete(key);\n        }\n        this._sourceOptions = this._options;\n        this._engine.dispatchEvent(\"containerStopped\", { container: this });\n    }\n    updateActualOptions() {\n        this.actualOptions.responsive = [];\n        const newMaxWidth = this.actualOptions.setResponsive(this.canvas.size.width, this.retina.pixelRatio, this._options);\n        this.actualOptions.setTheme(this._currentTheme);\n        if (this.responsiveMaxWidth === newMaxWidth) {\n            return false;\n        }\n        this.responsiveMaxWidth = newMaxWidth;\n        return true;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}