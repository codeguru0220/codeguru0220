{"ast":null,"code":"export class ByteStream {\n  constructor(bytes) {\n    this.pos = 0;\n    this.data = new Uint8ClampedArray(bytes);\n  }\n\n  getString(count) {\n    const slice = this.data.slice(this.pos, this.pos + count);\n    this.pos += slice.length;\n    return slice.reduce((acc, curr) => acc + String.fromCharCode(curr), \"\");\n  }\n\n  nextByte() {\n    return this.data[this.pos++];\n  }\n\n  nextTwoBytes() {\n    this.pos += 2;\n    return this.data[this.pos - 2] + (this.data[this.pos - 1] << 8);\n  }\n\n  readSubBlocks() {\n    let blockString = \"\",\n        size = 0;\n\n    do {\n      size = this.data[this.pos++];\n\n      for (let count = size; --count >= 0; blockString += String.fromCharCode(this.data[this.pos++])) {}\n    } while (size !== 0);\n\n    return blockString;\n  }\n\n  readSubBlocksBin() {\n    let size = 0,\n        len = 0;\n\n    for (let offset = 0; (size = this.data[this.pos + offset]) !== 0; offset += size + 1) {\n      len += size;\n    }\n\n    const blockData = new Uint8Array(len);\n\n    for (let i = 0; (size = this.data[this.pos++]) !== 0;) {\n      for (let count = size; --count >= 0; blockData[i++] = this.data[this.pos++]) {}\n    }\n\n    return blockData;\n  }\n\n  skipSubBlocks() {\n    for (; this.data[this.pos] !== 0; this.pos += this.data[this.pos] + 1) {}\n\n    this.pos++;\n  }\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-shape-image/esm/GifUtils/ByteStream.js"],"names":["ByteStream","constructor","bytes","pos","data","Uint8ClampedArray","getString","count","slice","length","reduce","acc","curr","String","fromCharCode","nextByte","nextTwoBytes","readSubBlocks","blockString","size","readSubBlocksBin","len","offset","blockData","Uint8Array","i","skipSubBlocks"],"mappings":"AAAA,OAAO,MAAMA,UAAN,CAAiB;AACpBC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKC,GAAL,GAAW,CAAX;AACA,SAAKC,IAAL,GAAY,IAAIC,iBAAJ,CAAsBH,KAAtB,CAAZ;AACH;;AACDI,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACb,UAAMC,KAAK,GAAG,KAAKJ,IAAL,CAAUI,KAAV,CAAgB,KAAKL,GAArB,EAA0B,KAAKA,GAAL,GAAWI,KAArC,CAAd;AACA,SAAKJ,GAAL,IAAYK,KAAK,CAACC,MAAlB;AACA,WAAOD,KAAK,CAACE,MAAN,CAAa,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGE,MAAM,CAACC,YAAP,CAAoBF,IAApB,CAAlC,EAA6D,EAA7D,CAAP;AACH;;AACDG,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKX,IAAL,CAAU,KAAKD,GAAL,EAAV,CAAP;AACH;;AACDa,EAAAA,YAAY,GAAG;AACX,SAAKb,GAAL,IAAY,CAAZ;AACA,WAAO,KAAKC,IAAL,CAAU,KAAKD,GAAL,GAAW,CAArB,KAA2B,KAAKC,IAAL,CAAU,KAAKD,GAAL,GAAW,CAArB,KAA2B,CAAtD,CAAP;AACH;;AACDc,EAAAA,aAAa,GAAG;AACZ,QAAIC,WAAW,GAAG,EAAlB;AAAA,QAAsBC,IAAI,GAAG,CAA7B;;AACA,OAAG;AACCA,MAAAA,IAAI,GAAG,KAAKf,IAAL,CAAU,KAAKD,GAAL,EAAV,CAAP;;AACA,WAAK,IAAII,KAAK,GAAGY,IAAjB,EAAuB,EAAEZ,KAAF,IAAW,CAAlC,EAAqCW,WAAW,IAAIL,MAAM,CAACC,YAAP,CAAoB,KAAKV,IAAL,CAAU,KAAKD,GAAL,EAAV,CAApB,CAApD,EAAgG,CAC/F;AACJ,KAJD,QAISgB,IAAI,KAAK,CAJlB;;AAKA,WAAOD,WAAP;AACH;;AACDE,EAAAA,gBAAgB,GAAG;AACf,QAAID,IAAI,GAAG,CAAX;AAAA,QAAcE,GAAG,GAAG,CAApB;;AACA,SAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqB,CAACH,IAAI,GAAG,KAAKf,IAAL,CAAU,KAAKD,GAAL,GAAWmB,MAArB,CAAR,MAA0C,CAA/D,EAAkEA,MAAM,IAAIH,IAAI,GAAG,CAAnF,EAAsF;AAClFE,MAAAA,GAAG,IAAIF,IAAP;AACH;;AACD,UAAMI,SAAS,GAAG,IAAIC,UAAJ,CAAeH,GAAf,CAAlB;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgB,CAACN,IAAI,GAAG,KAAKf,IAAL,CAAU,KAAKD,GAAL,EAAV,CAAR,MAAmC,CAAnD,GAAuD;AACnD,WAAK,IAAII,KAAK,GAAGY,IAAjB,EAAuB,EAAEZ,KAAF,IAAW,CAAlC,EAAqCgB,SAAS,CAACE,CAAC,EAAF,CAAT,GAAiB,KAAKrB,IAAL,CAAU,KAAKD,GAAL,EAAV,CAAtD,EAA6E,CAC5E;AACJ;;AACD,WAAOoB,SAAP;AACH;;AACDG,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAKtB,IAAL,CAAU,KAAKD,GAAf,MAAwB,CAA/B,EAAkC,KAAKA,GAAL,IAAY,KAAKC,IAAL,CAAU,KAAKD,GAAf,IAAsB,CAApE,EAAuE,CACtE;;AACD,SAAKA,GAAL;AACH;;AA1CmB","sourcesContent":["export class ByteStream {\n    constructor(bytes) {\n        this.pos = 0;\n        this.data = new Uint8ClampedArray(bytes);\n    }\n    getString(count) {\n        const slice = this.data.slice(this.pos, this.pos + count);\n        this.pos += slice.length;\n        return slice.reduce((acc, curr) => acc + String.fromCharCode(curr), \"\");\n    }\n    nextByte() {\n        return this.data[this.pos++];\n    }\n    nextTwoBytes() {\n        this.pos += 2;\n        return this.data[this.pos - 2] + (this.data[this.pos - 1] << 8);\n    }\n    readSubBlocks() {\n        let blockString = \"\", size = 0;\n        do {\n            size = this.data[this.pos++];\n            for (let count = size; --count >= 0; blockString += String.fromCharCode(this.data[this.pos++])) {\n            }\n        } while (size !== 0);\n        return blockString;\n    }\n    readSubBlocksBin() {\n        let size = 0, len = 0;\n        for (let offset = 0; (size = this.data[this.pos + offset]) !== 0; offset += size + 1) {\n            len += size;\n        }\n        const blockData = new Uint8Array(len);\n        for (let i = 0; (size = this.data[this.pos++]) !== 0;) {\n            for (let count = size; --count >= 0; blockData[i++] = this.data[this.pos++]) {\n            }\n        }\n        return blockData;\n    }\n    skipSubBlocks() {\n        for (; this.data[this.pos] !== 0; this.pos += this.data[this.pos] + 1) {\n        }\n        this.pos++;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}