{"ast":null,"code":"import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont } from \"tsparticles-engine\";\nexport const validTypes = [\"text\", \"character\", \"char\"];\nexport class TextDrawer {\n  draw(context, particle, radius, opacity) {\n    const character = particle.shapeData;\n\n    if (character === undefined) {\n      return;\n    }\n\n    const textData = character.value;\n\n    if (textData === undefined) {\n      return;\n    }\n\n    if (particle.text === undefined) {\n      particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n\n    const text = particle.text,\n          style = character.style ?? \"\",\n          weight = character.weight ?? \"400\",\n          size = Math.round(radius) * 2,\n          font = character.font ?? \"Verdana\",\n          fill = particle.fill,\n          offsetX = text.length * radius / 2;\n    context.font = `${style} ${weight} ${size}px \"${font}\"`;\n    const pos = {\n      x: -offsetX,\n      y: radius / 2\n    };\n    context.globalAlpha = opacity;\n\n    if (fill) {\n      context.fillText(text, pos.x, pos.y);\n    } else {\n      context.strokeText(text, pos.x, pos.y);\n    }\n\n    context.globalAlpha = 1;\n  }\n\n  getSidesCount() {\n    return 12;\n  }\n\n  async init(container) {\n    const options = container.actualOptions;\n\n    if (validTypes.find(t => isInArray(t, options.particles.shape.type))) {\n      const shapeOptions = validTypes.map(t => options.particles.shape.options[t]).find(t => !!t),\n            promises = [];\n      executeOnSingleOrMultiple(shapeOptions, shape => {\n        promises.push(loadFont(shape.font, shape.weight));\n      });\n      await Promise.all(promises);\n    }\n  }\n\n  particleInit(container, particle) {\n    if (!particle.shape || !validTypes.includes(particle.shape)) {\n      return;\n    }\n\n    const character = particle.shapeData;\n\n    if (character === undefined) {\n      return;\n    }\n\n    const textData = character.value;\n\n    if (textData === undefined) {\n      return;\n    }\n\n    particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n  }\n\n}","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/node_modules/tsparticles-shape-text/esm/TextDrawer.js"],"names":["executeOnSingleOrMultiple","isInArray","itemFromSingleOrMultiple","loadFont","validTypes","TextDrawer","draw","context","particle","radius","opacity","character","shapeData","undefined","textData","value","text","randomIndexData","style","weight","size","Math","round","font","fill","offsetX","length","pos","x","y","globalAlpha","fillText","strokeText","getSidesCount","init","container","options","actualOptions","find","t","particles","shape","type","shapeOptions","map","promises","push","Promise","all","particleInit","includes"],"mappings":"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","sourcesContent":["import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont, } from \"tsparticles-engine\";\nexport const validTypes = [\"text\", \"character\", \"char\"];\nexport class TextDrawer {\n    draw(context, particle, radius, opacity) {\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        if (particle.text === undefined) {\n            particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n        }\n        const text = particle.text, style = character.style ?? \"\", weight = character.weight ?? \"400\", size = Math.round(radius) * 2, font = character.font ?? \"Verdana\", fill = particle.fill, offsetX = (text.length * radius) / 2;\n        context.font = `${style} ${weight} ${size}px \"${font}\"`;\n        const pos = {\n            x: -offsetX,\n            y: radius / 2,\n        };\n        context.globalAlpha = opacity;\n        if (fill) {\n            context.fillText(text, pos.x, pos.y);\n        }\n        else {\n            context.strokeText(text, pos.x, pos.y);\n        }\n        context.globalAlpha = 1;\n    }\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map((t) => options.particles.shape.options[t])\n                .find((t) => !!t), promises = [];\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\n                promises.push(loadFont(shape.font, shape.weight));\n            });\n            await Promise.all(promises);\n        }\n    }\n    particleInit(container, particle) {\n        if (!particle.shape || !validTypes.includes(particle.shape)) {\n            return;\n        }\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}