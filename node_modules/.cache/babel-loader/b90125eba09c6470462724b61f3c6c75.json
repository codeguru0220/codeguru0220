{"ast":null,"code":"var _jsxFileName = \"D:\\\\mitsukimiyagi-portfolio\\\\src\\\\context\\\\Context.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport MensajeIngles from './../language/en.json';\nimport { IntlProvider } from 'react-intl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst langContext = /*#__PURE__*/React.createContext();\n\nconst LangProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  let localePorDefecto;\n  let mensajesPorDefecto;\n  const lang = localStorage.getItem('lang');\n\n  if (lang) {\n    localePorDefecto = lang;\n\n    if (lang === 'en-US') {\n      mensajesPorDefecto = MensajeIngles;\n    } else {\n      localePorDefecto = 'en-US';\n      mensajesPorDefecto = MensajeIngles;\n    }\n  }\n\n  const [mensaje, setMensaje] = useState(mensajesPorDefecto);\n  const [locale, setLocale] = useState(localePorDefecto);\n\n  const selectLanguage = language => {\n    switch (language) {\n      case 'en-US':\n        setMensaje(MensajeIngles);\n        setLocale('en-US');\n        localStorage.setItem('lang', 'en-US');\n        break;\n\n      default:\n        setMensaje(MensajeIngles);\n        setLocale('en-US');\n        localStorage.setItem('lang', 'en-US');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(langContext.Provider, {\n    value: {\n      selectLanguage: selectLanguage\n    },\n    children: /*#__PURE__*/_jsxDEV(IntlProvider, {\n      locale: locale,\n      messages: mensaje,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LangProvider, \"q/nvsHQmzSLSXqRnKylTdbSrpm8=\");\n\n_c = LangProvider;\nexport { LangProvider, langContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"LangProvider\");","map":{"version":3,"sources":["D:/mitsukimiyagi-portfolio/src/context/Context.jsx"],"names":["React","useState","MensajeIngles","IntlProvider","langContext","createContext","LangProvider","children","localePorDefecto","mensajesPorDefecto","lang","localStorage","getItem","mensaje","setMensaje","locale","setLocale","selectLanguage","language","setItem"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,SAAQC,YAAR,QAA2B,YAA3B;;AAEA,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,EAApB;;AAGA,MAAMC,YAAY,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AACjC,MAAIC,gBAAJ;AACH,MAAIC,kBAAJ;AACA,QAAMC,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAb;;AAEA,MAAGF,IAAH,EAAQ;AACPF,IAAAA,gBAAgB,GAAGE,IAAnB;;AAEA,QAAGA,IAAI,KAAK,OAAZ,EAAoB;AACnBD,MAAAA,kBAAkB,GAAGP,aAArB;AACA,KAFD,MAEO;AACNM,MAAAA,gBAAgB,GAAG,OAAnB;AACAC,MAAAA,kBAAkB,GAAGP,aAArB;AACA;AACD;;AAEE,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAACQ,kBAAD,CAAtC;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAACO,gBAAD,CAApC;;AAEA,QAAMS,cAAc,GAAIC,QAAD,IAAa;AAChC,YAAQA,QAAR;AACI,WAAK,OAAL;AACIJ,QAAAA,UAAU,CAACZ,aAAD,CAAV;AACAc,QAAAA,SAAS,CAAC,OAAD,CAAT;AACAL,QAAAA,YAAY,CAACQ,OAAb,CAAqB,MAArB,EAA6B,OAA7B;AACA;;AACJ;AACIL,QAAAA,UAAU,CAACZ,aAAD,CAAV;AACAc,QAAAA,SAAS,CAAC,OAAD,CAAT;AACAL,QAAAA,YAAY,CAACQ,OAAb,CAAqB,MAArB,EAA6B,OAA7B;AATR;AAWH,GAZD;;AAaA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACF,MAAAA,cAAc,EAAEA;AAAjB,KAA7B;AAAA,2BACI,QAAC,YAAD;AAAc,MAAA,MAAM,EAAEF,MAAtB;AAA8B,MAAA,QAAQ,EAAEF,OAAxC;AAAA,gBACKN;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAvCD;;GAAMD,Y;;KAAAA,Y;AAyCN,SAAQA,YAAR,EAAsBF,WAAtB","sourcesContent":["import React, {useState} from 'react';\r\nimport MensajeIngles from './../language/en.json';\r\nimport {IntlProvider} from 'react-intl';\r\n\r\nconst langContext = React.createContext();\r\n\r\n\r\nconst LangProvider = ({children}) => {\r\n    let localePorDefecto;\r\n\tlet mensajesPorDefecto;\r\n\tconst lang = localStorage.getItem('lang');\r\n\r\n\tif(lang){\r\n\t\tlocalePorDefecto = lang\r\n\r\n\t\tif(lang === 'en-US'){\r\n\t\t\tmensajesPorDefecto = MensajeIngles;\r\n\t\t} else {\r\n\t\t\tlocalePorDefecto = 'en-US'\r\n\t\t\tmensajesPorDefecto = MensajeIngles;\r\n\t\t}\r\n\t}\r\n\r\n    const [mensaje, setMensaje] = useState(mensajesPorDefecto);\r\n    const [locale, setLocale] = useState(localePorDefecto);\r\n\r\n    const selectLanguage = (language) =>{\r\n        switch (language) {\r\n            case 'en-US':\r\n                setMensaje(MensajeIngles);\r\n                setLocale('en-US');\r\n                localStorage.setItem('lang', 'en-US');\r\n                break;\r\n            default:\r\n                setMensaje(MensajeIngles);  \r\n                setLocale('en-US');\r\n                localStorage.setItem('lang', 'en-US');\r\n        }\r\n    }\r\n    return (\r\n        <langContext.Provider value={{selectLanguage: selectLanguage}}>\r\n            <IntlProvider locale={locale} messages={mensaje}>\r\n                {children}\r\n            </IntlProvider>\r\n        </langContext.Provider>\r\n    );\r\n};\r\n\r\nexport {LangProvider, langContext};"]},"metadata":{},"sourceType":"module"}